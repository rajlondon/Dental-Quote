import React, { useState, useEffect } from 'react';
import { useLocation, useSearch, Link } from 'wouter';
import { useTranslation } from 'react-i18next';
import { useQuery } from '@tanstack/react-query';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { ensureUuidFormat } from '@/lib/id-converter';
import { useAuth } from '@/hooks/use-auth';
import { 
  LayoutDashboard, 
  MessageSquare, 
  CalendarRange, 
  FileClock,
  Receipt,
  Building2,
  ChevronRight,
  Bell,
  FileCheck,
  FileText,
  BellRing,
  Clock,
  Settings,
  UserCircle2
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Footer from '@/components/Footer';
import PatientLayoutHeader from '@/components/patient/PatientLayoutHeader';
import SmallProfileInfo from '@/components/SmallProfileInfo';
import { NotificationsProvider, useNotifications } from '@/hooks/use-notifications';
import { useToast } from '@/hooks/use-toast';
import MiniCalendar from '@/components/MiniCalendar';
import { PatientQuoteDetail } from '@/components/patient/PatientQuoteDetail';
import { StandaloneQuotePage } from '@/pages/StandaloneQuotePage';

// Types (to be moved to shared eventually)
interface PatientUpcomingAppointment {
  id: string;
  date: string; // ISO string
  time: string; // e.g. "14:30"
  clinicName: string;
  clinicLogo?: string;
  status: 'confirmed' | 'pending' | 'completed' | 'cancelled';
  type: string;
}

interface PatientTreatmentOverview {
  total: number;
  completed: number;
  upcoming: number;
  inProgress: number;
}

interface PatientPortalSectionProps {
  setActiveSection: (section: string) => void;
}

// Mock data - normally this would come from an API
const upcomingAppointments: PatientUpcomingAppointment[] = [
  {
    id: "appt-1",
    date: "2025-06-10",
    time: "14:30",
    clinicName: "Istanbul Dental Clinic",
    clinicLogo: "/images/clinics/istanbul-dental.png",
    status: "confirmed",
    type: "Dental Implant Consultation"
  },
  {
    id: "appt-2",
    date: "2025-06-15",
    time: "11:00",
    clinicName: "DentGroup International",
    clinicLogo: "/images/clinics/dentgroup.jpg",
    status: "pending",
    type: "Follow-up Appointment"
  }
];

const treatmentOverview: PatientTreatmentOverview = {
  total: 8,
  completed: 3,
  upcoming: 4,
  inProgress: 1
};

type NotificationCategory = 'appointment' | 'message' | 'treatment' | 'payment' | 'other';

interface Notification {
  id: string;
  title: string;
  message: string;
  date: string; // ISO string
  read: boolean;
  category: NotificationCategory;
  priority?: 'high' | 'medium' | 'low';
  link?: string;
  linkText?: string;
}

const patientNotifications: Notification[] = [
  {
    id: "notif-1",
    title: "Appointment Confirmed",
    message: "Your appointment on June 10th at 2:30 PM with Istanbul Dental Clinic has been confirmed.",
    date: "2025-05-14T10:30:00",
    read: false,
    category: "appointment",
    priority: "medium",
    link: "/patient-portal?section=appointments",
    linkText: "View Appointment"
  },
  {
    id: "notif-2",
    title: "New Message from Dr. Mehmet",
    message: "Dr. Mehmet has sent you information about your upcoming procedure. Please review it before your appointment.",
    date: "2025-05-13T14:45:00",
    read: true,
    category: "message",
    link: "/patient-portal?section=messages",
    linkText: "Read Message"
  },
  {
    id: "notif-3",
    title: "Payment Reminder",
    message: "Your deposit payment for the dental implant procedure is due in 3 days.",
    date: "2025-05-12T09:15:00",
    read: false,
    category: "payment",
    priority: "high",
    link: "/patient-portal?section=payments",
    linkText: "Make Payment"
  }
];

export const PatientPortalContext = React.createContext<{
  activeSection: string;
  setActiveSection: (section: string) => void;
}>({
  activeSection: 'dashboard',
  setActiveSection: () => {},
});

// Main Component
const PatientPortalPage: React.FC = () => {
  const { t } = useTranslation();
  const { user } = useAuth();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [search] = useSearch();
  
  // Extract section from URL parameters if present
  useEffect(() => {
    const params = new URLSearchParams(search);
    const sectionFromUrl = params.get('section');
    if (sectionFromUrl) {
      setActiveSection(sectionFromUrl);
    }
    
    // Check for treatment plan ID in URL
    const treatmentPlanId = params.get('treatmentPlanId');
    if (treatmentPlanId) {
      setActiveSection('treatment-plans');
    }
  }, [search]);
  
  // Update URL when section changes
  useEffect(() => {
    // Only update URL if the section isn't already in the URL
    const params = new URLSearchParams(search);
    const currentSection = params.get('section');
    
    if (currentSection !== activeSection) {
      params.set('section', activeSection);
      
      // Convert parameters to query string
      const newSearch = params.toString() ? `?${params.toString()}` : '';
      
      // Update URL without navigating
      window.history.replaceState({}, '', `${window.location.pathname}${newSearch}`);
    }
  }, [activeSection, search]);
  
  // If not authenticated, redirect to login
  if (!user) {
    return (
      <div className="flex flex-col min-h-screen">
        <PatientLayoutHeader />
        
        <main className="flex-grow bg-gray-50 py-8">
          <div className="container mx-auto px-4">
            <Card>
              <CardHeader>
                <CardTitle>{t('portal.login_required', 'Login Required')}</CardTitle>
                <CardDescription>
                  {t('portal.login_message', 'Please log in to access the patient portal.')}
                </CardDescription>
              </CardHeader>
              <CardFooter>
                <Link href="/portal-login">
                  <Button>{t('portal.login', 'Log In')}</Button>
                </Link>
              </CardFooter>
            </Card>
          </div>
        </main>
        
        <Footer />
      </div>
    );
  }
  
  return (
    <NotificationsProvider>
      <PatientPortalContext.Provider value={{ activeSection, setActiveSection }}>
        <div className="flex flex-col min-h-screen">
          <PatientLayoutHeader />
          
          <main className="flex-grow bg-gray-50 py-8">
            <div className="container mx-auto px-4">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                {/* Sidebar */}
                <div className="md:col-span-1">
                  <PatientSidebar activeSection={activeSection} setActiveSection={setActiveSection} />
                </div>
                
                {/* Main Content */}
                <div className="md:col-span-3">
                  {activeSection === 'dashboard' && <DashboardSection setActiveSection={setActiveSection} />}
                  {activeSection === 'messages' && <MessagesSection setActiveSection={setActiveSection} />}
                  {activeSection === 'appointments' && <AppointmentsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'treatment-plans' && <TreatmentPlansSection setActiveSection={setActiveSection} />}
                  {activeSection === 'quotes' && <QuotesSection />}
                  {activeSection === 'dental-records' && <DentalRecordsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'payments' && <PaymentsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'clinics' && <ClinicsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'notifications' && <NotificationsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'settings' && <SettingsSection setActiveSection={setActiveSection} />}
                  {activeSection === 'profile' && <ProfileSection setActiveSection={setActiveSection} />}
                </div>
              </div>
            </div>
          </main>
          
          <Footer />
        </div>
      </PatientPortalContext.Provider>
    </NotificationsProvider>
  );
};

// Sidebar Component
const PatientSidebar: React.FC<{
  activeSection: string;
  setActiveSection: (section: string) => void;
}> = ({ activeSection, setActiveSection }) => {
  const { t } = useTranslation();
  const { user } = useAuth();
  const { notifications } = useNotifications();
  
  const menuItems = [
    { id: 'dashboard', label: t('portal.dashboard.title', 'Dashboard'), icon: <LayoutDashboard size={18} /> },
    { 
      id: 'messages', 
      label: t('portal.messages.title', 'Messages'), 
      icon: <MessageSquare size={18} />,
      notificationCount: notifications.filter(n => n.category === 'message' && !n.read).length
    },
    { 
      id: 'appointments', 
      label: t('portal.appointments.title', 'Appointments'), 
      icon: <CalendarRange size={18} />,
      notificationCount: notifications.filter(n => n.category === 'appointment' && !n.read).length
    },
    { 
      id: 'treatment-plans', 
      label: t('portal.treatment_plans.title', 'Treatment Plans'), 
      icon: <FileClock size={18} />,
      notificationCount: notifications.filter(n => n.category === 'treatment' && !n.read).length
    },
    { 
      id: 'quotes', 
      label: t('portal.quotes.title', 'My Quotes'), 
      icon: <Receipt size={18} />,
      notificationCount: notifications.filter(n => n.category === 'update' && !n.read).length
    },
    { id: 'dental-records', label: t('portal.dental_records.title', 'Dental Records'), icon: <FileCheck size={18} /> },
    { 
      id: 'payments', 
      label: t('portal.payments.title', 'Payments'), 
      icon: <Receipt size={18} />,
      notificationCount: notifications.filter(n => n.category === 'payment' && !n.read).length
    },
    { id: 'clinics', label: t('portal.clinics.title', 'My Clinics'), icon: <Building2 size={18} /> },
    { 
      id: 'notifications', 
      label: t('portal.notifications.title', 'Notifications'), 
      icon: <Bell size={18} />,
      notificationCount: notifications.filter(n => !n.read).length
    },
    { id: 'settings', label: t('portal.settings.title', 'Settings'), icon: <Settings size={18} /> }
  ];
  
  return (
    <div className="bg-white rounded-lg shadow mb-6">
      <div className="p-4 border-b border-gray-200">
        <SmallProfileInfo 
          user={user} 
          onProfileClick={() => setActiveSection('profile')}
        />
      </div>
      
      <div className="py-2">
        {menuItems.map((item) => (
          <button
            key={item.id}
            className={`w-full flex items-center justify-between px-4 py-2 text-left ${
              activeSection === item.id 
                ? 'bg-blue-50 text-blue-600 font-medium' 
                : 'text-gray-700 hover:bg-gray-50'
            }`}
            onClick={() => setActiveSection(item.id)}
          >
            <div className="flex items-center">
              <span className="mr-3">{item.icon}</span>
              <span>{item.label}</span>
            </div>
            
            {item.notificationCount > 0 && (
              <Badge variant="destructive" className="ml-auto">
                {item.notificationCount}
              </Badge>
            )}
          </button>
        ))}
      </div>
    </div>
  );
};

// Dashboard section component
const DashboardSection: React.FC<DashboardSectionProps> = ({ setActiveSection }) => {
  const { t } = useTranslation();
  const { toast } = useToast();
  const { notifications } = useNotifications();
  const [hotelViewMode, setHotelViewMode] = useState<'selection' | 'confirmed' | 'self-arranged'>('selection');
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">
          {t('portal.dashboard.title', 'Dashboard')}
        </h2>
      </div>
      
      {/* Mobile Navigation Hint - Only visible on mobile */}
      <div className="md:hidden p-4 bg-blue-50 rounded-lg border border-blue-100 mb-4">
        <div className="flex items-center">
          <div className="bg-blue-100 rounded-full p-2 mr-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-600">
              <path d="M9 18l6-6-6-6"></path>
            </svg>
          </div>
          <div>
            <p className="text-blue-800 font-medium">Navigate Your Portal</p>
            <p className="text-blue-600 text-sm">Use the menu above to access all your patient information.</p>
          </div>
        </div>
      </div>
      
      {/* Notifications Panel */}
      {notifications.filter(n => !n.read).length > 0 && (
        <Card className="mb-6 border-blue-200 bg-blue-50">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <BellRing className="h-5 w-5 mr-2 text-blue-500" />
              {t('portal.dashboard.notifications', 'Recent Notifications')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {notifications
                .filter(n => !n.read)
                .slice(0, 3)
                .map(notification => (
                  <div key={notification.id} className="flex items-start bg-white p-3 rounded-lg border border-blue-100">
                    <div className={`
                      shrink-0 rounded-full p-2 mr-3
                      ${notification.category === 'appointment' ? 'bg-indigo-100 text-indigo-600' : ''}
                      ${notification.category === 'message' ? 'bg-green-100 text-green-600' : ''}
                      ${notification.category === 'payment' ? 'bg-amber-100 text-amber-600' : ''}
                      ${notification.category === 'treatment' ? 'bg-violet-100 text-violet-600' : ''}
                      ${notification.category === 'other' ? 'bg-gray-100 text-gray-600' : ''}
                    `}>
                      {notification.category === 'appointment' && <CalendarRange className="h-4 w-4" />}
                      {notification.category === 'message' && <MessageSquare className="h-4 w-4" />}
                      {notification.category === 'payment' && <Receipt className="h-4 w-4" />}
                      {notification.category === 'treatment' && <FileClock className="h-4 w-4" />}
                      {notification.category === 'other' && <Bell className="h-4 w-4" />}
                    </div>
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <h4 className="font-medium text-gray-900">{notification.title}</h4>
                        <span className="text-xs text-gray-500">
                          {new Date(notification.date).toLocaleString(undefined, { 
                            hour: 'numeric', 
                            minute: 'numeric',
                            day: 'numeric',
                            month: 'short'
                          })}
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">{notification.message}</p>
                      {notification.link && (
                        <a 
                          href={notification.link} 
                          className="inline-block mt-2 text-xs font-medium text-blue-600 hover:text-blue-800"
                        >
                          {notification.linkText || t('portal.view_details', 'View Details')}
                        </a>
                      )}
                    </div>
                  </div>
                ))}
            </div>
            {notifications.filter(n => !n.read).length > 3 && (
              <Button 
                variant="link" 
                className="mt-3 p-0" 
                onClick={() => setActiveSection('notifications')}
              >
                {t('portal.view_all_notifications', 'View all notifications')} ({notifications.filter(n => !n.read).length})
              </Button>
            )}
          </CardContent>
        </Card>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Upcoming Appointments */}
        <Card>
          <CardHeader className="pb-2">
            <div className="flex justify-between items-center">
              <CardTitle className="text-lg">
                {t('portal.dashboard.upcoming_appointments', 'Upcoming Appointments')}
              </CardTitle>
              <Button 
                variant="ghost" 
                className="h-8 px-2 text-sm"
                onClick={() => setActiveSection('appointments')}
              >
                {t('portal.view_all', 'View All')}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {upcomingAppointments.length > 0 ? (
              <div className="space-y-3">
                {upcomingAppointments.map(appointment => (
                  <div 
                    key={appointment.id} 
                    className="p-3 border rounded-lg flex items-center justify-between hover:border-blue-200 hover:bg-blue-50 transition-colors"
                    onClick={() => setActiveSection('appointments')}
                    style={{ cursor: 'pointer' }}
                  >
                    <div className="flex items-center">
                      <div className="h-10 w-10 rounded-full bg-gray-100 overflow-hidden mr-3 flex-shrink-0">
                        {appointment.clinicLogo ? (
                          <img 
                            src={appointment.clinicLogo} 
                            alt={appointment.clinicName} 
                            className="h-full w-full object-cover"
                          />
                        ) : (
                          <Building2 className="h-6 w-6 m-2 text-gray-500" />
                        )}
                      </div>
                      <div>
                        <h4 className="font-medium text-sm">{appointment.type}</h4>
                        <div className="text-xs text-gray-500 flex items-center mt-0.5">
                          <Clock className="h-3 w-3 mr-1" />
                          {new Date(appointment.date).toLocaleDateString(undefined, { 
                            month: 'short', 
                            day: 'numeric', 
                            year: 'numeric' 
                          })}, {appointment.time}
                        </div>
                        <div className="text-xs text-gray-500 mt-0.5">
                          {appointment.clinicName}
                        </div>
                      </div>
                    </div>
                    <div>
                      <Badge variant={
                        appointment.status === 'confirmed' ? 'default' :
                        appointment.status === 'pending' ? 'secondary' :
                        appointment.status === 'completed' ? 'success' : 'destructive'
                      }>
                        {appointment.status}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="py-6 text-center">
                <p className="text-gray-500">
                  {t('portal.no_upcoming_appointments', 'No upcoming appointments')}
                </p>
                <Button 
                  className="mt-2" 
                  variant="outline"
                  onClick={() => setActiveSection('appointments')}
                >
                  {t('portal.schedule_appointment', 'Schedule an Appointment')}
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
        
        {/* Treatment Overview */}
        <Card>
          <CardHeader className="pb-2">
            <div className="flex justify-between items-center">
              <CardTitle className="text-lg">
                {t('portal.dashboard.treatment_overview', 'Treatment Overview')}
              </CardTitle>
              <Button 
                variant="ghost" 
                className="h-8 px-2 text-sm"
                onClick={() => setActiveSection('treatment-plans')}
              >
                {t('portal.view_all', 'View All')}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Progress bar */}
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>
                    {t('portal.overall_progress', 'Overall Progress')}
                  </span>
                  <span className="font-medium">
                    {Math.round((treatmentOverview.completed / treatmentOverview.total) * 100)}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div 
                    className="bg-blue-600 h-2.5 rounded-full" 
                    style={{ width: `${(treatmentOverview.completed / treatmentOverview.total) * 100}%` }}
                  ></div>
                </div>
              </div>
              
              {/* Treatment status tiles */}
              <div className="grid grid-cols-3 gap-2">
                <div className="bg-green-50 border border-green-100 rounded-lg p-3 text-center">
                  <div className="text-xl font-bold text-green-600">{treatmentOverview.completed}</div>
                  <div className="text-xs text-green-800">
                    {t('portal.completed', 'Completed')}
                  </div>
                </div>
                <div className="bg-blue-50 border border-blue-100 rounded-lg p-3 text-center">
                  <div className="text-xl font-bold text-blue-600">{treatmentOverview.upcoming}</div>
                  <div className="text-xs text-blue-800">
                    {t('portal.upcoming', 'Upcoming')}
                  </div>
                </div>
                <div className="bg-purple-50 border border-purple-100 rounded-lg p-3 text-center">
                  <div className="text-xl font-bold text-purple-600">{treatmentOverview.inProgress}</div>
                  <div className="text-xs text-purple-800">
                    {t('portal.in_progress', 'In Progress')}
                  </div>
                </div>
              </div>
              
              <Button 
                variant="outline" 
                className="w-full mt-2"
                onClick={() => setActiveSection('treatment-plans')}
              >
                {t('portal.view_treatment_plans', 'View Treatment Plans')}
                <ChevronRight className="h-4 w-4 ml-1" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* Calendar and Documents */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Mini Calendar */}
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">
              {t('portal.dashboard.calendar', 'Calendar')}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <MiniCalendar 
              markedDates={upcomingAppointments.map(apt => apt.date)}
              onDateClick={(date) => {
                toast({
                  title: t('portal.calendar.date_clicked', 'Date clicked'),
                  description: `You clicked on ${date.toLocaleDateString()}`,
                });
              }}
            />
          </CardContent>
        </Card>
        
        {/* Recent Documents */}
        <Card>
          <CardHeader className="pb-2">
            <div className="flex justify-between items-center">
              <CardTitle className="text-lg">
                {t('portal.dashboard.recent_documents', 'Recent Documents')}
              </CardTitle>
              <Button 
                variant="ghost" 
                className="h-8 px-2 text-sm"
                onClick={() => setActiveSection('dental-records')}
              >
                {t('portal.view_all', 'View All')}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="p-3 border rounded-lg flex items-center justify-between hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <div className="flex items-center">
                  <div className="h-8 w-8 bg-blue-100 rounded-lg mr-3 flex items-center justify-center">
                    <FileText className="h-4 w-4 text-blue-600" />
                  </div>
                  <div>
                    <h4 className="font-medium text-sm">Treatment Plan.pdf</h4>
                    <p className="text-xs text-gray-500">May 10, 2025</p>
                  </div>
                </div>
                <Button variant="ghost" size="sm">
                  {t('portal.view', 'View')}
                </Button>
              </div>
              
              <div className="p-3 border rounded-lg flex items-center justify-between hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <div className="flex items-center">
                  <div className="h-8 w-8 bg-blue-100 rounded-lg mr-3 flex items-center justify-center">
                    <FileText className="h-4 w-4 text-blue-600" />
                  </div>
                  <div>
                    <h4 className="font-medium text-sm">Dental X-Ray Report.pdf</h4>
                    <p className="text-xs text-gray-500">May 5, 2025</p>
                  </div>
                </div>
                <Button variant="ghost" size="sm">
                  {t('portal.view', 'View')}
                </Button>
              </div>
              
              <div className="p-3 border rounded-lg flex items-center justify-between hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <div className="flex items-center">
                  <div className="h-8 w-8 bg-blue-100 rounded-lg mr-3 flex items-center justify-center">
                    <FileText className="h-4 w-4 text-blue-600" />
                  </div>
                  <div>
                    <h4 className="font-medium text-sm">Quote #1234.pdf</h4>
                    <p className="text-xs text-gray-500">April 28, 2025</p>
                  </div>
                </div>
                <Button variant="ghost" size="sm">
                  {t('portal.view', 'View')}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

// Quotes section component
const QuotesSection = () => {
  const { t } = useTranslation();
  const [search] = useSearch();
  const [selectedQuoteId, setSelectedQuoteId] = useState<string | null>(null);
  
  // Extract quoteId from URL if present
  useEffect(() => {
    const params = new URLSearchParams(search);
    const quoteId = params.get('quoteId');
    if (quoteId) {
      console.log(`[DEBUG] Found quoteId in URL params: ${quoteId}`);
      setSelectedQuoteId(quoteId);
    }
  }, [search]);
  
  // Use effect hook to refresh quotes data when this section is displayed
  useEffect(() => {
    console.log('[DEBUG] Quotes section wrapper mounted, refreshing quotes data');
    queryClient.invalidateQueries({ queryKey: ['/api/quotes/user'] });
  }, []);
  
  // Handler for going back to quotes list
  const handleBackToQuotes = () => {
    // Clear the selected quote ID
    setSelectedQuoteId(null);
    
    // Parse the current search parameters
    const currentParams = new URLSearchParams(search);
    
    // Remove the quoteId parameter while preserving other parameters
    currentParams.delete('quoteId');
    
    // Convert the parameters back to a search string
    const newSearch = currentParams.toString() ? `?${currentParams.toString()}` : '';
    
    // Construct the new URL
    const newUrl = window.location.pathname + newSearch;
    
    // Update the URL without triggering a navigation
    window.history.replaceState({}, '', newUrl);
    
    console.log('[DEBUG] Cleared quoteId from URL, returning to quotes list');
  };
  
  return (
    <div className="container mx-auto py-6 px-4">
      <h2 className="text-2xl font-bold mb-6">{t('portal.quotes.title', 'My Quotes')}</h2>
      <div className="bg-white rounded-lg shadow">
        <div className="p-6">
          {selectedQuoteId ? (
            // Show the quote detail component when a quote is selected
            <PatientQuoteDetail 
              quoteId={selectedQuoteId} 
              onBack={handleBackToQuotes} 
            />
          ) : (
            // Show the quotes list when no quote is selected
            <PatientQuotesContent />
          )}
        </div>
      </div>
    </div>
  );
};

// Quote Content Component (extracted for clarity)
const PatientQuotesContent = () => {
  const { t } = useTranslation();

  // For now, render the StandaloneQuotePage directly
  return (
    <div>
      <h3 className="text-xl font-bold mb-4">{t('portal.create_quote', 'Create a New Quote')}</h3>
      <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-6">
        <p className="text-gray-700 mb-4">
          {t('portal.quotes.intro_text', 'Create a personalized quote for your dental treatment needs. Our quote builder helps you estimate costs for various procedures.')}
        </p>
        <div className="flex items-center">
          <Button 
            className="flex items-center space-x-2"
            variant="default"
          >
            <FileText className="h-4 w-4" />
            <span>{t('portal.quotes.create_new', 'Create New Quote')}</span>
          </Button>
        </div>
      </div>
    </div>
  );
};

// Other section components (blank for now, just placeholder)
const MessagesSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.messages.title', 'Messages')}</h2>
    <p>Messages content coming soon...</p>
  </div>
);

const AppointmentsSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.appointments.title', 'Appointments')}</h2>
    <p>Appointments content coming soon...</p>
  </div>
);

const TreatmentPlansSection = ({ setActiveSection }: PatientPortalSectionProps) => {
  const { t } = useTranslation();
  const [search] = useSearch();
  
  // Parse treatmentPlanId from URL parameters if present
  const getTreatmentPlanId = () => {
    const params = new URLSearchParams(search);
    return params.get('treatmentPlanId');
  };
  
  const treatmentPlanId = getTreatmentPlanId();
  
  if (treatmentPlanId) {
    return (
      <div>
        <h2 className="text-2xl font-bold mb-6">
          {t('portal.treatment_plan_details', 'Treatment Plan Details')}
        </h2>
        <div className="bg-white rounded-lg shadow p-6">
          <p>
            {t('portal.treatment_plan_id', 'Treatment Plan ID')}: {treatmentPlanId}
          </p>
          <p className="mt-4">Detailed treatment plan information coming soon...</p>
          <Button
            className="mt-4"
            variant="outline"
            onClick={() => {
              // Remove the treatment plan ID from the URL
              const params = new URLSearchParams(search);
              params.delete('treatmentPlanId');
              const newSearch = params.toString() ? `?${params.toString()}` : '';
              window.history.replaceState({}, '', `${window.location.pathname}${newSearch}`);
              
              // Force a re-render
              window.location.reload();
            }}
          >
            {t('portal.back_to_treatment_plans', 'Back to Treatment Plans')}
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <div>
      <h2 className="text-2xl font-bold mb-6">{t('portal.treatment_plans.title', 'Treatment Plans')}</h2>
      <div className="bg-white rounded-lg shadow">
        <Tabs defaultValue="active" className="p-6">
          <TabsList className="mb-4">
            <TabsTrigger value="active">{t('portal.active_plans', 'Active Plans')}</TabsTrigger>
            <TabsTrigger value="completed">{t('portal.completed_plans', 'Completed')}</TabsTrigger>
            <TabsTrigger value="all">{t('portal.all_plans', 'All Plans')}</TabsTrigger>
          </TabsList>
          
          <TabsContent value="active">
            <div className="space-y-4">
              {/* Example treatment plan card */}
              <div className="border rounded-lg p-4 hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <h3 className="font-bold text-lg">Dental Implant & Crown</h3>
                <div className="flex justify-between items-center mt-2">
                  <div className="text-sm text-gray-600">
                    <p>Start Date: May 15, 2025</p>
                    <p>Status: In Progress</p>
                  </div>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      // Add the treatment plan ID to the URL
                      const params = new URLSearchParams(search);
                      params.set('treatmentPlanId', 'TP-12345');
                      const newSearch = `?${params.toString()}`;
                      window.history.replaceState({}, '', `${window.location.pathname}${newSearch}`);
                      
                      // Force a re-render
                      window.location.reload();
                    }}
                  >
                    View Details
                  </Button>
                </div>
              </div>
              
              <div className="border rounded-lg p-4 hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <h3 className="font-bold text-lg">Teeth Whitening</h3>
                <div className="flex justify-between items-center mt-2">
                  <div className="text-sm text-gray-600">
                    <p>Start Date: June 5, 2025</p>
                    <p>Status: Scheduled</p>
                  </div>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      // Add the treatment plan ID to the URL
                      const params = new URLSearchParams(search);
                      params.set('treatmentPlanId', 'TP-12346');
                      const newSearch = `?${params.toString()}`;
                      window.history.replaceState({}, '', `${window.location.pathname}${newSearch}`);
                      
                      // Force a re-render
                      window.location.reload();
                    }}
                  >
                    View Details
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="completed">
            <div className="space-y-4">
              <div className="border rounded-lg p-4 hover:border-blue-200 hover:bg-blue-50 transition-colors cursor-pointer">
                <h3 className="font-bold text-lg">Dental Cleaning</h3>
                <div className="flex justify-between items-center mt-2">
                  <div className="text-sm text-gray-600">
                    <p>Completed: April 10, 2025</p>
                    <p>Status: Completed</p>
                  </div>
                  <Button variant="outline">View Details</Button>
                </div>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="all">
            <p>All treatment plans will be displayed here...</p>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

const DentalRecordsSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.dental_records.title', 'Dental Records')}</h2>
    <p>Dental Records content coming soon...</p>
  </div>
);

const PaymentsSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.payments.title', 'Payments')}</h2>
    <p>Payments content coming soon...</p>
  </div>
);

const ClinicsSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.clinics.title', 'My Clinics')}</h2>
    <p>Clinics content coming soon...</p>
  </div>
);

const NotificationsSection = ({ setActiveSection }: PatientPortalSectionProps) => {
  const { t } = useTranslation();
  const { notifications, markAsRead, clearAll } = useNotifications();
  const [filter, setFilter] = useState<NotificationCategory | 'all'>('all');
  
  const filteredNotifications = filter === 'all' 
    ? notifications 
    : notifications.filter(n => n.category === filter);
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">{t('portal.notifications.title', 'Notifications')}</h2>
        
        <div className="flex items-center gap-2">
          <select 
            className="border rounded px-3 py-1.5 text-sm"
            value={filter}
            onChange={(e) => setFilter(e.target.value as NotificationCategory | 'all')}
          >
            <option value="all">{t('portal.all', 'All')}</option>
            <option value="appointment">{t('portal.appointments.title', 'Appointments')}</option>
            <option value="message">{t('portal.messages.title', 'Messages')}</option>
            <option value="payment">{t('portal.payments.title', 'Payments')}</option>
            <option value="treatment">{t('portal.treatments', 'Treatments')}</option>
            <option value="other">{t('portal.other', 'Other')}</option>
          </select>
          
          <Button variant="outline" size="sm" onClick={() => clearAll()}>
            {t('portal.mark_all_read', 'Mark All Read')}
          </Button>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow p-6">
        {filteredNotifications.length > 0 ? (
          <div className="space-y-4">
            {filteredNotifications.map(notification => (
              <div 
                key={notification.id} 
                className={`p-4 rounded-lg border ${notification.read ? 'bg-gray-50' : 'bg-blue-50 border-blue-200'}`}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-start">
                      <div className={`
                        shrink-0 rounded-full p-2 mr-3
                        ${notification.category === 'appointment' ? 'bg-indigo-100 text-indigo-600' : ''}
                        ${notification.category === 'message' ? 'bg-green-100 text-green-600' : ''}
                        ${notification.category === 'payment' ? 'bg-amber-100 text-amber-600' : ''}
                        ${notification.category === 'treatment' ? 'bg-violet-100 text-violet-600' : ''}
                        ${notification.category === 'other' ? 'bg-gray-100 text-gray-600' : ''}
                        ${notification.category === 'update' && notification.category === 'quote' ? 'bg-cyan-100 text-cyan-600' : ''}
                      `}>
                        {notification.category === 'appointment' && <CalendarRange className="h-4 w-4" />}
                        {notification.category === 'message' && <MessageSquare className="h-4 w-4" />}
                        {notification.category === 'payment' && <Receipt className="h-4 w-4" />}
                        {notification.category === 'treatment' && <FileClock className="h-4 w-4" />}
                        {notification.category === 'other' && <Bell className="h-4 w-4" />}
                        {notification.category === 'update' && <Bell className="h-4 w-4" />}
                      </div>
                      <div>
                        <h3 className="font-medium">{notification.title}</h3>
                        <p className="text-sm text-gray-600 mt-1">{notification.message}</p>
                        
                        <div className="flex items-center mt-3 space-x-3">
                          {notification.link && (
                            <a 
                              href={notification.link} 
                              className="text-sm font-medium text-blue-600 hover:text-blue-700"
                            >
                              {notification.linkText || t('portal.view_details', 'View Details')}
                            </a>
                          )}
                          
                          {!notification.read && (
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={() => markAsRead(notification.id)}
                            >
                              {t('portal.mark_read', 'Mark as Read')}
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  <span className="text-xs text-gray-500 ml-4">
                    {new Date(notification.date).toLocaleString(undefined, { 
                      hour: 'numeric', 
                      minute: 'numeric',
                      day: 'numeric',
                      month: 'short'
                    })}
                  </span>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-10">
            <Bell className="h-12 w-12 mx-auto text-gray-300 mb-4" />
            <h3 className="text-lg font-medium text-gray-600 mb-1">
              {t('portal.no_notifications', 'No Notifications')}
            </h3>
            <p className="text-gray-500">
              {filter === 'all' 
                ? t('portal.all_notifications_read', 'You have no notifications at this time.') 
                : t('portal.filtered_notifications_empty', 'No notifications in this category.')}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const SettingsSection = ({ setActiveSection }: PatientPortalSectionProps) => (
  <div>
    <h2 className="text-2xl font-bold mb-6">{t('portal.settings.title', 'Settings')}</h2>
    <p>Settings content coming soon...</p>
  </div>
);

const ProfileSection = ({ setActiveSection }: PatientPortalSectionProps) => {
  const { t } = useTranslation();
  const { user } = useAuth();
  
  return (
    <div>
      <h2 className="text-2xl font-bold mb-6">{t('portal.profile.title', 'My Profile')}</h2>
      
      <Card>
        <CardHeader>
          <div className="flex items-center">
            <Avatar className="h-16 w-16 mr-4">
              <AvatarImage src={user?.profileImage} />
              <AvatarFallback className="text-lg">
                {user?.firstName?.[0]}{user?.lastName?.[0]}
              </AvatarFallback>
            </Avatar>
            <div>
              <CardTitle>{user?.firstName} {user?.lastName}</CardTitle>
              <CardDescription>{user?.email}</CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-medium">{t('portal.personal_information', 'Personal Information')}</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-3">
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    {t('portal.first_name', 'First Name')}
                  </label>
                  <input 
                    type="text" 
                    className="border rounded-md p-2 w-full" 
                    defaultValue={user?.firstName || ''}
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    {t('portal.last_name', 'Last Name')}
                  </label>
                  <input 
                    type="text" 
                    className="border rounded-md p-2 w-full" 
                    defaultValue={user?.lastName || ''}
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    {t('portal.email', 'Email')}
                  </label>
                  <input 
                    type="email" 
                    className="border rounded-md p-2 w-full" 
                    defaultValue={user?.email || ''}
                    readOnly
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-1">
                    {t('portal.phone', 'Phone')}
                  </label>
                  <input 
                    type="tel" 
                    className="border rounded-md p-2 w-full" 
                    defaultValue={user?.phone || ''}
                    readOnly
                  />
                </div>
              </div>
            </div>
            
            <div>
              <h3 className="text-lg font-medium">{t('portal.account_settings', 'Account Settings')}</h3>
              <div className="mt-3 space-y-4">
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">{t('portal.change_password', 'Change Password')}</h4>
                    <p className="text-sm text-gray-500">
                      {t('portal.password_last_changed', 'Last changed 30 days ago')}
                    </p>
                  </div>
                  <Button variant="outline">
                    {t('portal.change_password', 'Change Password')}
                  </Button>
                </div>
                
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">{t('portal.notifications_preferences', 'Notification Preferences')}</h4>
                    <p className="text-sm text-gray-500">
                      {t('portal.manage_notifications', 'Manage how you receive notifications')}
                    </p>
                  </div>
                  <Button variant="outline">
                    {t('portal.manage', 'Manage')}
                  </Button>
                </div>
                
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">{t('portal.language_preferences', 'Language Preferences')}</h4>
                    <p className="text-sm text-gray-500">
                      {t('portal.current_language', 'Current: English')}
                    </p>
                  </div>
                  <Button variant="outline">
                    {t('portal.change', 'Change')}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
        <CardFooter className="flex justify-end border-t pt-6">
          <Button>
            {t('portal.save_changes', 'Save Changes')}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default PatientPortalPage;