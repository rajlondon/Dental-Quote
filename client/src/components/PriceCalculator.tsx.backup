import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { 
  TreatmentPrice, 
  initializePrices, 
  getAllTreatments,
  calculateTotal,
  getTreatmentByName
} from '@/services/pricingService';
import PdfGenerator from './PdfGenerator';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { getCities, getCitiesGroupedByCountry, months, getDefaultFlightEstimate } from '@/services/flightEstimatesService';

// Function to format treatment names to be more user-friendly
const formatTreatmentName = (name: string): string => {
  return name
    .replace(/(\w)([A-Z])/g, '$1 $2') // Add space between camelCase words
    .replace(/_/g, ' ') // Replace underscores with spaces
    .replace(/-/g, ' - ') // Add spaces around hyphens
    .split(' ')
    .map(word => 
      word.charAt(0).toUpperCase() + word.slice(1).toLowerCase() // Capitalize first letter of each word
    )
    .join(' ');
};

const formSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string()
    .min(7, 'Please enter a valid phone number')
    .refine((val) => /^[+]?[0-9\s-()]+$/.test(val), {
      message: 'Please enter a valid phone number format',
    }),
  travelMonth: z.string().optional(),
  departureCity: z.string().optional(),
  treatments: z.array(
    z.object({
      treatment: z.string().min(1, 'Please select a treatment'),
      quantity: z.coerce.number().int().min(1, 'Quantity must be at least 1'),
    })
  ).min(1, 'Please add at least one treatment'),
});

type FormValues = z.infer<typeof formSchema>;

export default function PriceCalculator() {
  const { t } = useTranslation();
  const { toast } = useToast();
  const [treatments, setTreatments] = useState<TreatmentPrice[]>([]);
  const [loading, setLoading] = useState(true);
  const [quote, setQuote] = useState<ReturnType<typeof calculateTotal> | null>(null);
  
  // Initialize the form with default values
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
      phone: '',
      travelMonth: '',
      departureCity: '',
      treatments: [{ treatment: '', quantity: 1 }],
    },
  });
  
  // Load treatments from CSV when component mounts
  useEffect(() => {
    const loadTreatments = async () => {
      try {
        await initializePrices();
        setTreatments(getAllTreatments());
        setLoading(false);
      } catch (error) {
        console.error('Failed to load treatments:', error);
        toast({
          title: 'Error',
          description: 'Failed to load treatment data. Please try again later.',
          variant: 'destructive',
        });
        setLoading(false);
      }
    };
    
    loadTreatments();
  }, [toast]);
  
  // Function to add a new treatment field
  const addTreatment = () => {
    const currentTreatments = form.getValues('treatments');
    form.setValue('treatments', [...currentTreatments, { treatment: '', quantity: 1 }]);
  };
  
  // Function to remove a treatment field
  const removeTreatment = (index: number) => {
    const currentTreatments = form.getValues('treatments');
    if (currentTreatments.length > 1) {
      form.setValue(
        'treatments',
        currentTreatments.filter((_, i) => i !== index)
      );
    }
  };
  
  // State to store the currently selected treatment for displaying details
  const [selectedTreatment, setSelectedTreatment] = useState<TreatmentPrice | null>(null);
  
  // Function to show treatment details
  const showTreatmentDetails = (treatmentName: string) => {
    const treatment = getTreatmentByName(treatmentName);
    setSelectedTreatment(treatment || null);
  };
  
  // Handle form submission
  const onSubmit = (data: FormValues) => {
    // Calculate the total prices
    const quoteResult = calculateTotal(data.treatments);
    
    // Store the quote data with user information in state
    setQuote(quoteResult);
    
    // Pass the extra data to the PDF generator when needed
    // This avoids modifying the original quoteResult which has its own type
    const patientData = {
      patientName: data.name,
      patientEmail: data.email,
      patientPhone: data.phone
    };
    
    // Record the submission for personalized follow-up
    try {
      // Store quote data in localStorage for potential follow-up
      localStorage.setItem('lastQuoteData', JSON.stringify({
        timestamp: new Date().toISOString(),
        ...patientData,
        treatments: data.treatments,
        travelMonth: data.travelMonth,
        departureCity: data.departureCity,
        totalGBP: quoteResult.totalGBP,
        totalUSD: quoteResult.totalUSD
      }));
    } catch (error) {
      console.error('Failed to save quote data for follow-up:', error);
    }
    
    toast({
      title: 'Quote Generated',
      description: 'Your quote has been calculated successfully.',
    });
  };
  
  return (
    <section className="py-16 bg-gradient-to-b from-neutral-50 to-white price-calculator-section">
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-10">
            <h2 className="text-4xl md:text-5xl font-bold mb-4 text-primary relative inline-block">
              {t('pricing.calculate_price')}
              <span className="absolute -top-4 -right-12 bg-secondary/20 text-secondary-foreground text-xs px-2 py-1 rounded-full rotate-3">
                FREE
              </span>
            </h2>
            <p className="text-lg text-neutral-600 max-w-3xl mx-auto">
              Calculate the exact cost of your dental treatment in Istanbul and receive a detailed quote that you can download instantly.
            </p>
          </div>
          
          {loading ? (
            <div className="flex justify-center items-center min-h-[300px]">
              <div className="flex flex-col items-center">
                <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary mb-4"></div>
                <p className="text-neutral-600">Loading treatment options...</p>
              </div>
            </div>
          ) : (
            <div className="relative">
              {/* Add a highlight effect around the form */}
              <div className="absolute -inset-4 bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 rounded-xl blur-lg -z-10 animate-pulse"></div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 bg-white rounded-xl shadow-lg p-6 md:p-8 border border-neutral-200">
                <div>
                  <div className="mb-6">
                    <h3 className="text-2xl font-bold text-primary mb-2">{t('pricing.treatment_selection')}</h3>
                    <p className="text-neutral-600">{t('pricing.select_treatments_description')}</p>
                  </div>
                  
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                      <div className="space-y-4">
                        <div className="bg-primary/5 p-4 rounded-lg">
                          <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-semibold text-primary">{t('pricing.treatments')}</h3>
                            <Button 
                              type="button" 
                              variant="outline" 
                              size="sm"
                              className="bg-white border-primary text-primary hover:bg-primary hover:text-white"
                              onClick={addTreatment}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                              </svg>
                              {t('pricing.add_treatment')}
                            </Button>
                          </div>
                          
                          {form.watch('treatments').map((_, index) => (
                            <div key={index} className="flex gap-4 items-start bg-white p-3 rounded-lg mb-3 border border-neutral-200 shadow-sm">
                              <div className="flex-1">
                                <FormField
                                  control={form.control}
                                  name={`treatments.${index}.treatment`}
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel className="text-neutral-700">{t('pricing.treatment_type')}</FormLabel>
                                      <Select
                                        onValueChange={(value) => {
                                          field.onChange(value);
                                          showTreatmentDetails(value);
                                        }}
                                        defaultValue={field.value}
                                      >
                                        <FormControl>
                                          <SelectTrigger className="bg-white">
                                            <SelectValue placeholder={t('pricing.select_treatment')} />
                                          </SelectTrigger>
                                        </FormControl>
                                        <SelectContent>
                                          {treatments
                                            .filter(treatment => treatment.treatment && treatment.treatment.trim() !== '')
                                            .map((treatment, idx) => (
                                              <SelectItem key={idx} value={treatment.treatment}>
                                                {formatTreatmentName(treatment.treatment)}
                                              </SelectItem>
                                            ))}
                                        </SelectContent>
                                      </Select>
                                      
                                      {/* Show info button if a treatment is selected */}
                                      {field.value && (
                                        <div className="mt-1">
                                          <Popover>
                                            <PopoverTrigger asChild>
                                              <Button 
                                                variant="outline" 
                                                size="sm" 
                                                className="text-xs px-2 py-1 h-auto mt-1 text-primary border-primary/30 hover:bg-primary/5"
                                              >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                                Treatment Details
                                              </Button>
                                            </PopoverTrigger>
                                            <PopoverContent className="w-80 p-0">
                                              {(() => {
                                                const treatmentDetails = getTreatmentByName(field.value);
                                                if (!treatmentDetails) return null;
                                                
                                                return (
                                                  <div className="p-4 space-y-3">
                                                    <h4 className="font-semibold text-primary text-lg">
                                                      {formatTreatmentName(treatmentDetails.treatment)}
                                                    </h4>
                                                    
                                                    {treatmentDetails.description && (
                                                      <p className="text-sm text-neutral-600">
                                                        {treatmentDetails.description}
                                                      </p>
                                                    )}
                                                    
                                                    {treatmentDetails.benefits && treatmentDetails.benefits.length > 0 && (
                                                      <div className="space-y-1">
                                                        <h5 className="text-sm font-medium text-primary">Benefits:</h5>
                                                        <ul className="text-xs text-neutral-600 space-y-1 pl-5 list-disc">
                                                          {treatmentDetails.benefits.map((benefit, idx) => (
                                                            <li key={idx}>{benefit}</li>
                                                          ))}
                                                        </ul>
                                                      </div>
                                                    )}
                                                    
                                                    <div className="grid grid-cols-2 gap-2 text-xs">
                                                      {treatmentDetails.duration && (
                                                        <div>
                                                          <span className="font-semibold text-primary">Treatment time:</span>
                                                          <p className="text-neutral-600">{treatmentDetails.duration}</p>
                                                        </div>
                                                      )}
                                                      
                                                      {treatmentDetails.recovery && (
                                                        <div>
                                                          <span className="font-semibold text-primary">Recovery:</span>
                                                          <p className="text-neutral-600">{treatmentDetails.recovery}</p>
                                                        </div>
                                                      )}
                                                    </div>
                                                    
                                                    <div className="mt-3 grid grid-cols-2 gap-2 text-xs bg-primary/5 p-2 rounded">
                                                      <div>
                                                        <span className="font-semibold text-primary">Price:</span>
                                                        <p className="text-neutral-600">£{treatmentDetails.priceGBP.toLocaleString()} / ${treatmentDetails.priceUSD.toLocaleString()}</p>
                                                      </div>
                                                      
                                                      <div>
                                                        <span className="font-semibold text-primary">Guarantee:</span>
                                                        <p className="text-neutral-600">{treatmentDetails.guarantee}</p>
                                                      </div>
                                                    </div>
                                                  </div>
                                                );
                                              })()}
                                            </PopoverContent>
                                          </Popover>
                                        </div>
                                      )}
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              
                              <div className="w-24">
                                <FormField
                                  control={form.control}
                                  name={`treatments.${index}.quantity`}
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel className="text-neutral-700">{t('pricing.quantity')}</FormLabel>
                                      <FormControl>
                                        <Input
                                          type="number"
                                          min="1"
                                          className="bg-white"
                                          {...field}
                                        />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>
                              
                              <div className="pt-8">
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="icon"
                                  className="text-neutral-400 hover:text-red-500 hover:bg-red-50"
                                  onClick={() => removeTreatment(index)}
                                  disabled={form.watch('treatments').length <= 1}
                                >
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    strokeWidth="2"
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    className="h-4 w-4"
                                  >
                                    <path d="M3 6h18"></path>
                                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                  </svg>
                                </Button>
                              </div>
                            </div>
                          ))}
                        </div>
                        
                        <div className="space-y-4">
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <FormField
                              control={form.control}
                              name="name"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>{t('common.name')}</FormLabel>
                                  <FormControl>
                                    <Input placeholder={t('common.enter_name')} {...field} className="bg-white" />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                            
                            <FormField
                              control={form.control}
                              name="email"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>{t('common.email')}</FormLabel>
                                  <FormControl>
                                    <Input placeholder={t('common.enter_email')} {...field} className="bg-white" />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>
                          
                          <FormField
                            control={form.control}
                            name="phone"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>{t('common.phone_number')} <span className="text-red-500">*</span></FormLabel>
                                <FormControl>
                                  <Input 
                                    type="tel" 
                                    placeholder={t('common.phone_placeholder')} 
                                    {...field} 
                                    className="bg-white"
                                  />
                                </FormControl>
                                <p className="text-xs text-neutral-500 mt-1">
                                  {t('common.phone_help_text')}
                                </p>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          
                          {/* Travel information section */}
                          <div className="mt-6 bg-primary/5 p-4 rounded-lg">
                            <h3 className="text-lg font-semibold text-primary mb-4">Travel Information</h3>
                            <p className="text-sm text-neutral-600 mb-4">
                              Help us provide flight cost estimates by telling us when you plan to travel.
                            </p>
                            
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                              <FormField
                                control={form.control}
                                name="travelMonth"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Month of Travel</FormLabel>
                                    <Select
                                      onValueChange={field.onChange}
                                      defaultValue={field.value}
                                    >
                                      <FormControl>
                                        <SelectTrigger className="bg-white">
                                          <SelectValue placeholder="Select travel month" />
                                        </SelectTrigger>
                                      </FormControl>
                                      <SelectContent>
                                        {months.map((month) => (
                                          <SelectItem key={month} value={month}>
                                            {month}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                              
                              <FormField
                                control={form.control}
                                name="departureCity"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Departure City</FormLabel>
                                    <Select
                                      onValueChange={field.onChange}
                                      defaultValue={field.value}
                                    >
                                      <FormControl>
                                        <SelectTrigger className="bg-white">
                                          <SelectValue placeholder="Where will you fly from?" />
                                        </SelectTrigger>
                                      </FormControl>
                                      <SelectContent className="max-h-[300px]">
                                        {getCitiesGroupedByCountry().map((countryGroup) => (
                                          <div key={countryGroup.country}>
                                            <div className="px-2 py-1.5 text-sm font-semibold text-primary bg-primary/5">
                                              {countryGroup.country}
                                            </div>
                                            {countryGroup.cities.map((city) => (
                                              <SelectItem key={`${countryGroup.country}-${city}`} value={city}>
                                                {city}
                                              </SelectItem>
                                            ))}
                                            <div className="py-1"></div>
                                          </div>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                    <p className="text-xs text-neutral-500 mt-1">
                                      This helps us estimate your flight costs to Istanbul.
                                    </p>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <Button 
                        type="submit" 
                        className="w-full bg-primary hover:bg-primary/90 text-white py-6 text-lg font-semibold shadow-lg relative overflow-hidden group"
                      >
                        <span className="absolute inset-0 w-0 bg-white/10 transition-all duration-500 ease-out group-hover:w-full"></span>
                        <span className="relative flex items-center justify-center gap-2">
                          {t('pricing.calculate_quote')}
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </span>
                      </Button>
                    </form>
                  </Form>
                </div>
                
                <div className="bg-neutral-50 rounded-xl p-6 border border-neutral-200">
                  <h3 className="text-2xl font-bold text-primary mb-4">{t('pricing.quote_summary')}</h3>
                  
                  {quote ? (
                    <div className="space-y-4">
                      <div className="border rounded-lg overflow-hidden bg-white">
                        <table className="w-full">
                          <thead className="bg-primary/10">
                            <tr>
                              <th className="px-4 py-3 text-left font-medium text-primary">{t('pricing.treatment')}</th>
                              <th className="px-4 py-3 text-right font-medium text-primary">{t('pricing.price')}</th>
                              <th className="px-4 py-3 text-right font-medium text-primary">{t('pricing.qty')}</th>
                              <th className="px-4 py-3 text-right font-medium text-primary">{t('pricing.subtotal')}</th>
                            </tr>
                          </thead>
                          <tbody>
                            {quote.items.map((item, idx) => (
                              <tr key={idx} className="border-t">
                                <td className="px-4 py-3">
                                  <div className="font-medium">{formatTreatmentName(item.treatment)}</div>
                                  <div className="text-xs text-neutral-500">
                                    {item.guarantee !== 'N/A' && `${t('pricing.guarantee')}: ${item.guarantee}`}
                                  </div>
                                </td>
                                <td className="px-4 py-3 text-right">
                                  <div className="font-medium">£{item.priceGBP.toLocaleString()}</div>
                                  <div className="text-xs text-neutral-500">
                                    ${item.priceUSD.toLocaleString()}
                                  </div>
                                </td>
                                <td className="px-4 py-3 text-right">{item.quantity}</td>
                                <td className="px-4 py-3 text-right">
                                  <div className="font-medium">£{item.subtotalGBP.toLocaleString()}</div>
                                  <div className="text-xs text-neutral-500">
                                    ${item.subtotalUSD.toLocaleString()}
                                  </div>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                      
                      <div className="flex justify-between pt-4 font-bold text-xl">
                        <div className="text-primary">{t('pricing.total')}</div>
                        <div>
                          <div className="text-primary">£{quote.totalGBP.toLocaleString()}</div>
                          <div className="text-sm text-neutral-500">
                            ${quote.totalUSD.toLocaleString()}
                          </div>
                        </div>
                      </div>
                      
                      <Separator className="my-4" />
                      
                      <div className="text-sm text-neutral-500 bg-white p-3 rounded-lg border border-neutral-200">
                        <div className="flex items-start mb-2">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-primary mr-2 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <p>{t('pricing.quote_validity_note')}</p>
                        </div>
                        
                        <div className="flex items-start">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-primary mr-2 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                          </svg>
                          <p>{t('pricing.all_treatments_include')}</p>
                        </div>
                      </div>
                      
                      {/* Simple testimonial section */}
                      <div className="bg-blue-50 border border-blue-100 rounded-lg p-4 my-4">
                        <h4 className="text-lg font-semibold text-blue-800 mb-3">What our patients say:</h4>
                        <div className="bg-white p-3 rounded shadow-sm">
                          <p className="text-sm text-neutral-600 italic">"I saved over £4,000 on my dental work in Istanbul compared to UK prices. The quality was excellent!"</p>
                          <p className="text-xs mt-2 text-neutral-500">- James T., Veneers & Whitening</p>
                        </div>
                      </div>

                      <div className="mt-6 space-y-4">
                        <PdfGenerator
                          items={quote.items}
                          totalGBP={quote.totalGBP}
                          totalUSD={quote.totalUSD}
                          patientName={form.getValues('name')}
                          patientEmail={form.getValues('email')}
                          patientPhone={form.getValues('phone')}
                          travelMonth={form.getValues('travelMonth')}
                          departureCity={form.getValues('departureCity')}
                          clinics={[
                            {
                              name: 'Istanbul Dental Center',
                              priceGBP: Math.round(quote.totalGBP * 0.95), // 5% discount
                              extras: 'Hotel + Airport Transfer'
                            },
                            {
                              name: 'Vera Smile Clinic',
                              priceGBP: Math.round(quote.totalGBP * 0.9), // 10% discount
                              extras: 'Airport Transfer Only'
                            },
                            {
                              name: 'Premium Dental Turkey',
                              priceGBP: Math.round(quote.totalGBP * 0.92), // 8% discount
                              extras: 'Hotel + Translator'
                            }
                          ]}
                        />
                        
                        {/* HTML Quote Template Button */}
                        <button 
                          onClick={() => {
                            // Generate a unique quote number
                            const today = new Date();
                            const formattedDate = today.toLocaleDateString('en-GB', {
                              day: '2-digit',
                              month: '2-digit',
                              year: 'numeric'
                            });
                            const quoteId = `IDS-${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}-${form.getValues('name')?.substring(0, 2).toUpperCase() || 'XX'}${Math.floor(Math.random() * 100).toString().padStart(2, '0')}`;
                            
                            // Prepare the treatments data
                            const treatmentsData = quote.items.map(item => ({
                              treatment: item.treatment,
                              priceGBP: item.priceGBP,
                              priceUSD: item.priceUSD,
                              quantity: item.quantity,
                              guarantee: item.guarantee
                            }));
                            
                            // Prepare the clinics data
                            const clinicsData = [
                              {
                                name: 'Istanbul Dental Center',
                                priceGBP: Math.round(quote.totalGBP * 0.95), // 5% discount
                                extras: 'Hotel + Transfer'
                              },
                              {
                                name: 'Vera Smile Clinic',
                                priceGBP: Math.round(quote.totalGBP * 0.9), // 10% discount
                                extras: 'Airport Transfer Only'
                              },
                              {
                                name: 'Premium Dental Turkey',
                                priceGBP: Math.round(quote.totalGBP * 0.92), // 8% discount
                                extras: 'Hotel + Translator'
                              }
                            ];
                            
                            // Build the URL with the quote data
                            const queryParams = new URLSearchParams({
                              name: form.getValues('name') || '',
                              email: form.getValues('email') || '',
                              phone: form.getValues('phone') || '',
                              quoteId,
                              date: formattedDate,
                              totalGBP: quote.totalGBP.toString(),
                              totalUSD: quote.totalUSD.toString(),
                              treatments: JSON.stringify(treatmentsData),
                              clinics: JSON.stringify(clinicsData)
                            });
                            
                            // Add travel info if available
                            const travelMonth = form.getValues('travelMonth');
                            const departureCity = form.getValues('departureCity');
                            if (travelMonth && departureCity) {
                              const flightEstimate = getDefaultFlightEstimate(travelMonth) || 250;
                              queryParams.append('travelMonth', travelMonth);
                              queryParams.append('departureCity', departureCity);
                              queryParams.append('flightCost', flightEstimate.toString());
                            }
                            
                            // Open the HTML quote template in a new tab
                            window.open(`/quote-template.html?${queryParams.toString()}`, '_blank');
                          }}
                          className="w-full bg-white hover:bg-gray-100 text-primary border border-primary px-6 py-4 rounded-lg shadow-sm flex items-center justify-center gap-2 font-medium transition-all duration-300"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                          </svg>
                          View HTML Quote (Better Icon Display)
                        </button>
                      </div>
                  ) : (
                    <div className="min-h-[350px] flex flex-col items-center justify-center text-center text-neutral-500 bg-white rounded-lg border border-neutral-200 p-6">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="h-16 w-16 mb-6 text-primary/30"
                      >
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                        <line x1="16" y1="13" x2="8" y2="13"></line>
                        <line x1="16" y1="17" x2="8" y2="17"></line>
                        <polyline points="10 9 9 9 8 9"></polyline>
                      </svg>
                      <h4 className="text-xl font-semibold mb-2 text-primary">{t('pricing.no_quote_generated')}</h4>
                      <p className="mb-4">{t('pricing.select_treatments_to_generate')}</p>
                      <div className="text-sm p-3 bg-primary/5 rounded-lg max-w-md">
                        <p className="font-medium text-primary mb-2">{t('pricing.how_it_works')}:</p>
                        <ol className="text-left space-y-2">
                          <li className="flex">
                            <span className="bg-primary text-white w-5 h-5 rounded-full flex items-center justify-center text-xs mr-2 flex-shrink-0 mt-0.5">1</span>
                            <span>{t('pricing.step_select_treatments')}</span>
                          </li>
                          <li className="flex">
                            <span className="bg-primary text-white w-5 h-5 rounded-full flex items-center justify-center text-xs mr-2 flex-shrink-0 mt-0.5">2</span>
                            <span>{t('pricing.step_enter_details')}</span>
                          </li>
                          <li className="flex">
                            <span className="bg-primary text-white w-5 h-5 rounded-full flex items-center justify-center text-xs mr-2 flex-shrink-0 mt-0.5">3</span>
                            <span>{t('pricing.step_calculate_quote')}</span>
                          </li>
                        </ol>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
          
          <div className="mt-12 text-center">
            <p className="text-lg font-medium text-primary mb-4">{t('pricing.why_choose_istanbul')}</p>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-white p-4 rounded-lg shadow-sm border border-neutral-200">
                <div className="text-3xl text-primary mb-2">70%</div>
                <p className="text-sm text-neutral-600">{t('pricing.benefit_savings')}</p>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border border-neutral-200">
                <div className="text-3xl text-primary mb-2">5★</div>
                <p className="text-sm text-neutral-600">{t('pricing.benefit_quality')}</p>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border border-neutral-200">
                <div className="text-3xl text-primary mb-2">24/7</div>
                <p className="text-sm text-neutral-600">{t('pricing.benefit_support')}</p>
              </div>
              <div className="bg-white p-4 rounded-lg shadow-sm border border-neutral-200">
                <div className="text-3xl text-primary mb-2">100%</div>
                <p className="text-sm text-neutral-600">{t('pricing.benefit_guarantee')}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}