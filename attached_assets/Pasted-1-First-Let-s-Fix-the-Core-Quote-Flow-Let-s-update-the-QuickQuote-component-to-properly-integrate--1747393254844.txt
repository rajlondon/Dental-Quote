1. First, Let's Fix the Core Quote Flow
Let's update the QuickQuote component to properly integrate with the rest of the application:

// client/src/pages/QuickQuote.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { MainNavigation } from '../components/layout/MainNavigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { toast } from '@/components/ui/use-toast';
import { quoteService } from '../services/quote-service';
import { emailService } from '../services/email-service';

// Define types
interface Treatment {
  id: string;
  name: string;
  description: string;
  price: number;
}

interface QuoteState {
  treatments: Treatment[];
  promoCode: string | null;
  discount: number;
  subtotal: number;
  total: number;
}

export default function QuickQuote() {
  const navigate = useNavigate();
  
  // Available treatments
  const availableTreatments: Treatment[] = [
    { id: 'clean', name: 'Dental Cleaning', description: 'Professional teeth cleaning', price: 100 },
    { id: 'whitening', name: 'Teeth Whitening', description: 'Professional whitening treatment', price: 250 },
    { id: 'filling', name: 'Dental Filling', description: 'Composite filling for cavities', price: 150 },
    { id: 'root', name: 'Root Canal', description: 'Root canal therapy', price: 800 },
    { id: 'crown', name: 'Dental Crown', description: 'Porcelain crown', price: 1200 },
    { id: 'implant', name: 'Dental Implant', description: 'Titanium implant with crown', price: 2500 },
  ];
  
  // Promo codes
  const promoCodes = {
    'DENTAL10': { type: 'percentage', value: 10 },
    'SMILE20': { type: 'percentage', value: 20 },
    'DISCOUNT30': { type: 'percentage', value: 30 },
    'NEWSMILE': { type: 'fixed', value: 100 },
  };
  
  // State
  const [quote, setQuote] = useState<QuoteState>({
    treatments: [],
    promoCode: null,
    discount: 0,
    subtotal: 0,
    total: 0
  });
  
  const [promoInput, setPromoInput] = useState('');
  const [showPatientForm, setShowPatientForm] = useState(false);
  const [patientInfo, setPatientInfo] = useState({ name: '', email: '', phone: '' });
  const [isSaving, setIsSaving] = useState(false);
  const [isSendingEmail, setIsSendingEmail] = useState(false);
  
  // Calculate totals whenever treatments or promo code changes
  useEffect(() => {
    const subtotal = quote.treatments.reduce((sum, t) => sum + t.price, 0);
    let discount = 0;
    
    if (quote.promoCode && promoCodes[quote.promoCode]) {
      const promoDetails = promoCodes[quote.promoCode];
      if (promoDetails.type === 'percentage') {
        discount = subtotal * (promoDetails.value / 100);
      } else {
        discount = promoDetails.value;
      }
    }
    
    const total = Math.max(0, subtotal - discount);
    
    setQuote(prev => ({
      ...prev,
      subtotal,
      discount,
      total
    }));
  }, [quote.treatments, quote.promoCode]);
  
  // Toggle treatment selection
  const toggleTreatment = (treatment: Treatment) => {
    setQuote(prev => {
      const exists = prev.treatments.find(t => t.id === treatment.id);
      
      if (exists) {
        // Remove treatment
        return {
          ...prev,
          treatments: prev.treatments.filter(t => t.id !== treatment.id)
        };
      } else {
        // Add treatment
        return {
          ...prev,
          treatments: [...prev.treatments, treatment]
        };
      }
    });
  };
  
  // Apply promo code
  const applyPromoCode = () => {
    const code = promoInput.trim().toUpperCase();
    
    if (!code) {
      toast({
        title: 'Error',
        description: 'Please enter a promo code',
        variant: 'destructive',
      });
      return;
    }
    
    if (!promoCodes[code]) {
      toast({
        title: 'Invalid Code',
        description: 'The promo code you entered is not valid',
        variant: 'destructive',
      });
      return;
    }
    
    setQuote(prev => ({
      ...prev,
      promoCode: code
    }));
    
    setPromoInput('');
    
    toast({
      title: 'Promo Code Applied',
      description: `${code} has been applied to your quote`,
    });
  };
  
  // Remove promo code
  const removePromoCode = () => {
    setQuote(prev => ({
      ...prev,
      promoCode: null
    }));
    
    toast({
      title: 'Promo Code Removed',
      description: 'The promo code has been removed from your quote',
    });
  };
  
  // Reset quote
  const resetQuote = () => {
    setQuote({
      treatments: [],
      promoCode: null,
      discount: 0,
      subtotal: 0,
      total: 0
    });
    
    setPromoInput('');
    
    toast({
      title: 'Quote Reset',
      description: 'Your quote has been reset',
    });
  };
  
  // Save quote
  const handleSaveQuote = async () => {
    if (quote.treatments.length === 0) {
      toast({
        title: 'No Treatments Selected',
        description: 'Please select at least one treatment',
        variant: 'destructive',
      });
      return;
    }
    
    if (!patientInfo.name || !patientInfo.email) {
      setShowPatientForm(true);
      return;
    }
    
    setIsSaving(true);
    
    try {
      const savedQuote = quoteService.saveQuote({
        patientName: patientInfo.name,
        patientEmail: patientInfo.email,
        patientPhone: patientInfo.phone,
        treatments: quote.treatments,
        selectedPackage: null,
        appliedOffer: null,
        promoCode: quote.promoCode,
        subtotal: quote.subtotal,
        savings: quote.discount,
        total: quote.total
      });
      
      toast({
        title: 'Quote Saved',
        description: 'Your quote has been saved successfully',
      });
      
      // Navigate to quote detail
      navigate(`/quotes/${savedQuote.id}`);
    } catch (error) {
      console.error('Error saving quote:', error);
      toast({
        title: 'Save Failed',
        description: 'There was an error saving your quote',
        variant: 'destructive',
      });
    } finally {
      setIsSaving(false);
    }
  };
  
  // Send quote via email
  const handleSendEmail = async () => {
    if (quote.treatments.length === 0) {
      toast({
        title: 'No Treatments Selected',
        description: 'Please select at least one treatment',
        variant: 'destructive',
      });
      return;
    }
    
    if (!patientInfo.name || !patientInfo.email) {
      setShowPatientForm(true);
      return;
    }
    
    setIsSendingEmail(true);
    
    try {
      // First save the quote if not already saved
      const savedQuote = quoteService.saveQuote({
        patientName: patientInfo.name,
        patientEmail: patientInfo.email,
        patientPhone: patientInfo.phone,
        treatments: quote.treatments,
        selectedPackage: null,
        appliedOffer: null,
        promoCode: quote.promoCode,
        subtotal: quote.subtotal,
        savings: quote.discount,
        total: quote.total
      });
      
      // Send the email
      await emailService.sendQuoteEmail(savedQuote);
      
      // Start email sequence
      await emailService.startEmailSequence(savedQuote);
      
      toast({
        title: 'Email Sent',
        description: `Quote has been emailed to ${patientInfo.email}`,
      });
      
      // Navigate to quote detail
      navigate(`/quotes/${savedQuote.id}`);
    } catch (error) {
      console.error('Error sending email:', error);
      toast({
        title: 'Email Failed',
        description: 'There was an error sending the email',
        variant: 'destructive',
      });
    } finally {
      setIsSendingEmail(false);
    }
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Quick Dental Quote</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left column - Treatments */}
          <div>
            <h2 className="text-xl font-semibold mb-4">Available Treatments</h2>
            <div className="space-y-4 mb-6">
              {availableTreatments.map(treatment => (
                <Card key={treatment.id} className={`cursor-pointer transition-colors ${
                  quote.treatments.some(t => t.id === treatment.id) 
                    ? 'border-blue-500 bg-blue-50' 
                    : 'hover:border-gray-300'
                }`} onClick={() => toggleTreatment(treatment)}>
                  <CardContent className="p-4 flex justify-between items-center">
                    <div>
                      <h3 className="font-medium">{treatment.name}</h3>
                      <p className="text-sm text-gray-500">{treatment.description}</p>
                    </div>
                    <div className="text-lg font-semibold">£{treatment.price.toFixed(2)}</div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            <div className="bg-gray-100 p-4 rounded-lg mb-6">
              <h2 className="text-lg font-semibold mb-2">Promo Code</h2>
              <div className="flex gap-2">
                <Input 
                  value={promoInput} 
                  onChange={e => setPromoInput(e.target.value)} 
                  placeholder="Enter promo code"
                />
                <Button onClick={applyPromoCode}>Apply</Button>
              </div>
              {quote.promoCode && (
                <div className="mt-2 flex justify-between items-center">
                  <div className="text-sm">
                    <span className="font-medium">{quote.promoCode}</span> applied: 
                    <span className="text-green-600 ml-1">£{quote.discount.toFixed(2)} discount</span>
                  </div>
                  <Button variant="outline" size="sm" onClick={removePromoCode}>Remove</Button>
                </div>
              )}
              <div className="mt-2 text-xs text-gray-500">
                Try: DENTAL10 (10% off), SMILE20 (20% off), DISCOUNT30 (30% off), NEWSMILE (£100 off)
              </div>
            </div>
            
            <Button variant="outline" onClick={resetQuote}>Reset Quote</Button>
          </div>
          
          {/* Right column - Summary */}
          <div>
            <h2 className="text-xl font-semibold mb-4">Quote Summary</h2>
            <Card>
              <CardContent className="p-6">
                {quote.treatments.length === 0 ? (
                  <div className="py-8 text-center text-gray-500">
                    <p>Your quote is empty.</p>
                    <p>Select treatments to get started.</p>
                  </div>
                ) : (
                  <>
                    <h3 className="font-medium mb-4">Selected Treatments</h3>
                    <div className="space-y-2 mb-6">
                      {quote.treatments.map(treatment => (
                        <div key={treatment.id} className="flex justify-between">
                          <span>{treatment.name}</span>
                          <span>£{treatment.price.toFixed(2)}</span>
                        </div>
                      ))}
                    </div>
                    
                    <div className="border-t pt-4 mb-4">
                      <div className="flex justify-between mb-2">
                        <span>Subtotal</span>
                        <span>£{quote.subtotal.toFixed(2)}</span>
                      </div>
                      
                      {quote.discount > 0 && (
                        <div className="flex justify-between mb-2 text-green-600">
                          <span>Discount</span>
                          <span>-£{quote.discount.toFixed(2)}</span>
                        </div>
                      )}
                      
                      <div className="flex justify-between font-bold text-lg">
                        <span>Total</span>
                        <span>£{quote.total.toFixed(2)}</span>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Button 
                        className="w-full" 
                        onClick={handleSaveQuote}
                        disabled={isSaving}
                      >
                        {isSaving ? 'Saving...' : 'Save Quote'}
                      </Button>
                      
                      <Button 
                        className="w-full" 
                        variant="outline"
                        onClick={handleSendEmail}
                        disabled={isSendingEmail}
                      >
                        {isSendingEmail ? 'Sending...' : 'Save & Email Quote'}
                      </Button>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
        
        {/* Patient Information Dialog */}
        <Dialog open={showPatientForm} onOpenChange={setShowPatientForm}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Patient Information</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-2">
              <div className="space-y-2">
                <label className="text-sm font-medium">Full Name</label>
                <Input
                  value={patientInfo.name}
                  onChange={e => setPatientInfo({ ...patientInfo, name: e.target.value })}
                  placeholder="Enter patient name"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Email</label>
                <Input
                  type="email"
                  value={patientInfo.email}
                  onChange={e => setPatientInfo({ ...patientInfo, email: e.target.value })}
                  placeholder="Enter patient email"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Phone (optional)</label>
                <Input
                  type="tel"
                  value={patientInfo.phone}
                  onChange={e => setPatientInfo({ ...patientInfo, phone: e.target.value })}
                  placeholder="Enter patient phone"
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowPatientForm(false)}>
                Cancel
              </Button>
              <Button 
                onClick={() => {
                  if (patientInfo.name && patientInfo.email) {
                    setShowPatientForm(false);
                    handleSaveQuote();
                  }
                }}
                disabled={!patientInfo.name || !patientInfo.email}
              >
                Continue
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
2. Fix the Quote Detail Page
// client/src/pages/quotes/QuoteDetailPage.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { MainNavigation } from '../../components/layout/MainNavigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { toast } from '@/components/ui/use-toast';
import { quoteService } from '../../services/quote-service';
import { emailService } from '../../services/email-service';

export default function QuoteDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [quote, setQuote] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [isSendingEmail, setIsSendingEmail] = useState(false);
  const [isStartingSequence, setIsStartingSequence] = useState(false);
  
  useEffect(() => {
    if (id) {
      const quoteData = quoteService.getQuoteById(id);
      setQuote(quoteData);
      setLoading(false);
    }
  }, [id]);
  
  const handleSendEmail = async () => {
    if (!quote) return;
    
    setIsSendingEmail(true);
    
    try {
      await emailService.sendQuoteEmail(quote);
      
      toast({
        title: 'Email Sent',
        description: `Quote has been emailed to ${quote.patientEmail}`,
      });
    } catch (error) {
      console.error('Error sending email:', error);
      toast({
        title: 'Email Failed',
        description: 'There was an error sending the email',
        variant: 'destructive',
      });
    } finally {
      setIsSendingEmail(false);
    }
  };
  
  const handleStartEmailSequence = async () => {
    if (!quote) return;
    
    setIsStartingSequence(true);
    
    try {
      await emailService.startEmailSequence(quote);
      
      toast({
        title: 'Sequence Started',
        description: `Email sequence has been started for ${quote.patientEmail}`,
      });
    } catch (error) {
      console.error('Error starting email sequence:', error);
      toast({
        title: 'Sequence Failed',
        description: 'There was an error starting the email sequence',
        variant: 'destructive',
      });
    } finally {
      setIsStartingSequence(false);
    }
  };
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <MainNavigation />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center py-12">Loading quote details...</div>
        </div>
      </div>
    );
  }
  
  if (!quote) {
    return (
      <div className="min-h-screen bg-gray-50">
        <MainNavigation />
        <div className="container mx-auto px-4 py-8">
          <div className="text-center py-12">
            <h1 className="text-2xl font-bold mb-4">Quote Not Found</h1>
            <p className="mb-6">The quote you're looking for doesn't exist or has been removed.</p>
            <Button onClick={() => navigate('/quotes')}>Back to Quotes</Button>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">Quote Details</h1>
          <Button variant="outline" onClick={() => navigate('/quotes')}>Back to Quotes</Button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="md:col-span-2">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle>Quote #{quote.id.split('_')[1]}</CardTitle>
                    <p className="text-sm text-gray-500">Created on {new Date(quote.createdAt).toLocaleString()}</p>
                  </div>
                  <Badge variant={
                    quote.status === 'pending' ? 'secondary' :
                    quote.status === 'approved' ? 'primary' : 'success'
                  }>
                    {quote.status.charAt(0).toUpperCase() + quote.status.slice(1)}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Patient Information</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-sm font-medium text-gray-500">Name</p>
                        <p>{quote.patientName}</p>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-500">Email</p>
                        <p>{quote.patientEmail}</p>
                      </div>
                      {quote.patientPhone && (
                        <div>
                          <p className="text-sm font-medium text-gray-500">Phone</p>
                          <p>{quote.patientPhone}</p>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Treatment Details</h3>
                    {quote.selectedPackage ? (
                      <div className="mb-4">
                        <p className="font-medium">Package: {quote.selectedPackage.name}</p>
                        <p className="text-sm text-gray-500">{quote.selectedPackage.description}</p>
                        <p className="font-semibold mt-1">£{quote.selectedPackage.price.toFixed(2)}</p>
                      </div>
                    ) : quote.treatments && quote.treatments.length > 0 ? (
                      <div className="space-y-2">
                        {quote.treatments.map((treatment: any, index: number) => (
                          <div key={index} className="flex justify-between items-center border-b pb-2">
                            <div>
                              <p className="font-medium">{treatment.name}</p>
                              <p className="text-sm text-gray-500">{treatment.description}</p>
                            </div>
                            <p className="font-semibold">£{treatment.price.toFixed(2)}</p>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="text-gray-500">No treatments selected</p>
                    )}
                  </div>
                  
                  {(quote.appliedOffer || quote.promoCode) && (
                    <div>
                      <h3 className="text-lg font-semibold mb-2">Discounts Applied</h3>
                      {quote.appliedOffer && (
                        <div className="mb-2">
                          <p className="font-medium">Special Offer: {quote.appliedOffer.title}</p>
                          <p className="text-sm text-gray-500">{quote.appliedOffer.description}</p>
                        </div>
                      )}
                      {quote.promoCode && (
                        <div>
                          <p className="font-medium">Promo Code: {quote.promoCode}</p>
                          <p className="text-sm text-green-600">Discount: £{quote.savings.toFixed(2)}</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
          
          <div>
            <Card>
              <CardHeader>
                <CardTitle>Quote Summary</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="border-b pb-4">
                    <div className="flex justify-between mb-2">
                      <span>Subtotal</span>
                      <span>£{quote.subtotal.toFixed(2)}</span>
                    </div>
                    
                    {quote.savings > 0 && (
                      <div className="flex justify-between mb-2 text-green-600">
                        <span>Savings</span>
                        <span>-£{quote.savings.toFixed(2)}</span>
                      </div>
                    )}
                    
                    <div className="flex justify-between font-bold text-lg">
                      <span>Total</span>
                      <span>£{quote.total.toFixed(2)}</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Button 
                      className="w-full" 
                      onClick={handleSendEmail}
                      disabled={isSendingEmail}
                    >
                      {isSendingEmail ? 'Sending...' : 'Email Quote'}
                    </Button>
                    
                    <Button 
                      className="w-full" 
                      variant="outline"
                      onClick={handleStartEmailSequence}
                      disabled={isStartingSequence}
                    >
                      {isStartingSequence ? 'Starting...' : 'Start Email Sequence'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
3. Update the Quote List Page
// client/src/pages/quotes/QuoteListPage.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { MainNavigation } from '../../components/layout/MainNavigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { quoteService } from '../../services/quote-service';

export default function QuoteListPage() {
  const navigate = useNavigate();
  const [quotes, setQuotes] = useState<any[]>([]);
  
  useEffect(() => {
    loadQuotes();
  }, []);
  
  const loadQuotes = () => {
    const allQuotes = quoteService.getAllQuotes();
    // Sort by date, newest first
    allQuotes.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    setQuotes(allQuotes);
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold">My Quotes</h1>
          <Button onClick={() => navigate('/quick-quote')}>Create New Quote</Button>
        </div>
        
        {quotes.length === 0 ? (
          <Card>
            <CardContent className="py-12">
              <div className="text-center">
                <h2 className="text-xl font-semibold mb-2">No Quotes Found</h2>
                <p className="text-gray-500 mb-6">You haven't created any quotes yet.</p>
                <Button onClick={() => navigate('/quick-quote')}>Create Your First Quote</Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {quotes.map(quote => (
              <Card key={quote.id} className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => navigate(`/quotes/${quote.id}`)}>
                <CardContent className="p-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h2 className="font-semibold text-lg">{quote.patientName}</h2>
                      <p className="text-sm text-gray-500">{quote.patientEmail}</p>
                      <p className="text-sm text-gray-500">Created: {new Date(quote.createdAt).toLocaleDateString()}</p>
                    </div>
                    <div className="text-right">
                      <Badge variant={
                        quote.status === 'pending' ? 'secondary' :
                        quote.status === 'approved' ? 'primary' : 'success'
                      }>
                        {quote.status.charAt(0).toUpperCase() + quote.status.slice(1)}
                      </Badge>
                      <p className="font-bold text-lg mt-1">£{quote.total.toFixed(2)}</p>
                      {quote.savings > 0 && (
                        <p className="text-sm text-green-600">Saved: £{quote.savings.toFixed(2)}</p>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
4. Update the App.tsx File to Include All Routes
// client/src/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from '@/components/ui/toaster';

// Pages
import HomePage from './pages/HomePage';
import QuickQuote from './pages/QuickQuote';
import QuoteListPage from './pages/quotes/QuoteListPage';
import QuoteDetailPage from './pages/quotes/QuoteDetailPage';

// Test pages (only for development)
import SimpleQuoteDemo from './pages/SimpleQuoteDemo';
import BasicQuoteDemo from './pages/BasicQuoteDemo';

function App() {
  return (
    <Router>
      <Routes>
        {/* Main routes */}
        <Route path="/" element={<HomePage />} />
        <Route path="/quick-quote" element={<QuickQuote />} />
        <Route path="/quotes" element={<QuoteListPage />} />
        <Route path="/quotes/:id" element={<QuoteDetailPage />} />
        
        {/* Test routes */}
        <Route path="/simple-quote" element={<SimpleQuoteDemo />} />
        <Route path="/basic-quote" element={<BasicQuoteDemo />} />
        
        {/* Fallback route */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
      <Toaster />
    </Router>
  );
}

export default App;
5. Update the MainNavigation Component
// client/src/components/layout/MainNavigation.tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { HomeIcon, CalculatorIcon, ListIcon } from 'lucide-react';

export function MainNavigation() {
  const location = useLocation();
  
  const isActive = (path: string) => location.pathname.startsWith(path);
  
  return (
    <nav className="bg-white shadow-sm">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="text-xl font-bold text-blue-600">
                MyDentalFly
              </Link>
            </div>
            
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              <Link 
                to="/"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  location.pathname === '/' 
                    ? 'border-blue-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <HomeIcon className="mr-1 h-4 w-4" />
                Home
              </Link>
              
              <Link 
                to="/quick-quote"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  isActive('/quick-quote') 
                    ? 'border-blue-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <CalculatorIcon className="mr-1 h-4 w-4" />
                New Quote
              </Link>
              
              <Link 
                to="/quotes"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  isActive('/quotes') 
                    ? 'border-blue-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <ListIcon className="mr-1 h-4 w-4" />
                My Quotes
              </Link>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
}
6. Update Email Service to Include PDF Generation and Email Sequences
// client/src/services/email-service.ts
import { toast } from '@/components/ui/use-toast';
import { Quote } from './quote-service';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

interface EmailSequence {
  id: string;
  quoteId: string;
  patientEmail: string;
  patientName: string;
  startedAt: string;
  steps: {
    days: number;
    subject: string;
    sent: boolean;
    sentAt?: string;
  }[];
}

class EmailService {
  private sequences: EmailSequence[] = [];
  
  constructor() {
    // Load email sequences from localStorage
    const storedSequences = localStorage.getItem('email_sequences');
    if (storedSequences) {
      try {
        this.sequences = JSON.parse(storedSequences);
      } catch (e) {
        console.error('Failed to parse stored email sequences', e);
      }
    }
  }
  
  private saveToStorage() {
    localStorage.setItem('email_sequences', JSON.stringify(this.sequences));
  }
  
  async sendQuoteEmail(quote: Quote): Promise<boolean> {
    try {
      // Generate PDF
      const pdfData = await this.generateQuotePDF(quote);
      
      // In a real implementation, this would call your backend API to send an email
      console.log(`Sending quote email to ${quote.patientEmail} with quote ID ${quote.id}`);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Email Sent",
        description: `Quote has been emailed to ${quote.patientEmail}`,
      });
      
      return true;
    } catch (error) {
      console.error('Error sending quote email:', error);
      
      toast({
        title: "Email Failed",
        description: "There was an error sending the email.",
        variant: "destructive",
      });
      
      return false;
    }
  }
  
  private async generateQuotePDF(quote: Quote): Promise<string> {
    // Create a new PDF document
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(20);
    doc.text('Dental Treatment Quote', 105, 20, { align: 'center' });
    
    // Add patient info
    doc.setFontSize(12);
    doc.text(`Patient: ${quote.patientName}`, 20, 40);
    doc.text(`Email: ${quote.patientEmail}`, 20, 48);
    doc.text(`Date: ${new Date(quote.createdAt).toLocaleDateString()}`, 20, 56);
    doc.text(`Quote #: ${quote.id}`, 20, 64);
    
    // Add treatments table
    doc.setFontSize(14);
    doc.text('Treatment Details', 20, 80);
    
    const tableData = [];
    
    if (quote.selectedPackage) {
      tableData.push([
        quote.selectedPackage.name,
        quote.selectedPackage.description || '',
        `£${quote.selectedPackage.price.toFixed(2)}`
      ]);
    } else if (quote.treatments && quote.treatments.length) {
      quote.treatments.forEach(treatment => {
        tableData.push([
          treatment.name,
          treatment.description || '',
          `£${treatment.price.toFixed(2)}`
        ]);
      });
    }
    
    // @ts-ignore (jsPDF-autotable adds this method)
    doc.autoTable({
      startY: 85,
      head: [['Treatment', 'Description', 'Price']],
      body: tableData,
      theme: 'grid',
      headStyles: { fillColor: [66, 139, 202] }
    });
    
    const finalY = (doc as any).lastAutoTable.finalY + 10;
    
    // Add special offers and promo codes
    if (quote.appliedOffer) {
      doc.text(`Special Offer: ${quote.appliedOffer.title}`, 20, finalY + 10);
    }
    
    if (quote.promoCode) {
      doc.text(`Promo Code: ${quote.promoCode}`, 20, finalY + 20);
    }
    
    // Add pricing summary
    doc.setFontSize(12);
    doc.text(`Subtotal: £${quote.subtotal.toFixed(2)}`, 140, finalY + 30);
    
    if (quote.savings > 0) {
      doc.text(`Savings: £${quote.savings.toFixed(2)}`, 140, finalY + 38);
    }
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(`Total: £${quote.total.toFixed(2)}`, 140, finalY + 48);
    
    // Return as base64 string
    return doc.output('datauristring');
  }
  
  async startEmailSequence(quote: Quote): Promise<boolean> {
    try {
      // Check if sequence already exists for this quote
      const existingSequence = this.sequences.find(s => s.quoteId === quote.id);
      if (existingSequence) {
        toast({
          title: "Sequence Already Started",
          description: "An email sequence is already running for this quote.",
          variant: "warning",
        });
        return false;
      }
      
      // Create new sequence
      const newSequence: EmailSequence = {
        id: `seq_${Date.now()}`,
        quoteId: quote.id,
        patientEmail: quote.patientEmail,
        patientName: quote.patientName,
        startedAt: new Date().toISOString(),
        steps: [
          {
            days: 1,
            subject: "Follow-up on your dental quote",
            sent: false
          },
          {
            days: 3,
            subject: "Special offer for your dental treatment",
            sent: false
          },
          {
            days: 7,
            subject: "Last chance: Your dental quote",
            sent: false
          }
        ]
      };
      
      // Save sequence
      this.sequences.push(newSequence);
      this.saveToStorage();
      
      toast({
        title: "Sequence Started",
        description: `Email sequence has been started for ${quote.patientEmail}`,
      });
      
      return true;
    } catch (error) {
      console.error('Error starting email sequence:', error);
      
      toast({
        title: "Sequence Failed",
        description: "There was an error starting the email sequence.",
        variant: "destructive",
      });
      
      return false;
    }
  }
}

// Create a singleton instance
export const emailService = new EmailService();