Current Issues to Address
Login Problems: You're either unable to log in or perpetually logged into the clinic portal
Navigation Issues: You can't properly navigate between different sections of the application
Portal Access: The portals aren't accessible as expected
Step-by-Step Solution Plan
1. Fix Authentication Flow
First, let's address the authentication issues that are preventing proper login/logout functionality:

// client/src/hooks/use-auth.ts
export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Check if user is logged in on mount
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('/api/auth/status', {
          credentials: 'include' // Important for cookies
        });
        
        if (!response.ok) throw new Error('Failed to check auth status');
        
        const data = await response.json();
        setUser(data.user || null);
      } catch (err) {
        console.error('Auth status check failed:', err);
        setError(err.message);
        setUser(null);
      } finally {
        setIsLoading(false);
      }
    };
    
    checkAuthStatus();
  }, []);
  
  // Login function
  const login = async (credentials) => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
        credentials: 'include'
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Login failed');
      }
      
      const data = await response.json();
      setUser(data.user);
      return data.user;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };
  
  // Logout function
  const logout = async () => {
    try {
      setIsLoading(true);
      await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include'
      });
      setUser(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };
  
  return { user, isLoading, error, login, logout };
};
2. Fix Navigation Component
Let's create a reliable navigation component that works across all portals:

// client/src/components/common/MainNavigation.tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/use-auth';

export const MainNavigation = () => {
  const { user, logout } = useAuth();
  const location = useLocation();
  
  // Determine which portal we're in
  const isAdmin = location.pathname.startsWith('/admin');
  const isClinic = location.pathname.startsWith('/clinic');
  const isPatient = location.pathname.startsWith('/patient');
  
  const handleLogout = async (e) => {
    e.preventDefault();
    try {
      await logout();
      // Redirect to home page
      window.location.href = '/';
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };
  
  return (
    <nav className="bg-white shadow-sm">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="text-xl font-bold text-indigo-600">
                MyDentalFly
              </Link>
            </div>
            
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              {/* Home link always visible */}
              <Link 
                to="/"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  location.pathname === '/' 
                    ? 'border-indigo-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                }`}
              >
                Home
              </Link>
              
              {/* Admin Portal links */}
              {isAdmin && (
                <>
                  <Link 
                    to="/admin/dashboard" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/admin/dashboard' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Dashboard
                  </Link>
                  <Link 
                    to="/admin/clinics" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/admin/clinics' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Clinics
                  </Link>
                  <Link 
                    to="/admin/offers" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/admin/offers' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Offers
                  </Link>
                </>
              )}
              
              {/* Clinic Portal links */}
              {isClinic && (
                <>
                  <Link 
                    to="/clinic/dashboard" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/clinic/dashboard' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Dashboard
                  </Link>
                  <Link 
                    to="/clinic/appointments" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/clinic/appointments' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Appointments
                  </Link>
                  <Link 
                    to="/clinic/treatments" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/clinic/treatments' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Treatments
                  </Link>
                </>
              )}
              
              {/* Patient Portal links */}
              {isPatient && (
                <>
                  <Link 
                    to="/patient/dashboard" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/patient/dashboard' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Dashboard
                  </Link>
                  <Link 
                    to="/patient/quotes" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/patient/quotes' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    My Quotes
                  </Link>
                  <Link 
                    to="/patient/appointments" 
                    className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                      location.pathname === '/patient/appointments' 
                        ? 'border-indigo-500 text-gray-900' 
                        : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                    }`}
                  >
                    Appointments
                  </Link>
                </>
              )}
              
              {/* Public quote builder */}
              <Link 
                to="/quote-builder" 
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  location.pathname === '/quote-builder' 
                    ? 'border-indigo-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                }`}
              >
                Get Quote
              </Link>
            </div>
          </div>
          
          <div className="hidden sm:ml-6 sm:flex sm:items-center">
            {user ? (
              <div className="flex items-center space-x-4">
                <span className="text-sm font-medium text-gray-700">
                  {user.name || user.email}
                </span>
                <button
                  onClick={handleLogout}
                  className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Logout
                </button>
              </div>
            ) : (
              <div className="flex items-center space-x-4">
                <Link
                  to="/login"
                  className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Login
                </Link>
                <Link
                  to="/register"
                  className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  Register
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};
3. Fix App Routing Structure
Let's update the main App component to use a more robust routing structure:

// client/src/App.tsx
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { MainNavigation } from './components/common/MainNavigation';
import { ProtectedRoute } from './components/common/ProtectedRoute';

// Pages
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import QuoteBuilderPage from './pages/QuoteBuilderPage';

// Admin Portal
import AdminDashboard from './pages/admin/Dashboard';
import AdminClinics from './pages/admin/Clinics';
import AdminOffers from './pages/admin/Offers';

// Clinic Portal
import ClinicDashboard from './pages/clinic/Dashboard';
import ClinicAppointments from './pages/clinic/Appointments';
import ClinicTreatments from './pages/clinic/Treatments';

// Patient Portal
import PatientDashboard from './pages/patient/Dashboard';
import PatientQuotes from './pages/patient/Quotes';
import PatientAppointments from './pages/patient/Appointments';

// Test Pages
import SpecialOffersTestPage from './pages/SpecialOffersTestPage';
import QuoteIntegrationTestPage from './pages/QuoteIntegrationTestPage';

function App() {
  return (
    <BrowserRouter>
      <AuthProvider>
        <MainNavigation />
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <Routes>
            {/* Public routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route path="/quote-builder" element={<QuoteBuilderPage />} />
            
            {/* Admin Portal routes */}
            <Route path="/admin" element={<ProtectedRoute role="admin" />}>
              <Route path="" element={<Navigate to="dashboard" replace />} />
              <Route path="dashboard" element={<AdminDashboard />} />
              <Route path="clinics" element={<AdminClinics />} />
              <Route path="offers" element={<AdminOffers />} />
            </Route>
            
            {/* Clinic Portal routes */}
            <Route path="/clinic" element={<ProtectedRoute role="clinic" />}>
              <Route path="" element={<Navigate to="dashboard" replace />} />
              <Route path="dashboard" element={<ClinicDashboard />} />
              <Route path="appointments" element={<ClinicAppointments />} />
              <Route path="treatments" element={<ClinicTreatments />} />
            </Route>
            
            {/* Patient Portal routes */}
            <Route path="/patient" element={<ProtectedRoute role="patient" />}>
              <Route path="" element={<Navigate to="dashboard" replace />} />
              <Route path="dashboard" element={<PatientDashboard />} />
              <Route path="quotes" element={<PatientQuotes />} />
              <Route path="appointments" element={<PatientAppointments />} />
            </Route>
            
            {/* Test routes */}
            <Route path="/tests/special-offers" element={<SpecialOffersTestPage />} />
            <Route path="/tests/quote-integration" element={<QuoteIntegrationTestPage />} />
            
            {/* Fallback route */}
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </main>
      </AuthProvider>
    </BrowserRouter>
  );
}

export default App;
4. Create a Protected Route Component
To properly handle authentication for different portals:

// client/src/components/common/ProtectedRoute.tsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../../hooks/use-auth';

export const ProtectedRoute = ({ role }) => {
  const { user, isLoading } = useAuth();
  
  // Show loading state while checking auth
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  // If not authenticated, redirect to login
  if (!user) {
    return <Navigate to="/login" replace />;
  }
  
  // If role doesn't match, redirect to appropriate portal
  if (role && user.role !== role) {
    // Redirect to the appropriate portal based on user role
    if (user.role === 'admin') {
      return <Navigate to="/admin/dashboard" replace />;
    } else if (user.role === 'clinic') {
      return <Navigate to="/clinic/dashboard" replace />;
    } else if (user.role === 'patient') {
      return <Navigate to="/patient/dashboard" replace />;
    } else {
      // If unknown role, redirect to home
      return <Navigate to="/" replace />;
    }
  }
  
  // If authenticated and role matches, render the child routes
  return <Outlet />;
};
5. Fix Login Page
Let's ensure the login page works properly:

// client/src/pages/LoginPage.tsx
import React, { useState } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useAuth } from '../hooks/use-auth';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const { login } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  
  // Get the redirect path from the location state, or default to home
  const from = location.state?.from?.pathname || '/';
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    
    try {
      const user = await login({ email, password });
      
      // Redirect based on user role
      if (user.role === 'admin') {
        navigate('/admin/dashboard');
      } else if (user.role === 'clinic') {
        navigate('/clinic/dashboard');
      } else if (user.role === 'patient') {
        navigate('/patient/dashboard');
      } else {
        navigate(from);
      }
    } catch (err) {
      setError(err.message || 'Login failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="max-w-md mx-auto">
      <h1 className="text-2xl font-bold text-center mb-6">Login to MyDentalFly</h1>
      
      {error && (
        <div className="bg-red-50 text-red-700 p-3 rounded-md mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
        </div>
        
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">
            Password
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
        </div>
        
        <div>
          <button
            type="submit"
            disabled={isLoading}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
          >
            {isLoading ? 'Logging in...' : 'Login'}
          </button>
        </div>
        
        <div className="text-sm text-center">
          <p>
            Don't have an account?{' '}
            <Link to="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
              Register
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
};

export default LoginPage;
6. Add Clear Session Functionality
To fix the issue where you're perpetually logged into the clinic portal:

// client/src/utils/session-helper.ts
export const clearAllSessionData = () => {
  // Clear localStorage
  localStorage.clear();
  
  // Clear sessionStorage
  sessionStorage.clear();
  
  // Clear cookies (this is a simple approach, more complex cookies might need a library)
  document.cookie.split(";").forEach(function(c) {
    document.cookie = c
      .replace(/^ +/, "")
      .replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
  });
};

// Usage in logout function
const logout = async () => {
  try {
    await fetch('/api/auth/logout', {
      method: 'POST',
      credentials: 'include'
    });
    clearAllSessionData();
    setUser(null);
  } catch (err) {
    console.error('Logout error:', err);
    // Even if the API fails, clear client-side data
    clearAllSessionData();
    setUser(null);
  }
};
7. Create Emergency Access Page
Let's create a special page that allows you to reset your session and access any portal for testing:

// client/src/pages/EmergencyAccess.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { clearAllSessionData } from '../utils/session-helper';

const EmergencyAccess = () => {
  const [selectedPortal, setSelectedPortal] = useState('');
  const navigate = useNavigate();
  
  const handleClearSession = () => {
    clearAllSessionData();
    window.location.href = '/';
  };
  
  const handleAccessPortal = () => {
    if (selectedPortal) {
      navigate(`/${selectedPortal}/dashboard`);
    }
  };
  
  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-xl font-bold mb-4">Emergency System Access</h1>
      
      <div className="mb-6">
        <button
          onClick={handleClearSession}
          className="w-full py-2 px-4 bg-red-600 text-white rounded-md hover:bg-red-700"
        >
          Clear All Session Data
        </button>
        <p className="text-sm text-gray-500 mt-2">
          This will clear all cookies, localStorage, and sessionStorage.
        </p>
      </div>
      
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Quick Portal Access
        </label>
        <select
          value={selectedPortal}
          onChange={(e) => setSelectedPortal(e.target.value)}
          className="w-full p-2 border border-gray-300 rounded-md"
        >
          <option value="">Select a portal</option>
          <option value="admin">Admin Portal</option>
          <option value="clinic">Clinic Portal</option>
          <option value="patient">Patient Portal</option>
        </select>
      </div>
      
      <button
        onClick={handleAccessPortal}
        disabled={!selectedPortal}
        className="w-full py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
      >
        Access Selected Portal
      </button>
      
      <div className="mt-6 p-4 bg-yellow-50 rounded-md">
        <h2 className="text-lg font-semibold mb-2">Test Pages</h2>
        <ul className="space-y-2">
          <li>
            <a 
              href="/tests/special-offers" 
              className="text-indigo-600 hover:underline"
            >
              Special Offers Test Page
            </a>
          </li>
          <li>
            <a 
              href="/tests/quote-integration" 
              className="text-indigo-600 hover:underline"
            >
              Quote Integration Test Page
            </a>
          </li>
          <li>
            <a 
              href="/quote-builder" 
              className="text-indigo-600 hover:underline"
            >
              Public Quote Builder
            </a>
          </li>
        </ul>
      </div>
    </div>
  );
};

export default EmergencyAccess;
Then add it to your routes:

// In App.tsx routes
<Route path="/emergency-access" element={<EmergencyAccess />} />
Implementation Priority
First Priority: Fix the authentication issues

Implement the updated useAuth hook
Add the clearAllSessionData utility
Create the EmergencyAccess page
Second Priority: Fix navigation

Implement the MainNavigation component
Update the App.tsx routing structure
Add the ProtectedRoute component
Third Priority: Test the quote system

Access the quote builder through the EmergencyAccess page
Test special offers and treatment packages