Below is a recipe to bolt on email + password protection around your two “portal” routers (admin and clinic), using the Passport‑Local + express‑session stack you already have installed. We’ll:

Add session support and a LocalStrategy

Seed user records with roles

Expose login/logout endpoints

Write middleware to guard by role

Hook up your portal routes

1. Wire up sessions & Passport
In server/index.ts, before you call registerRoutes(app):

ts
Copy
Edit
import session from "express-session";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import bcrypt from "bcrypt";
import { db } from "./db";
import { users } from "./schema";

// 1a) Session middleware
app.use(session({
  secret: process.env.SESSION_SECRET || "dev_secret", 
  resave: false,
  saveUninitialized: false,
  cookie: { secure: process.env.NODE_ENV === "production" }
}));

// 1b) Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// 1c) Define LocalStrategy
passport.use(new LocalStrategy(
  { usernameField: "email" },
  async (email, password, done) => {
    try {
      const [user] = await db.select().from(users).where(users.email.eq(email));
      if (!user) return done(null, false, { message: "Unknown user" });
      const ok = await bcrypt.compare(password, user.passwordHash);
      if (!ok) return done(null, false, { message: "Bad password" });
      return done(null, user);
    } catch (e) {
      return done(e as Error);
    }
  }
));

// 1d) Serialize & deserialize
passport.serializeUser((user: any, done) => done(null, user.id));
passport.deserializeUser(async (id: number, done) => {
  const [user] = await db.select().from(users).where(users.id.eq(id));
  done(null, user || false);
});
2. Seed users with roles
You need at least two users in your users table—one with role = "admin" and one with role = "clinic". In your Shell:

bash
Copy
Edit
node -e "import bcrypt from 'bcrypt'; \
import { db } from './server/db';\
import { users } from './server/schema';\
(async()=>{ \
  const hash = await bcrypt.hash('AdminPass123', 10);\
  await db.insert(users).values({ email:'admin@you.com', passwordHash:hash, role:'admin' });\
  const clinicHash = await bcrypt.hash('ClinicPass123',10);\
  await db.insert(users).values({ email:'clinic@you.com', passwordHash:clinicHash, role:'clinic' });\
  console.log('✅ seeded admin+clinic users');\
  process.exit();\
})()"
3. Add login/logout routes
Still in server/index.ts, before registerRoutes:

ts
Copy
Edit
// 3a) Login endpoint
app.post("/api/auth/login",
  passport.authenticate("local"),
  (_req, res) => {
    // passport.attachs user to req.user
    res.json({ success: true, user: _req.user });
  }
);

// 3b) Logout endpoint
app.post("/api/auth/logout", (req, res) => {
  req.logout(err => {
    if (err) return res.status(500).json({ success: false });
    res.json({ success: true });
  });
});
4. Protect your portal routers
Create a small middleware factory in server/middleware/auth.ts (or inline):

ts
Copy
Edit
import { Request, Response, NextFunction } from "express";

// ensure the user is logged in
export function ensureLoggedIn(req: Request, res: Response, next: NextFunction) {
  if (req.isAuthenticated()) return next();
  return res.status(401).json({ success: false, message: "Login required" });
}

// ensure the user has a specific role
export function ensureRole(role: string) {
  return (req: Request, res: Response, next: NextFunction) => {
    // @ts-ignore passport attaches user to req.user
    if (req.user?.role === role) return next();
    return res.status(403).json({ success: false, message: "Forbidden" });
  };
}
Then, when mounting your admin and clinic routers (probably in registerRoutes):

ts
Copy
Edit
import { ensureLoggedIn, ensureRole } from "./middleware/auth";
import adminRoutes  from "./routes/admin";
import clinicRoutes from "./routes/clinic";

// ADMIN portal = only admin users
app.use(
  "/api/admin",
  ensureLoggedIn,
  ensureRole("admin"),
  adminRoutes
);

// CLINIC portal = only clinic users
app.use(
  "/api/clinic",
  ensureLoggedIn,
  ensureRole("clinic"),
  clinicRoutes
);
5. Front‑end: login form & cookie‑based auth
Login page (e.g. /login) should fetch("/api/auth/login", { method:"POST", credentials:"include", body: JSON.stringify({ email, password }) }).

On success, your browser will set the session cookie.

All subsequent fetch("/api/admin/…") or /api/clinic/… calls (with credentials: "include") will carry that cookie.

Protect your React routes by checking user.role from your authenticated AuthContext.

Quick sanity‑check
Session cookie: In DevTools → Storage → Cookies, after login you should see a session cookie for your domain.

Test with curl:

bash
Copy
Edit
curl -i -c cjar -d '{"email":"admin@you.com","password":"AdminPass123"}' \
  -H "Content-Type:application/json" \
  http://localhost:5173/api/auth/login

curl -b cjar http://localhost:5173/api/admin/some‑protected
That should return your protected data only when the right cookie is sent.

With this in place:

/api/auth/login will establish a session.

/api/admin/* and /api/clinic/* are off‑limits until you log in with the correct role.

Your React app simply needs to call those endpoints with credentials: "include" and read req.user.role to show/hide UI.

Give that a go, and I’ll help debug any edge‑cases.