I see the header navigation has been changed. We need to restore the original header design while keeping the quote builder working. Follow these steps:

1. CHECK THE ORIGINAL NAVBAR.TSX
First, let's examine what changed in the navigation component:

```jsx
// Open the file
opened client/src/components/Navbar.tsx
RESTORE THE ORIGINAL NAVBAR DESIGN Update the Navbar.tsx file with this implementation that preserves both the original design and the quote builder link:
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Menu, X, Sun, Moon } from 'lucide-react';
import { useTheme } from '../hooks/use-theme';
import { Button } from './ui/button';
import { cn } from '../lib/utils';
import Logo from './Logo';

// Navigation items
const navItems = [
  { label: 'Home', href: '/' },
  { label: 'Dental Services', href: '/services' },
  { label: 'Patient Portal', href: '/patient-portal' },
  { label: 'Clinic Login', href: '/clinic-login' },
  { label: 'Blog', href: '/blog' },
  { label: 'Contact', href: '/contact' }
];

export function Navbar() {
  const { theme, setTheme } = useTheme();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const toggleMobileMenu = () => {
    setMobileMenuOpen(!mobileMenuOpen);
  };

  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center">
        <div className="mr-4 flex">
          <Link to="/" className="mr-6 flex items-center space-x-2">
            <Logo className="h-6 w-auto" />
          </Link>
        </div>

        {/* Desktop Navigation */}
        <div className="hidden md:flex md:flex-1 md:items-center md:justify-between">
          <nav className="flex items-center space-x-6">
            {navItems.map((item) => (
              <Link
                key={item.href}
                to={item.href}
                className="text-sm font-medium transition-colors hover:text-primary"
              >
                {item.label}
              </Link>
            ))}
          </nav>
          <div className="flex items-center space-x-4">
            <Button variant="outline" size="sm" onClick={toggleTheme}>
              {theme === 'dark' ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
              <span className="sr-only">Toggle theme</span>
            </Button>
            <Link to="/quote">
              <Button size="sm" className="bg-primary text-primary-foreground">
                Get a Quote
              </Button>
            </Link>
            <div className="flex items-center">
              <Link to="/language" className="flex items-center space-x-1">
                <span className="text-sm">ðŸ‡¬ðŸ‡§</span>
                <span className="text-sm font-medium">English</span>
              </Link>
            </div>
          </div>
        </div>

        {/* Mobile Menu Toggle */}
        <div className="flex flex-1 items-center justify-end md:hidden">
          <Button variant="outline" size="sm" onClick={toggleTheme} className="mr-2">
            {theme === 'dark' ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
            <span className="sr-only">Toggle theme</span>
          </Button>
          <Link to="/quote" className="mr-2">
            <Button size="sm" className="bg-primary text-primary-foreground">
              Get a Quote
            </Button>
          </Link>
          <Button
            variant="ghost"
            size="sm"
            className="-mr-2"
            onClick={toggleMobileMenu}
            aria-label="Toggle menu"
          >
            {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </Button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className="container md:hidden">
          <nav className="mt-2 flex flex-col space-y-3 pb-4">
            {navItems.map((item) => (
              <Link
                key={item.href}
                to={item.href}
                className="rounded-md px-3 py-2 text-sm font-medium hover:bg-accent"
                onClick={() => setMobileMenuOpen(false)}
              >
                {item.label}
              </Link>
            ))}
            <div className="mt-2 flex items-center px-3">
              <Link to="/language" className="flex items-center space-x-1">
                <span className="text-sm">ðŸ‡¬ðŸ‡§</span>
                <span className="text-sm font-medium">English</span>
              </Link>
            </div>
          </nav>
        </div>
      )}
    </header>
  );
}

export default Navbar;
VERIFY THE LOGO COMPONENT Make sure the Logo component exists and works properly:
// Check if Logo component exists
opened client/src/components/Logo.tsx

// If it doesn't exist, create it
created client/src/components/Logo.tsx

// Add this implementation to Logo.tsx
import React from 'react';

const Logo = ({ className = '' }) => {
  return (
    <div className={className}>
      <span className="text-xl font-bold text-primary">MyDentalFly</span>
    </div>
  );
};

export default Logo;
ENSURE THE THEME HOOK EXISTS Make sure the use-theme hook is properly implemented:
// Check if use-theme hook exists
opened client/src/hooks/use-theme.tsx

// If it doesn't exist, create it
created client/src/hooks/use-theme.tsx

// Add this implementation to use-theme.tsx
import { useState, useEffect, createContext, useContext } from 'react';

type Theme = 'dark' | 'light' | 'system';

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: 'system',
  setTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = 'system',
  storageKey = 'ui-theme',
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  );

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');

    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')
        .matches
        ? 'dark'
        : 'light';
      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error('useTheme must be used within a ThemeProvider');

  return context;
};
MAKE SURE THE UTILS FILE EXISTS Check that the utils.ts file exists with the cn utility:
// Check if utils.ts exists
opened client/src/lib/utils.ts

// If it doesn't exist, create it
created client/src/lib/utils.ts

// Add this implementation to utils.ts
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
ENSURE THE BUTTON COMPONENT EXISTS Check that the Button component is properly implemented:
// Check if button.tsx exists
opened client/src/components/ui/button.tsx

// If it doesn't exist, create it
created client/src/components/ui/button.tsx

// Add this implementation to button.tsx
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };
UPDATE APP.TSX TO INCLUDE THE THEME PROVIDER Make sure the ThemeProvider is included in App.tsx:
// Open App.tsx
opened client/src/App.tsx

// Find the App function and wrap your routes with ThemeProvider
// Your App.tsx should include something like this:
import { ThemeProvider } from './hooks/use-theme';

function App() {
  return (
    <ThemeProvider defaultTheme="light">
      <Router>
        <Routes>
          {/* Your routes here */}
        </Routes>
      </Router>
    </ThemeProvider>
  );
}
RESTART THE APPLICATION After making these changes, restart the application to see the restored header with the quote builder link.
