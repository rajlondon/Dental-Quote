Global State Management: Keeping state outside the component lifecycle prevents it from being lost during page refreshes or form submissions
localStorage Persistence: Adding a persistence layer ensures state survives even when the page refreshes
Form Elimination: Removing traditional form elements prevents unexpected submission events
Reducer Pattern: Using a reducer for state updates ensures atomic, predictable changes
Comprehensive Solution
Let's implement a production-ready solution based on these insights:

1. Enhanced Quote Store with Zustand
// client/src/stores/quoteStore.ts
import create from 'zustand';
import { persist } from 'zustand/middleware';

// Define interfaces
interface Treatment {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

interface QuoteState {
  treatments: Treatment[];
  promoCode: string | null;
  discountPercent: number;
  subtotal: number;
  total: number;
  loading: {
    treatments: boolean;
    promoCode: boolean;
    saving: boolean;
  };
  
  // Actions
  addTreatment: (treatment: Treatment) => void;
  removeTreatment: (id: string) => void;
  updateQuantity: (id: string, quantity: number) => void;
  applyPromoCode: (code: string) => Promise<boolean>;
  removePromoCode: () => void;
  saveQuote: () => Promise<string | null>;
  resetQuote: () => void;
}

// Calculate totals helper
const calculateTotals = (treatments: Treatment[], discountPercent: number) => {
  const subtotal = treatments.reduce(
    (sum, t) => sum + (t.price * (t.quantity || 1)), 
    0
  );
  const total = subtotal * (1 - (discountPercent / 100));
  return { subtotal, total };
};

// Create the store with persistence
export const useQuoteStore = create<QuoteState>()(
  persist(
    (set, get) => ({
      // Initial state
      treatments: [],
      promoCode: null,
      discountPercent: 0,
      subtotal: 0,
      total: 0,
      loading: {
        treatments: false,
        promoCode: false,
        saving: false
      },
      
      // Actions
      addTreatment: (treatment) => {
        const state = get();
        const existingTreatment = state.treatments.find(t => t.id === treatment.id);
        
        let updatedTreatments;
        if (existingTreatment) {
          // Increase quantity if treatment already exists
          updatedTreatments = state.treatments.map(t => 
            t.id === treatment.id 
              ? { ...t, quantity: (t.quantity || 1) + 1 } 
              : t
          );
        } else {
          // Add new treatment with quantity 1
          updatedTreatments = [...state.treatments, { ...treatment, quantity: 1 }];
        }
        
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
      },
      
      removeTreatment: (id) => {
        const state = get();
        const updatedTreatments = state.treatments.filter(t => t.id !== id);
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
      },
      
      updateQuantity: (id, quantity) => {
        const state = get();
        const updatedTreatments = state.treatments.map(t => 
          t.id === id ? { ...t, quantity } : t
        );
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
      },
      
      applyPromoCode: async (code) => {
        set(state => ({ 
          loading: { ...state.loading, promoCode: true } 
        }));
        
        try {
          // Try the new endpoint first
          let response = await fetch('/api/quotes-api/promo-codes/apply', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ code })
          });
          
          // Fall back to legacy endpoint if needed
          if (!response.ok) {
            response = await fetch('/api/promo-codes/validate', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ code })
            });
          }
          
          if (!response.ok) {
            throw new Error('Failed to validate promo code');
          }
          
          const data = await response.json();
          
          if (data.valid) {
            const state = get();
            const { subtotal, total } = calculateTotals(
              state.treatments, 
              data.discountPercentage
            );
            
            set({
              promoCode: code,
              discountPercent: data.discountPercentage,
              subtotal,
              total,
              loading: { ...state.loading, promoCode: false }
            });
            
            return true;
          } else {
            set(state => ({ 
              loading: { ...state.loading, promoCode: false } 
            }));
            return false;
          }
        } catch (error) {
          console.error('Error applying promo code:', error);
          set(state => ({ 
            loading: { ...state.loading, promoCode: false } 
          }));
          return false;
        }
      },
      
      removePromoCode: () => {
        const state = get();
        const { subtotal, total } = calculateTotals(state.treatments, 0);
        
        set({
          promoCode: null,
          discountPercent: 0,
          subtotal,
          total
        });
      },
      
      saveQuote: async () => {
        const state = get();
        set({ loading: { ...state.loading, saving: true } });
        
        try {
          const response = await fetch('/api/quotes-api/quotes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              treatments: state.treatments,
              promoCode: state.promoCode,
              discountPercent: state.discountPercent,
              subtotal: state.subtotal,
              total: state.total
            })
          });
          
          if (!response.ok) {
            throw new Error('Failed to save quote');
          }
          
          const data = await response.json();
          set({ loading: { ...state.loading, saving: false } });
          
          return data.quoteId;
        } catch (error) {
          console.error('Error saving quote:', error);
          set({ loading: { ...state.loading, saving: false } });
          
          return null;
        }
      },
      
      resetQuote: () => {
        set({
          treatments: [],
          promoCode: null,
          discountPercent: 0,
          subtotal: 0,
          total: 0,
          loading: {
            treatments: false,
            promoCode: false,
            saving: false
          }
        });
      }
    }),
    {
      name: 'quote-storage', // localStorage key
      getStorage: () => localStorage, // Use localStorage for persistence
    }
  )
);
2. Production-Ready Quote Builder Component
// client/src/components/quotes/PersistentQuoteBuilder.tsx
import React, { useState, useEffect } from 'react';
import { useQuoteStore } from '../../stores/quoteStore';

// Formatting helpers
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-GB', {
    style: 'currency',
    currency: 'GBP'
  }).format(amount);
};

export function PersistentQuoteBuilder() {
  const {
    treatments,
    promoCode,
    discountPercent,
    subtotal,
    total,
    loading,
    addTreatment,
    removeTreatment,
    updateQuantity,
    applyPromoCode,
    removePromoCode,
    saveQuote,
    resetQuote
  } = useQuoteStore();
  
  const [promoInput, setPromoInput] = useState('');
  const [availableTreatments, setAvailableTreatments] = useState([]);
  const [treatmentsLoading, setTreatmentsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('treatments');
  const [successMessage, setSuccessMessage] = useState('');
  
  // Fetch treatments on mount
  useEffect(() => {
    const fetchTreatments = async () => {
      setTreatmentsLoading(true);
      try {
        // Try treatment packages endpoint first
        let response = await fetch('/api/treatment-packages');
        
        if (!response.ok) {
          // Fall back to treatments endpoint
          response = await fetch('/api/treatments');
        }
        
        if (response.ok) {
          const data = await response.json();
          setAvailableTreatments(data);
        } else {
          // If both fail, use mock data
          setAvailableTreatments([
            { id: 't1', name: 'Teeth Cleaning', price: 80 },
            { id: 't2', name: 'Whitening', price: 200 },
            { id: 't3', name: 'Filling', price: 150 },
            { id: 't4', name: 'Check-up', price: 50 },
            { id: 't5', name: 'X-Ray', price: 75 }
          ]);
        }
      } catch (error) {
        console.error('Error fetching treatments:', error);
        // Use mock data on error
        setAvailableTreatments([
          { id: 't1', name: 'Teeth Cleaning', price: 80 },
          { id: 't2', name: 'Whitening', price: 200 },
          { id: 't3', name: 'Filling', price: 150 },
          { id: 't4', name: 'Check-up', price: 50 },
          { id: 't5', name: 'X-Ray', price: 75 }
        ]);
      } finally {
        setTreatmentsLoading(false);
      }
    };
    
    fetchTreatments();
  }, []);
  
  // Handle promo code application
  const handleApplyPromoCode = async (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    if (!promoInput) return;
    
    const success = await applyPromoCode(promoInput);
    
    if (success) {
      setPromoInput('');
      setSuccessMessage(`Promo code ${promoInput} applied successfully!`);
      setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
    } else {
      setSuccessMessage('Invalid promo code. Please try again.');
      setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
    }
  };
  
  // Handle saving quote
  const handleSaveQuote = async () => {
    if (treatments.length === 0) return;
    
    const quoteId = await saveQuote();
    
    if (quoteId) {
      setSuccessMessage(`Quote saved successfully! Quote ID: ${quoteId}`);
      setTimeout(() => {
        setSuccessMessage('');
        resetQuote();
      }, 3000);
    } else {
      setSuccessMessage('Failed to save quote. Please try again.');
      setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
    }
  };
  
  return (
    <div className="persistent-quote-builder">
      <h2>Dental Treatment Quote</h2>
      
      {/* Tabs for navigation */}
      <div className="tabs">
        <div 
          className={`tab ${activeTab === 'treatments' ? 'active' : ''}`}
          onClick={() => setActiveTab('treatments')}
        >
          Treatments
        </div>
        <div 
          className={`tab ${activeTab === 'quote' ? 'active' : ''}`}
          onClick={() => setActiveTab('quote')}
        >
          Quote Summary
        </div>
      </div>
      
      {/* Treatments Tab */}
      {activeTab === 'treatments' && (
        <div className="treatments-tab">
          <h3>Available Treatments</h3>
          {treatmentsLoading ? (
            <p>Loading treatments...</p>
          ) : (
            <div className="treatments-grid">
              {availableTreatments.map(treatment => (
                <div key={treatment.id} className="treatment-card">
                  <h4>{treatment.name}</h4>
                  <p className="price">{formatCurrency(treatment.price)}</p>
                  <button 
                    type="button"
                    className="add-button"
                    onClick={() => addTreatment(treatment)}
                  >
                    Add to Quote
                  </button>
                </div>
              ))}
            </div>
          )}
          
          <div className="view-quote">
            <button 
              type="button"
              className="view-quote-button"
              onClick={() => setActiveTab('quote')}
            >
              View Quote
            </button>
          </div>
        </div>
      )}
      
      {/* Quote Summary Tab */}
      {activeTab === 'quote' && (
        <div className="quote-tab">
          <h3>Your Selected Treatments</h3>
          {treatments.length === 0 ? (
            <p>No treatments selected yet.</p>
          ) : (
            <div className="selected-treatments">
              {treatments.map(treatment => (
                <div key={treatment.id} className="treatment-row">
                  <div className="treatment-info">
                    <h4>{treatment.name}</h4>
                    <p>{formatCurrency(treatment.price)} each</p>
                  </div>
                  <div className="quantity-controls">
                    <button
                      type="button"
                      onClick={() => {
                        if (treatment.quantity > 1) {
                          updateQuantity(treatment.id, treatment.quantity - 1);
                        }
                      }}
                    >
                      -
                    </button>
                    <span>{treatment.quantity}</span>
                    <button
                      type="button"
                      onClick={() => updateQuantity(treatment.id, treatment.quantity + 1)}
                    >
                      +
                    </button>
                  </div>
                  <div className="treatment-total">
                    {formatCurrency(treatment.price * treatment.quantity)}
                  </div>
                  <button
                    type="button"
                    className="remove-button"
                    onClick={() => removeTreatment(treatment.id)}
                  >
                    Remove
                  </button>
                </div>
              ))}
            </div>
          )}
          
          {/* Promo Code Section */}
          <div className="promo-code-section">
            <h3>Promo Code</h3>
            <div className="promo-input">
              <input
                type="text"
                value={promoInput}
                onChange={(e) => setPromoInput(e.target.value)}
                placeholder="Enter promo code"
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    handleApplyPromoCode();
                  }
                }}
              />
              <button
                type="button"
                className="apply-button"
                disabled={loading.promoCode || !promoInput}
                onClick={handleApplyPromoCode}
              >
                {loading.promoCode ? 'Applying...' : 'Apply'}
              </button>
            </div>
            
            {promoCode && (
              <div className="applied-promo">
                <p>Applied: {promoCode} ({discountPercent}% off)</p>
                <button
                  type="button"
                  className="remove-button"
                  onClick={removePromoCode}
                >
                  Remove
                </button>
              </div>
            )}
          </div>
          
          {/* Quote Summary */}
          <div className="quote-summary">
            <h3>Quote Summary</h3>
            <div className="summary-row">
              <span>Subtotal:</span>
              <span>{formatCurrency(subtotal)}</span>
            </div>
            
            {discountPercent > 0 && (
              <div className="summary-row discount">
                <span>Discount ({discountPercent}%):</span>
                <span>-{formatCurrency(subtotal - total)}</span>
              </div>
            )}
            
            <div className="summary-row total">
              <span>Total:</span>
              <span>{formatCurrency(total)}</span>
            </div>
            
            <div className="quote-actions">
              <button
                type="button"
                className="continue-shopping"
                onClick={() => setActiveTab('treatments')}
              >
                Add More Treatments
              </button>
              
              <button
                type="button"
                className="save-quote"
                disabled={treatments.length === 0 || loading.saving}
                onClick={handleSaveQuote}
              >
                {loading.saving ? 'Saving...' : 'Save Quote'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Success Message */}
      {successMessage && (
        <div className="success-message">
          {successMessage}
        </div>
      )}
    </div>
  );
}
3. Add Styling
/* client/src/styles/quote-builder.css */
.persistent-quote-builder {
  max-width: 1000px;
  margin: 0 auto;
  padding: 20px;
  font-family: system-ui, -apple-system, sans-serif;
}

.persistent-quote-builder h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #2a2a2a;
}

/* Tabs */
.tabs {
  display: flex;
  border-bottom: 1px solid #e0e0e0;
  margin-bottom: 20px;
}

.tab {
  padding: 10px 20px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.tab.active {
  border-bottom: 3px solid #0066cc;
  font-weight: 600;
  color: #0066cc;
}

/* Treatments Grid */
.treatments-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 20px;
}

.treatment-card {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 15px;
  transition: all 0.2s ease;
  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.treatment-card:hover {
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  transform: translateY(-2px);
}

.treatment-card h4 {
  margin-top: 0;
  font-size: 18px;
}

.treatment-card .price {
  font-size: 20px;
  font-weight: 600;
  color: #0066cc;
  margin: 10px 0;
}

.add-button {
  width: 100%;
  padding: 8px 0;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.add-button:hover {
  background-color: #004c99;
}

/* Selected Treatments */
.selected-treatments {
  margin-top: 20px;
}

.treatment-row {
  display: flex;
  align-items: center;
  padding: 15px 0;
  border-bottom: 1px solid #e0e0e0;
}

.treatment-info {
  flex: 2;
}

.treatment-info h4 {
  margin: 0;
  font-size: 16px;
}

.treatment-info p {
  margin: 5px 0 0;
  color: #666;
}

.quantity-controls {
  display: flex;
  align-items: center;
  margin: 0 20px;
}

.quantity-controls button {
  width: 30px;
  height: 30px;
  border: 1px solid #e0e0e0;
  background-color: white;
  font-size: 16px;
  cursor: pointer;
}

.quantity-controls span {
  padding: 0 15px;
  font-weight: 600;
}

.treatment-total {
  flex: 1;
  font-weight: 600;
  text-align: right;
  margin-right: 20px;
}

.remove-button {
  padding: 5px 10px;
  background-color: #f2f2f2;
  color: #666;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.remove-button:hover {
  background-color: #e0e0e0;
}

/* Promo Code */
.promo-code-section {
  margin-top: 30px;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
}

.promo-input {
  display: flex;
  margin-top: 10px;
}

.promo-input input {
  flex: 1;
  padding: 10px;
  border: 1px solid #e0e0e0;
  border-radius: 4px 0 0 4px;
  font-size: 16px;
}

.apply-button {
  padding: 10px 20px;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
}

.apply-button:disabled {
  background-color: #a0a0a0;
  cursor: not-allowed;
}

.applied-promo {
  margin-top: 10px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 10px;
  background-color: #e6f2ff;
  border-radius: 4px;
}

.applied-promo p {
  margin: 0;
  color: #0066cc;
  font-weight: 600;
}

/* Quote Summary */
.quote-summary {
  margin-top: 30px;
  padding: 20px;
  background-color: #f9f9f9;
  border-radius: 8px;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  padding: 10px 0;
  border-bottom: 1px solid #e0e0e0;
}

.summary-row.discount {
  color: #cc0000;
}

.summary-row.total {
  border-bottom: none;
  font-size: 20px;
  font-weight: 600;
  padding-top: 15px;
}

.quote-actions {
  margin-top: 20px;
  display: flex;
  justify-content: space-between;
}

.continue-shopping {
  padding: 10px 20px;
  background-color: white;
  border: 1px solid #0066cc;
  color: #0066cc;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.continue-shopping:hover {
  background-color: #f0f7ff;
}

.save-quote {
  padding: 10px 20px;
  background-color: #00cc66;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.save-quote:hover {
  background-color: #00b359;
}

.save-quote:disabled {
  background-color: #a0a0a0;
  cursor: not-allowed;
}

/* Success Message */
.success-message {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 15px 20px;
  background-color: #00cc66;
  color: white;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  z-index: 1000;
  animation: slideIn 0.3s ease-out forwards;
}

@keyframes slideIn {
  from {
    transform: translateY(100px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* View Quote Button */
.view-quote {
  margin-top: 30px;
  text-align: center;
}

.view-quote-button {
  padding: 12px 30px;
  background-color: #0066cc;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.view-quote-button:hover {
  background-color: #004c99;
}
4. Create a Demo Page
// client/src/pages/PersistentQuotePage.tsx
import React from 'react';
import { PersistentQuoteBuilder } from '../components/quotes/PersistentQuoteBuilder';
import '../styles/quote-builder.css';

export function PersistentQuotePage() {
  return (
    <div className="page-container">
      <h1>Dental Treatment Quote</h1>
      <p className="intro">
        Build a custom quote for dental treatments. Add treatments to your quote,
        apply promo codes, and save your quote when you're ready.
      </p>
      <PersistentQuoteBuilder />
    </div>
  );
}
5. Add to Routes
// In client/src/App.tsx
import { PersistentQuotePage } from './pages/PersistentQuotePage';

// In your routes array or JSX
<Route path="/persistent-quote" element={<PersistentQuotePage />} />
Why This Solution Works
Our final solution addresses all the key issues we encountered:

Global State Management: Using Zustand keeps state outside of React's component lifecycle, preventing it from being lost during form submissions
Local Storage Persistence: Adding localStorage persistence ensures state survives even if the page refreshes
No Traditional Forms: We've eliminated <form> elements completely, preventing browser-level form submissions
Explicit Button Types: All buttons have explicit type="button" attributes
Atomic State Updates: All state changes happen through pure functions in the store
React Event Prevention: Multiple layers of event prevention with e.preventDefault() and e.stopPropagation()
Tabs for Navigation: Using tabs instead of form submissions for navigation between sections
