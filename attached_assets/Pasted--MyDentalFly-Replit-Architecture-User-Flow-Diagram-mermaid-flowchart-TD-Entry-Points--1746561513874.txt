# MyDentalFly – Replit Architecture & User Flow Diagram

```mermaid
flowchart TD
  %% Entry Points
  H(Header Quote):::entry --> W(Quote Wizard):::wizard
  SO(Special Offer Card):::entry --> |Auth check| A1[Login / Register Modal]:::auth
  PK(Treatment Package Card):::entry --> |Auth check| A1

  %% Auth branching
  A1 --\ Logged‑in? /--> J{Has profile data?}
  J -- Yes --> F1[Create Draft Quote\n(type = Offer or Package)]:::backend
  J -- No --> I(Info Page\n(personal details)):::wizard --> F1

  %% Wizard path for SO + PK
  F1 --> TQ[Treatment Quiz & Dental Chart]:::wizard
  TQ --> |Skip Results| PP(→ Patient Portal):::portal

  %% Normal wizard path
  W --> I2(Info Page):::wizard --> CR(Clinic Results):::wizard --> Sel[Select clinic]:::wizard --> PP

  %% Portal actions
  PP --> TL[Treatment Plan Review\n(bonus / package lines pinned)]:::portal
  TL --> Msg[Chat & File Upload]:::portal
  TL --> Pay[Pay £200 Deposit]:::portal

  %% Styles
  classDef entry fill:#E7F5FF,stroke:#0366d6,color:#0366d6;
  classDef wizard fill:#F0FFF4,stroke:#2f855a,color:#2f855a;
  classDef portal fill:#FFF5F0,stroke:#DD6B20,color:#DD6B20;
  classDef backend fill:#F5F5F5,stroke:#718096,color:#2D3748;
  classDef auth fill:#F0EAFB,stroke:#6B46C1,color:#6B46C1;
```

---
## How to Service Each Flow Efficiently

| Area | Recommendation | Rationale |
|------|----------------|-----------|
| **Auth & Resume** | Capture `returnTo` URL + payload (`offerId` / `packageId`) in *localStorage* before showing the login modal. After auth, POST to `/offers/:id/start` or `/packages/:id/start`, then redirect. | One universal modal—eliminates three divergent auth pages. |
| **Quote Creation** | Central server functions:<br>`createQuoteFromHeader()`<br>`createQuoteFromOffer(offerId, clinicId)`<br>`createQuoteFromPackage(packageId, clinicId)` | Keeps business rules on the back‑end; front‑end stays dumb. |
| **Wizard Re‑use** | Use a finite‑state machine (xstate) to jump over unneeded states (`Info`, `ClinicResults`) when `quote.offerId || quote.packageId` is set. | Avoids duplicating pages; easier to maintain. |
| **Portal Rendering** | Treatment Plan component reads `isBonus` / `isPackage`; pins those lines. Everything else is editable. | Same component for all three entry types. |
| **Testing** | Seed scripts create 2 clinics, 2 offers, 1 package, 1 test user. Playwright tests:<br>• Offer flow → portal review<br>• Package flow → portal review<br>• Header quote → results page | Guarantees end‑to‑end coverage without live data. |

### Alternative Approach: Split Mini‑Flows into Micro‑Frontends
* Build the **Offer & Package flows** as lightweight standalone React bundles (hosted on Cloudflare Pages) that POST to the same API and then *embed* the Patient Portal via SSO.
* Advantage: faster iterations on promotional flows without touching the heavy main app.
* Down‑side: adds deployment complexity; probably overkill until you exceed 10 k daily traffic.

For current scope, the unified wizard + FSM shortcuts is the simplest and most maintainable path.

