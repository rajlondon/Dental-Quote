1. Restore Application Navigation
First, let's implement a proper navigation system:

// client/src/components/layout/MainNavigation.tsx
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/use-auth';
import { Button } from '@/components/ui/button';

export function MainNavigation() {
  const location = useLocation();
  const { user, isAuthenticated, logout } = useAuth();
  
  return (
    <nav className="bg-white shadow-sm">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <Link to="/" className="text-xl font-bold text-blue-600">
                MyDentalFly
              </Link>
            </div>
            
            <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
              <Link 
                to="/"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  location.pathname === '/' 
                    ? 'border-blue-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Home
              </Link>
              
              <Link 
                to="/quote-builder"
                className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                  location.pathname.includes('/quote-builder') 
                    ? 'border-blue-500 text-gray-900' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Quote Builder
              </Link>
              
              {isAuthenticated && (
                <>
                  {user?.role === 'admin' && (
                    <Link 
                      to="/admin/dashboard"
                      className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                        location.pathname.includes('/admin') 
                          ? 'border-blue-500 text-gray-900' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Admin Portal
                    </Link>
                  )}
                  
                  {user?.role === 'clinic' && (
                    <Link 
                      to="/clinic/dashboard"
                      className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                        location.pathname.includes('/clinic') 
                          ? 'border-blue-500 text-gray-900' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Clinic Portal
                    </Link>
                  )}
                  
                  {user?.role === 'patient' && (
                    <Link 
                      to="/patient/dashboard"
                      className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium ${
                        location.pathname.includes('/patient') 
                          ? 'border-blue-500 text-gray-900' 
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Patient Portal
                    </Link>
                  )}
                </>
              )}
            </div>
          </div>
          
          <div className="hidden sm:ml-6 sm:flex sm:items-center">
            {isAuthenticated ? (
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-700">
                  Welcome, {user?.name}
                </span>
                <Button variant="outline" size="sm" onClick={logout}>
                  Logout
                </Button>
              </div>
            ) : (
              <Link to="/login">
                <Button size="sm">Login</Button>
              </Link>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}
2. Create a Quote Service for Saving and Managing Quotes
// client/src/services/quote-service.ts
import { toast } from '@/components/ui/use-toast';

export interface Quote {
  id: string;
  createdAt: string;
  patientName: string;
  patientEmail: string;
  treatments: any[];
  selectedPackage: any | null;
  appliedOffer: any | null;
  promoCode: string | null;
  subtotal: number;
  savings: number;
  total: number;
  status: 'pending' | 'approved' | 'completed';
  clinicId?: number;
}

class QuoteService {
  private quotes: Quote[] = [];
  
  constructor() {
    // Load quotes from localStorage
    const storedQuotes = localStorage.getItem('dental_quotes');
    if (storedQuotes) {
      try {
        this.quotes = JSON.parse(storedQuotes);
      } catch (e) {
        console.error('Failed to parse stored quotes', e);
      }
    }
  }
  
  private saveToStorage() {
    localStorage.setItem('dental_quotes', JSON.stringify(this.quotes));
  }
  
  saveQuote(quoteData: Omit<Quote, 'id' | 'createdAt' | 'status'>): Quote {
    // Create new quote object
    const newQuote: Quote = {
      ...quoteData,
      id: `quote_${Date.now()}`,
      createdAt: new Date().toISOString(),
      status: 'pending'
    };
    
    // Save to local array
    this.quotes.push(newQuote);
    this.saveToStorage();
    
    toast({
      title: "Quote Saved",
      description: "Your quote has been successfully saved.",
    });
    
    return newQuote;
  }
  
  getAllQuotes(): Quote[] {
    return [...this.quotes];
  }
  
  getQuotesByClinic(clinicId: number): Quote[] {
    return this.quotes.filter(q => q.clinicId === clinicId);
  }
  
  getQuotesByPatient(email: string): Quote[] {
    return this.quotes.filter(q => 
      q.patientEmail.toLowerCase() === email.toLowerCase()
    );
  }
  
  getQuoteById(id: string): Quote | null {
    return this.quotes.find(q => q.id === id) || null;
  }
  
  updateQuoteStatus(id: string, status: 'pending' | 'approved' | 'completed'): boolean {
    const index = this.quotes.findIndex(q => q.id === id);
    if (index !== -1) {
      this.quotes[index].status = status;
      this.saveToStorage();
      
      toast({
        title: "Quote Updated",
        description: `Quote status changed to ${status}.`,
      });
      
      return true;
    }
    
    return false;
  }
  
  assignClinic(id: string, clinicId: number): boolean {
    const index = this.quotes.findIndex(q => q.id === id);
    if (index !== -1) {
      this.quotes[index].clinicId = clinicId;
      this.saveToStorage();
      
      toast({
        title: "Clinic Assigned",
        description: "Quote has been assigned to the clinic.",
      });
      
      return true;
    }
    
    return false;
  }
}

// Create a singleton instance
export const quoteService = new QuoteService();
3. Create an Email Service for PDF Generation and Sending
// client/src/services/email-service.ts
import { toast } from '@/components/ui/use-toast';
import { Quote } from './quote-service';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

class EmailService {
  async sendQuoteEmail(quote: Quote): Promise<boolean> {
    try {
      // Generate PDF content
      const pdfBase64 = await this.generateQuotePDF(quote);
      
      // In a real app, this would call your backend API
      // For demo purposes, we'll simulate sending an email
      console.log(`Sending email to ${quote.patientEmail} with quote ${quote.id}`);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "Email Sent",
        description: `Quote has been emailed to ${quote.patientEmail}`,
      });
      
      return true;
    } catch (error) {
      console.error('Error sending quote email:', error);
      
      toast({
        title: "Email Failed",
        description: "There was an error sending the email.",
        variant: "destructive",
      });
      
      return false;
    }
  }
  
  async startEmailSequence(quote: Quote): Promise<boolean> {
    try {
      // In a real app, this would call your backend API to start an email sequence
      console.log(`Starting email sequence for ${quote.patientEmail} with quote ${quote.id}`);
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 800));
      
      toast({
        title: "Sequence Started",
        description: `Email sequence has been started for ${quote.patientEmail}`,
      });
      
      // Store sequence data in localStorage for demo purposes
      const sequences = JSON.parse(localStorage.getItem('email_sequences') || '[]');
      sequences.push({
        quoteId: quote.id,
        patientEmail: quote.patientEmail,
        patientName: quote.patientName,
        startedAt: new Date().toISOString(),
        steps: [
          { days: 1, template: 'followup_1', sent: false },
          { days: 3, template: 'followup_2', sent: false },
          { days: 7, template: 'followup_final', sent: false }
        ]
      });
      localStorage.setItem('email_sequences', JSON.stringify(sequences));
      
      return true;
    } catch (error) {
      console.error('Error starting email sequence:', error);
      
      toast({
        title: "Sequence Failed",
        description: "There was an error starting the email sequence.",
        variant: "destructive",
      });
      
      return false;
    }
  }
  
  private async generateQuotePDF(quote: Quote): Promise<string> {
    // Create a new PDF document
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.text('Dental Treatment Quote', 105, 20, { align: 'center' });
    
    // Add patient info
    doc.setFontSize(12);
    doc.text(`Patient: ${quote.patientName}`, 20, 40);
    doc.text(`Email: ${quote.patientEmail}`, 20, 48);
    doc.text(`Date: ${new Date(quote.createdAt).toLocaleDateString()}`, 20, 56);
    doc.text(`Quote #: ${quote.id}`, 20, 64);
    
    // Add treatments table
    doc.setFontSize(14);
    doc.text('Treatment Details', 20, 80);
    
    const tableData = [];
    
    if (quote.selectedPackage) {
      tableData.push([
        quote.selectedPackage.name,
        quote.selectedPackage.description || '',
        `£${quote.selectedPackage.price.toFixed(2)}`
      ]);
    } else if (quote.treatments && quote.treatments.length) {
      quote.treatments.forEach(treatment => {
        tableData.push([
          treatment.name,
          treatment.description || '',
          `£${treatment.price.toFixed(2)}`
        ]);
      });
    }
    
    // @ts-ignore - jsPDF-autotable adds this method
    doc.autoTable({
      startY: 85,
      head: [['Treatment', 'Description', 'Price']],
      body: tableData,
      theme: 'grid',
      headStyles: { fillColor: [66, 139, 202] }
    });
    
    const finalY = (doc as any).lastAutoTable.finalY + 10;
    
    // Add special offers and promo codes
    if (quote.appliedOffer) {
      doc.text(`Special Offer: ${quote.appliedOffer.title}`, 20, finalY + 10);
    }
    
    if (quote.promoCode) {
      doc.text(`Promo Code: ${quote.promoCode}`, 20, finalY + 20);
    }
    
    // Add pricing summary
    doc.setFontSize(12);
    doc.text(`Subtotal: £${quote.subtotal.toFixed(2)}`, 140, finalY + 30);
    
    if (quote.savings > 0) {
      doc.text(`Savings: £${quote.savings.toFixed(2)}`, 140, finalY + 38);
    }
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(`Total: £${quote.total.toFixed(2)}`, 140, finalY + 48);
    
    // Return as base64 string
    return doc.output('datauristring');
  }
}

// Create a singleton instance
export const emailService = new EmailService();
4. Update the Quote Builder to Save Quotes and Send Emails
Add these functions to your quote builder component:

// In your quote builder component
import { quoteService } from '../../services/quote-service';
import { emailService } from '../../services/email-service';
import { useToast } from '@/components/ui/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

// Add state variables
const { toast } = useToast();
const [patientInfo, setPatientInfo] = useState({ name: '', email: '' });
const [showPatientForm, setShowPatientForm] = useState(false);
const [isSaving, setIsSaving] = useState(false);
const [isSendingEmail, setIsSendingEmail] = useState(false);
const [savedQuote, setSavedQuote] = useState(null);

// Add functions
const handleSaveQuote = async () => {
  if (!patientInfo.name || !patientInfo.email) {
    setShowPatientForm(true);
    return;
  }
  
  setIsSaving(true);
  try {
    // Save the quote
    const newQuote = quoteService.saveQuote({
      patientName: patientInfo.name,
      patientEmail: patientInfo.email,
      treatments: quote.treatments,
      selectedPackage: quote.selectedPackage,
      appliedOffer: quote.appliedOffer,
      promoCode: quote.promoCode,
      subtotal: totals.subtotal,
      savings: totals.savings,
      total: totals.total
    });
    
    setSavedQuote(newQuote);
    toast({
      title: 'Quote Saved',
      description: 'Your quote has been saved successfully.'
    });
  } catch (error) {
    console.error('Error saving quote:', error);
    toast({
      title: 'Save Failed',
      description: 'There was an error saving your quote.',
      variant: 'destructive',
    });
  } finally {
    setIsSaving(false);
  }
};

const handleSendEmail = async () => {
  if (!savedQuote) {
    toast({
      title: 'Save First',
      description: 'Please save the quote before sending an email.',
      variant: 'warning',
    });
    return;
  }
  
  setIsSendingEmail(true);
  try {
    await emailService.sendQuoteEmail(savedQuote);
  } finally {
    setIsSendingEmail(false);
  }
};

const handleStartEmailSequence = async () => {
  if (!savedQuote) {
    toast({
      title: 'Save First',
      description: 'Please save the quote before starting an email sequence.',
      variant: 'warning',
    });
    return;
  }
  
  await emailService.startEmailSequence(savedQuote);
};

// Add buttons to your quote summary section
<div className="mt-4 space-y-2">
  <Button 
    className="w-full" 
    onClick={handleSaveQuote}
    disabled={isSaving}
  >
    {isSaving ? 'Saving...' : 'Save Quote'}
  </Button>
  
  {savedQuote && (
    <>
      <Button 
        className="w-full" 
        variant="outline"
        onClick={handleSendEmail}
        disabled={isSendingEmail}
      >
        {isSendingEmail ? 'Sending...' : 'Email Quote to Patient'}
      </Button>
      
      <Button 
        className="w-full" 
        variant="outline"
        onClick={handleStartEmailSequence}
      >
        Start Email Sequence
      </Button>
    </>
  )}
</div>

// Add patient information dialog
<Dialog open={showPatientForm} onOpenChange={setShowPatientForm}>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Patient Information</DialogTitle>
    </DialogHeader>
    <div className="space-y-4 py-2">
      <div className="space-y-2">
        <label className="text-sm font-medium">Full Name</label>
        <input
          className="w-full p-2 border rounded-md"
          value={patientInfo.name}
          onChange={(e) => setPatientInfo({ ...patientInfo, name: e.target.value })}
          placeholder="Enter patient name"
        />
      </div>
      <div className="space-y-2">
        <label className="text-sm font-medium">Email</label>
        <input
          className="w-full p-2 border rounded-md"
          type="email"
          value={patientInfo.email}
          onChange={(e) => setPatientInfo({ ...patientInfo, email: e.target.value })}
          placeholder="Enter patient email"
        />
      </div>
    </div>
    <div className="flex justify-end gap-2">
      <Button variant="outline" onClick={() => setShowPatientForm(false)}>
        Cancel
      </Button>
      <Button 
        onClick={() => {
          if (patientInfo.name && patientInfo.email) {
            setShowPatientForm(false);
            handleSaveQuote();
          }
        }}
        disabled={!patientInfo.name || !patientInfo.email}
      >
        Continue
      </Button>
    </div>
  </DialogContent>
</Dialog>
5. Create Quote List Components for Portals
// client/src/components/quotes/QuoteList.tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { quoteService } from '../../services/quote-service';
import { emailService } from '../../services/email-service';
import { useToast } from '@/components/ui/use-toast';

interface QuoteListProps {
  portalType: 'admin' | 'clinic' | 'patient';
  quotes: any[];
  onRefresh?: () => void;
}

export function QuoteList({ portalType, quotes, onRefresh }: QuoteListProps) {
  const { toast } = useToast();
  const [isSendingEmail, setIsSendingEmail] = useState<{[key: string]: boolean}>({});
  
  const handleSendEmail = async (quote: any) => {
    setIsSendingEmail(prev => ({ ...prev, [quote.id]: true }));
    
    try {
      await emailService.sendQuoteEmail(quote);
    } finally {
      setIsSendingEmail(prev => ({ ...prev, [quote.id]: false }));
    }
  };
  
  const handleStartEmailSequence = async (quote: any) => {
    await emailService.startEmailSequence(quote);
  };
  
  const handleUpdateStatus = (quoteId: string, status: 'pending' | 'approved' | 'completed') => {
    quoteService.updateQuoteStatus(quoteId, status);
    if (onRefresh) onRefresh();
  };
  
  const handleAssignClinic = (quoteId: string, clinicId: number) => {
    quoteService.assignClinic(quoteId, clinicId);
    if (onRefresh) onRefresh();
  };
  
  return (
    <div className="space-y-4">
      {quotes.length === 0 ? (
        <Card>
          <CardContent className="pt-6 text-center text-gray-500">
            No quotes found
          </CardContent>
        </Card>
      ) : (
        quotes.map(quote => (
          <Card key={quote.id}>
            <CardHeader className="pb-2">
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="text-lg">{quote.patientName}</CardTitle>
                  <div className="text-sm text-gray-500">{quote.patientEmail}</div>
                </div>
                <Badge variant={
                  quote.status === 'pending' ? 'secondary' :
                  quote.status === 'approved' ? 'primary' : 'success'
                }>
                  {quote.status.charAt(0).toUpperCase() + quote.status.slice(1)}
                </Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <div className="text-sm font-medium text-gray-500">Created</div>
                    <div>{new Date(quote.createdAt).toLocaleString()}</div>
                  </div>
                  <div>
                    <div className="text-sm font-medium text-gray-500">Total</div>
                    <div className="text-lg font-bold">£{quote.total.toFixed(2)}</div>
                    {quote.savings > 0 && (
                      <div className="text-sm text-green-600">Savings: £{quote.savings.toFixed(2)}</div>
                    )}
                  </div>
                </div>
                
                <div className="pt-2 border-t">
                  <div className="text-sm font-medium text-gray-500 mb-1">Quote Details</div>
                  <div className="space-y-1">
                    {quote.selectedPackage ? (
                      <div className="text-sm">
                        <span className="font-medium">Package:</span> {quote.selectedPackage.name}
                      </div>
                    ) : quote.treatments && quote.treatments.length > 0 ? (
                      <div className="text-sm">
                        <span className="font-medium">Treatments:</span> {quote.treatments.map((t: any) => t.name).join(', ')}
                      </div>
                    ) : null}
                    
                    {quote.appliedOffer && (
                      <div className="text-sm">
                        <span className="font-medium">Special Offer:</span> {quote.appliedOffer.title}
                      </div>
                    )}
                    
                    {quote.promoCode && (
                      <div className="text-sm">
                        <span className="font-medium">Promo Code:</span> {quote.promoCode}
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="flex flex-wrap gap-2 pt-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleSendEmail(quote)}
                    disabled={isSendingEmail[quote.id]}
                  >
                    {isSendingEmail[quote.id] ? 'Sending...' : 'Email Quote'}
                  </Button>
                  
                  {(portalType === 'admin' || portalType === 'clinic') && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleStartEmailSequence(quote)}
                    >
                      Start Email Sequence
                    </Button>
                  )}
                  
                  {(portalType === 'admin' || portalType === 'clinic') && quote.status === 'pending' && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleUpdateStatus(quote.id, 'approved')}
                    >
                      Approve
                    </Button>
                  )}
                  
                  {(portalType === 'admin' || portalType === 'clinic') && quote.status === 'approved' && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleUpdateStatus(quote.id, 'completed')}
                    >
                      Mark Completed
                    </Button>
                  )}
                  
                  {portalType === 'admin' && !quote.clinicId && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleAssignClinic(quote.id, 1)}
                    >
                      Assign to Clinic
                    </Button>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))
      )}
    </div>
  );
}
6. Create Portal Dashboard Pages
// client/src/pages/admin/AdminDashboard.tsx
import React, { useState, useEffect } from 'react';
import { QuoteList } from '../../components/quotes/QuoteList';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { quoteService } from '../../services/quote-service';
import { MainNavigation } from '../../components/layout/MainNavigation';

export default function AdminDashboard() {
  const [quotes, setQuotes] = useState([]);
  
  const loadQuotes = () => {
    const allQuotes = quoteService.getAllQuotes();
    setQuotes(allQuotes);
  };
  
  useEffect(() => {
    loadQuotes();
  }, []);
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Admin Dashboard</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Quotes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{quotes.length}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Pending Approval</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {quotes.filter(q => q.status === 'pending').length}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Value</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                £{quotes.reduce((sum, q) => sum + q.total, 0).toFixed(2)}
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-4">Recent Quotes</h2>
          <QuoteList 
            portalType="admin" 
            quotes={quotes} 
            onRefresh={loadQuotes} 
          />
        </div>
      </div>
    </div>
  );
}

// client/src/pages/clinic/ClinicDashboard.tsx
import React, { useState, useEffect } from 'react';
import { QuoteList } from '../../components/quotes/QuoteList';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { quoteService } from '../../services/quote-service';
import { MainNavigation } from '../../components/layout/MainNavigation';

export default function ClinicDashboard() {
  const [quotes, setQuotes] = useState([]);
  const clinicId = 1; // In a real app, this would come from user context
  
  const loadQuotes = () => {
    const clinicQuotes = quoteService.getQuotesByClinic(clinicId);
    setQuotes(clinicQuotes);
  };
  
  useEffect(() => {
    loadQuotes();
  }, []);
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Clinic Dashboard</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Clinic Quotes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{quotes.length}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Pending Approval</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {quotes.filter(q => q.status === 'pending').length}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Clinic Revenue</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                £{quotes.reduce((sum, q) => sum + q.total, 0).toFixed(2)}
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-4">Clinic Quotes</h2>
          <QuoteList 
            portalType="clinic" 
            quotes={quotes} 
            onRefresh={loadQuotes} 
          />
        </div>
      </div>
    </div>
  );
}

// client/src/pages/patient/PatientDashboard.tsx
import React, { useState, useEffect } from 'react';
import { QuoteList } from '../../components/quotes/QuoteList';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { quoteService } from '../../services/quote-service';
import { useAuth } from '../../hooks/use-auth';
import { MainNavigation } from '../../components/layout/MainNavigation';

export default function PatientDashboard() {
  const [quotes, setQuotes] = useState([]);
  const { user } = useAuth();
  
  const loadQuotes = () => {
    if (user?.email) {
      const patientQuotes = quoteService.getQuotesByPatient(user.email);
      setQuotes(patientQuotes);
    }
  };
  
  useEffect(() => {
    loadQuotes();
  }, [user?.email]);
  
  return (
    <div className="min-h-screen bg-gray-50">
      <MainNavigation />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Patient Dashboard</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Your Quotes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{quotes.length}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Latest Quote</CardTitle>
            </CardHeader>
            <CardContent>
              {quotes.length > 0 ? (
                <div>
                  <div className="text-lg font-bold">£{quotes[0].total.toFixed(2)}</div>
                  <div className="text-sm text-gray-500">
                    {new Date(quotes[0].createdAt).toLocaleDateString()}
                  </div>
                </div>
              ) : (
                <div className="text-gray-500">No quotes yet</div>
              )}
            </CardContent>
          </Card>
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-4">Your Quotes</h2>
          <QuoteList 
            portalType="patient" 
            quotes={quotes} 
            onRefresh={loadQuotes} 
          />
        </div>
      </div>
    </div>
  );
}
7. Update App.tsx with Routes
// client/src/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { RequireAuth } from './components/auth/RequireAuth';
import { Toaster } from '@/components/ui/toaster';

// Public pages
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import QuoteBuilder from './pages/QuoteBuilder';

// Admin pages
import AdminDashboard from './pages/admin/AdminDashboard';
import AdminQuotes from './pages/admin/AdminQuotes';

// Clinic pages
import ClinicDashboard from './pages/clinic/ClinicDashboard';
import ClinicQuotes from './pages/clinic/ClinicQuotes';

// Patient pages
import PatientDashboard from './pages/patient/PatientDashboard';
import PatientQuotes from './pages/patient/PatientQuotes';

function App() {
  return (
    <Router>
      <AuthProvider>
        <Routes>
          {/* Public routes */}
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/quote-builder" element={<QuoteBuilder />} />
          
          {/* Admin routes */}
          <Route path="/admin/dashboard" element={
            <RequireAuth allowedRoles={['admin']}>
              <AdminDashboard />
            </RequireAuth>
          } />
          <Route path="/admin/quotes" element={
            <RequireAuth allowedRoles={['admin']}>
              <AdminQuotes />
            </RequireAuth>
          } />
          
          {/* Clinic routes */}
          <Route path="/clinic/dashboard" element={
            <RequireAuth allowedRoles={['clinic']}>
              <ClinicDashboard />
            </RequireAuth>
          } />
          <Route path="/clinic/quotes" element={
            <RequireAuth allowedRoles={['clinic']}>
              <ClinicQuotes />
            </RequireAuth>
          } />
          
          {/* Patient routes */}
          <Route path="/patient/dashboard" element={
            <RequireAuth allowedRoles={['patient']}>
              <PatientDashboard />
            </RequireAuth>
          } />
          <Route path="/patient/quotes" element={
            <RequireAuth allowedRoles={['patient']}>
              <PatientQuotes />
            </RequireAuth>
          } />
          
          {/* Fallback route */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
        <Toaster />
      </AuthProvider>
    </Router>
  );
}

export default App;
8. Create RequireAuth Component for Protected Routes
// client/src/components/auth/RequireAuth.tsx
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/use-auth';

interface RequireAuthProps {
  children: React.ReactNode;
  allowedRoles: string[];
}

export function RequireAuth({ children, allowedRoles }: RequireAuthProps) {
  const { user, isAuthenticated } = useAuth();
  const location = useLocation();
  
  if (!isAuthenticated) {
    // Redirect to login page but save the location they were trying to access
    return <Navigate to="/login" state={{ from: location }} replace />;
  }
  
  if (!allowedRoles.includes(user?.role || '')) {
    // User is logged in but doesn't have the required role
    return <Navigate to="/" replace />;
  }
  
  return <>{children}</>;
}
Summary of Implementation
This implementation provides:

Application Navigation

Main navigation component that adapts based on user role
Proper routing between different sections of the application
Protected routes with role-based access control
Quote Management System

Save quotes with patient information
Populate quotes in appropriate portals (admin, clinic, patient)
Update quote status and assign to clinics
Email Functionality

Send PDF quotes via email
Start email sequences for follow-up communication
Track quote status and email history
Portal Population

Admin portal shows all quotes
Clinic portal shows quotes assigned to that clinic
Patient portal shows quotes for that patient
Dashboard statistics for each portal type