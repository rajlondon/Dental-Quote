A server-side issue where the API response is replacing the entire quote object
A state management issue where React's state updates are not preserving the treatments
A component re-rendering issue causing the treatments to be reset
Direct Implementation Solution
Let's create a completely isolated implementation that uses the most basic React patterns to ensure state preservation:

// QuickQuoteIsolated.tsx - A completely isolated implementation

import React, { useState, useEffect, useCallback } from 'react';
import { toast } from 'react-hot-toast';
import axios from 'axios';

// Define types
interface Treatment {
  id: string;
  name: string;
  price: number;
  description?: string;
}

const QuickQuoteIsolated = () => {
  // Completely separate state variables with no dependencies between them
  const [availableTreatments, setAvailableTreatments] = useState<Treatment[]>([]);
  const [selectedTreatments, setSelectedTreatments] = useState<Treatment[]>([]);
  const [promoCode, setPromoCode] = useState<string>('');
  const [appliedPromoCode, setAppliedPromoCode] = useState<string | null>(null);
  const [discount, setDiscount] = useState<number>(0);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isApplyingPromo, setIsApplyingPromo] = useState<boolean>(false);
  
  // Calculate totals without affecting state
  const subtotal = selectedTreatments.reduce((sum, t) => sum + t.price, 0);
  const total = subtotal - discount;
  
  // Fetch available treatments on component mount
  useEffect(() => {
    const fetchTreatments = async () => {
      setIsLoading(true);
      try {
        const response = await axios.get('/api/treatments');
        setAvailableTreatments(response.data);
      } catch (error) {
        console.error('Error fetching treatments:', error);
        toast.error('Failed to load treatments');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchTreatments();
  }, []);
  
  // Toggle treatment selection
  const toggleTreatment = (treatment: Treatment) => {
    console.log('[QuickQuoteIsolated] Toggling treatment:', treatment.name);
    
    setSelectedTreatments(prev => {
      const exists = prev.some(t => t.id === treatment.id);
      
      if (exists) {
        // Remove treatment
        return prev.filter(t => t.id !== treatment.id);
      } else {
        // Add treatment
        return [...prev, treatment];
      }
    });
  };
  
  // Handle promo code input change
  const handlePromoCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPromoCode(e.target.value);
  };
  
  // Apply promo code - completely separate from treatment state
  const applyPromoCode = async () => {
    if (!promoCode.trim()) {
      toast.error('Please enter a promo code');
      return;
    }
    
    // Create a local copy of selected treatments for reference
    const currentTreatments = [...selectedTreatments];
    console.log('[QuickQuoteIsolated] Current treatments before promo:', currentTreatments.length);
    
    setIsApplyingPromo(true);
    try {
      // Simulate API call - replace with actual API call
      const response = await new Promise<{success: boolean, discountType: string, discountValue: number}>(resolve => {
        setTimeout(() => {
          // Simulate a successful response for testing
          if (promoCode.toUpperCase() === 'DENTAL10') {
            resolve({
              success: true,
              discountType: 'percentage',
              discountValue: 10
            });
          } else if (promoCode.toUpperCase() === 'SMILE20') {
            resolve({
              success: true,
              discountType: 'fixed',
              discountValue: 20
            });
          } else {
            throw new Error('Invalid promo code');
          }
        }, 500);
      });
      
      // Calculate discount
      let calculatedDiscount = 0;
      if (response.discountType === 'percentage') {
        calculatedDiscount = (subtotal * response.discountValue / 100);
      } else if (response.discountType === 'fixed') {
        calculatedDiscount = response.discountValue;
      }
      
      // Ensure discount doesn't exceed subtotal
      calculatedDiscount = Math.min(calculatedDiscount, subtotal);
      
      // Update ONLY the promo code and discount state
      setAppliedPromoCode(promoCode);
      setDiscount(calculatedDiscount);
      
      // Clear the input
      setPromoCode('');
      
      // Log state after updates
      console.log('[QuickQuoteIsolated] Promo applied successfully');
      console.log('[QuickQuoteIsolated] Discount:', calculatedDiscount);
      console.log('[QuickQuoteIsolated] Selected treatments after promo:', selectedTreatments.length);
      
      // Show success message with a delay
      setTimeout(() => {
        toast.success(`Promo code applied! Discount: $${calculatedDiscount.toFixed(2)}`);
      }, 100);
      
    } catch (error) {
      console.error('[QuickQuoteIsolated] Error applying promo code:', error);
      toast.error(error.message || 'Failed to apply promo code');
    } finally {
      setIsApplyingPromo(false);
    }
  };
  
  // Remove promo code
  const removePromoCode = () => {
    setAppliedPromoCode(null);
    setDiscount(0);
    toast.success('Promo code removed');
  };
  
  // Debug component
  const DebugInfo = () => (
    <div className="mt-4 p-3 border border-gray-200 rounded bg-gray-50 text-xs">
      <h4 className="font-medium">Debug Info:</h4>
      <div className="mt-1 space-y-1">
        <div>Selected Treatments: {selectedTreatments.length}</div>
        <div>Treatment IDs: {selectedTreatments.map(t => t.id).join(', ')}</div>
        <div>Promo Code: {appliedPromoCode || 'None'}</div>
        <div>Discount: ${discount.toFixed(2)}</div>
        <div>Subtotal: ${subtotal.toFixed(2)}</div>
        <div>Total: ${total.toFixed(2)}</div>
      </div>
    </div>
  );
  
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Quick Quote (Isolated Implementation)</h1>
      
      {/* Treatment selection */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h2 className="text-xl font-semibold mb-3">Available Treatments</h2>
          {isLoading ? (
            <p>Loading treatments...</p>
          ) : (
            <div className="space-y-2">
              {availableTreatments.map(treatment => (
                <div 
                  key={treatment.id} 
                  className={`p-3 border rounded cursor-pointer ${
                    selectedTreatments.some(t => t.id === treatment.id) 
                      ? 'bg-blue-50 border-blue-300' 
                      : 'border-gray-200'
                  }`}
                  onClick={() => toggleTreatment(treatment)}
                >
                  <div className="flex justify-between">
                    <span className="font-medium">{treatment.name}</span>
                    <span>${treatment.price.toFixed(2)}</span>
                  </div>
                  {treatment.description && (
                    <p className="text-sm text-gray-600 mt-1">{treatment.description}</p>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
        
        <div>
          <h2 className="text-xl font-semibold mb-3">Your Quote</h2>
          
          {/* Selected treatments */}
          <div className="mb-4">
            <h3 className="font-medium mb-2">Selected Treatments</h3>
            {selectedTreatments.length === 0 ? (
              <p className="text-gray-500">No treatments selected</p>
            ) : (
              <div className="space-y-2">
                {selectedTreatments.map(treatment => (
                  <div key={treatment.id} className="flex justify-between p-2 border-b">
                    <span>{treatment.name}</span>
                    <span>${treatment.price.toFixed(2)}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          {/* Promo code */}
          <div className="mb-4">
            <h3 className="font-medium mb-2">Promo Code</h3>
            {appliedPromoCode ? (
              <div className="flex items-center justify-between p-2 bg-green-50 border border-green-200 rounded">
                <div>
                  <span className="font-medium">{appliedPromoCode}</span>
                  <span className="ml-2 text-green-600">-${discount.toFixed(2)}</span>
                </div>
                <button
                  className="text-sm text-red-500 hover:text-red-700"
                  onClick={removePromoCode}
                >
                  Remove
                </button>
              </div>
            ) : (
              <div className="flex">
                <input
                  type="text"
                  value={promoCode}
                  onChange={handlePromoCodeChange}
                  className="flex-1 p-2 border border-gray-300 rounded-l"
                  placeholder="Enter promo code"
                />
                <button
                  className="px-4 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600 disabled:bg-blue-300"
                  onClick={applyPromoCode}
                  disabled={isApplyingPromo || !promoCode.trim()}
                >
                  {isApplyingPromo ? 'Applying...' : 'Apply'}
                </button>
              </div>
            )}
          </div>
          
          {/* Summary */}
          <div className="mt-6 p-4 bg-gray-50 rounded">
            <div className="flex justify-between mb-2">
              <span>Subtotal:</span>
              <span>${subtotal.toFixed(2)}</span>
            </div>
            {discount > 0 && (
              <div className="flex justify-between mb-2 text-green-600">
                <span>Discount:</span>
                <span>-${discount.toFixed(2)}</span>
              </div>
            )}
            <div className="flex justify-between font-bold text-lg">
              <span>Total:</span>
              <span>${total.toFixed(2)}</span>
            </div>
          </div>
          
          {/* Debug info */}
          <DebugInfo />
        </div>
      </div>
    </div>
  );
};

export default QuickQuoteIsolated;