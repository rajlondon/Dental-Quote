// server/services/promo-code-service.ts
import { db } from '../db';
import { eq } from 'drizzle-orm';
import { promoCodes } from '../db/schema';
import { treatmentService } from './treatment-service';

export const promoCodeService = {
  // Validate a promo code
  async validateCode(code: string) {
    // Normalize code to uppercase for case-insensitive comparison
    const normalizedCode = code.toUpperCase();
    
    try {
      // Find the promo code in the database
      const promoCode = await db.query.promoCodes.findFirst({
        where: eq(promoCodes.code, normalizedCode)
      });
      
      // If code doesn't exist
      if (!promoCode) {
        return {
          valid: false,
          error: 'Invalid promo code'
        };
      }
      
      // Check if code is active
      if (!promoCode.isActive) {
        return {
          valid: false,
          error: 'This promo code is no longer active'
        };
      }
      
      // Check if code has expired
      if (promoCode.expiresAt && new Date(promoCode.expiresAt) < new Date()) {
        return {
          valid: false,
          error: 'This promo code has expired'
        };
      }
      
      // Check if code has reached maximum uses
      if (promoCode.maxUses && promoCode.currentUses >= promoCode.maxUses) {
        return {
          valid: false,
          error: 'This promo code has reached its maximum number of uses'
        };
      }
      
      // Code is valid
      return {
        valid: true,
        code: promoCode.code,
        discountType: promoCode.discountType,
        discountValue: promoCode.discountValue
      };
    } catch (error) {
      console.error('Error validating promo code:', error);
      return {
        valid: false,
        error: 'An error occurred while validating the promo code'
      };
    }
  },
  
  // Calculate discount for a valid promo code
  async calculateDiscount({ code, discountType, discountValue, treatmentIds }) {
    try {
      // Get treatment details to calculate original total
      const treatments = await treatmentService.getTreatmentsByIds(treatmentIds);
      
      // Calculate original total
      const originalTotal = treatments.reduce((sum, t) => sum + t.price, 0);
      
      // Calculate discount amount based on discount type
      let discountAmount = 0;
      
      if (discountType === 'percentage') {
        // For percentage discount, calculate percentage of original total
        discountAmount = (originalTotal * (discountValue / 100));
      } else if (discountType === 'fixed_amount') {
        // For fixed amount, use the discount value directly
        discountAmount = discountValue;
      }
      
      // Ensure discount doesn't exceed original total
      discountAmount = Math.min(discountAmount, originalTotal);
      
      // Calculate new total after discount
      const newTotal = originalTotal - discountAmount;
      
      return {
        discountAmount,
        originalTotal,
        newTotal
      };
    } catch (error) {
      console.error('Error calculating discount:', error);
      throw new Error('Failed to calculate discount');
    }
  },
  
  // Increment usage count for a promo code
  async incrementUsage(code: string) {
    try {
      const normalizedCode = code.toUpperCase();
      
      await db.update(promoCodes)
        .set({ 
          currentUses: db.raw('current_uses + 1')
        })
        .where(eq(promoCodes.code, normalizedCode));
      
      return true;
    } catch (error) {
      console.error('Error incrementing promo code usage:', error);
      return false;
    }
  }
};
