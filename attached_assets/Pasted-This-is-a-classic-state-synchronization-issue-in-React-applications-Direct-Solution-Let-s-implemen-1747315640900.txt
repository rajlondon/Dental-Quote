This is a classic state synchronization issue in React applications.

Direct Solution
Let's implement a focused fix for the applyPromoCode function in use-quote-builder.ts:

// client/src/hooks/use-quote-builder.ts - Replace the existing applyPromoCode function

const applyPromoCode = async (code: string) => {
  try {
    setIsLoading(true);
    
    // Log initial state for debugging
    console.log("[PromoCode] Starting with quote:", JSON.stringify({
      subtotal: quote.subtotal,
      total: quote.total,
      treatments: quote.treatments.length
    }));
    
    // API request to validate promo code
    const response = await fetch(`/api/promo/validate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        code,
        subtotal: quote.subtotal,
        treatments: quote.treatments 
      })
    });
    
    if (!response.ok) {
      throw new Error('Invalid promo code');
    }
    
    const data = await response.json();
    console.log("[PromoCode] API response:", data);
    
    // Calculate discount amount
    let calculatedDiscount = 0;
    if (data.discountType === 'percentage') {
      calculatedDiscount = Math.round((quote.subtotal * data.discountValue / 100) * 100) / 100;
      console.log(`[PromoCode] Calculating ${data.discountValue}% discount on ${quote.subtotal} = ${calculatedDiscount}`);
    } else {
      calculatedDiscount = data.discountValue;
      console.log(`[PromoCode] Applying fixed discount of ${calculatedDiscount}`);
    }
    
    // Calculate new total
    const newTotal = Math.max(0, quote.subtotal - calculatedDiscount);
    console.log(`[PromoCode] New total: ${quote.subtotal} - ${calculatedDiscount} = ${newTotal}`);
    
    // IMPORTANT: Update quote with new values
    const updatedQuote = {
      ...quote,
      promoCode: code,
      promoDiscount: calculatedDiscount,
      total: newTotal
    };
    
    // Set the updated quote
    setQuote(updatedQuote);
    
    // Log the update for debugging
    console.log("[PromoCode] Updated quote:", JSON.stringify({
      subtotal: updatedQuote.subtotal,
      promoDiscount: updatedQuote.promoDiscount,
      total: updatedQuote.total
    }));
    
    // Show success toast after state is updated
    toast.success(`Promo code ${code} applied! Discount: $${calculatedDiscount.toFixed(2)}`);
    
    return true;
  } catch (error) {
    console.error("[PromoCode] Error:", error);
    toast.error(`Failed to apply promo code: ${error.message}`);
    return false;
  } finally {
    setIsLoading(false);
  }
};
Endpoint Check
Ensure the promo code validation endpoint is working correctly:

// server/routes/test-quote-data-routes.ts - Update or add this endpoint

router.post('/validate', (req, res) => {
  const { code } = req.body;
  
  // Log the request for debugging
  console.log(`[Server] Validating promo code: ${code}`);
  
  // Find the promo code in our mock data
  const promoCode = MOCK_PROMO_CODES.find(p => p.code === code);
  
  if (!promoCode) {
    console.log(`[Server] Promo code not found: ${code}`);
    return res.status(404).json({ error: 'Invalid promo code' });
  }
  
  // Return the promo code details
  console.log(`[Server] Promo code valid: ${JSON.stringify(promoCode)}`);
  return res.json(promoCode);
});
Simplify the Test UI
Create a mini test component that focuses only on the promo code functionality:

// client/src/components/QuotePromoTest.jsx

import React, { useState } from 'react';
import { toast } from 'react-hot-toast';

const QuotePromoTest = () => {
  const [quote, setQuote] = useState({
    treatments: [
      { id: 1, name: 'Dental Implant', price: 1500, quantity: 1 },
      { id: 2, name: 'Teeth Whitening', price: 600, quantity: 1 }
    ],
    subtotal: 2100,
    promoCode: null,
    promoDiscount: 0,
    total: 2100
  });
  
  const [promoCode, setPromoCode] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const applyPromoCode = async (code) => {
    try {
      setIsLoading(true);
      
      // Log initial state
      console.log("Starting with quote:", quote);
      
      // Simulate API request
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Simulate response for testing
      // In real implementation, this would be an API call
      const discountType = 'percentage';
      const discountValue = code === 'IMPLANT30' ? 30 : 10;
      
      // Calculate discount
      const calculatedDiscount = Math.round((quote.subtotal * discountValue / 100) * 100) / 100;
      
      // Calculate new total
      const newTotal = Math.max(0, quote.subtotal - calculatedDiscount);
      
      // Update quote with new values
      const updatedQuote = {
        ...quote,
        promoCode: code,
        promoDiscount: calculatedDiscount,
        total: newTotal
      };
      
      // Set the updated quote
      setQuote(updatedQuote);
      
      // Log the update
      console.log("Updated quote:", updatedQuote);
      
      // Show success toast
      toast.success(`Promo code ${code} applied! Discount: $${calculatedDiscount.toFixed(2)}`);
      
      return true;
    } catch (error) {
      console.error("Error:", error);
      toast.error(`Failed to apply promo code: ${error.message}`);
      return false;
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!promoCode.trim()) {
      toast.error('Please enter a promo code');
      return;
    }
    applyPromoCode(promoCode);
  };
  
  return (
    <div className="p-4 max-w-md mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-xl font-bold mb-4">Quote Promo Test</h2>
      
      <div className="mb-4 p-3 bg-gray-50 rounded">
        <div className="font-medium">Quote Summary</div>
        <div className="grid grid-cols-2 gap-2 mt-2">
          <div>Subtotal:</div>
          <div className="text-right">${quote.subtotal.toFixed(2)}</div>
          
          {quote.promoDiscount > 0 && (
            <>
              <div>Promo Discount:</div>
              <div className="text-right text-green-600">-${quote.promoDiscount.toFixed(2)}</div>
            </>
          )}
          
          <div className="font-bold">Total:</div>
          <div className="text-right font-bold">${quote.total.toFixed(2)}</div>
        </div>
      </div>
      
      <form onSubmit={handleSubmit} className="mb-4">
        <div className="flex space-x-2">
          <input
            type="text"
            value={promoCode}
            onChange={(e) => setPromoCode(e.target.value)}
            placeholder="Enter promo code"
            className="flex-1 px-3 py-2 border rounded"
          />
          <button
            type="submit"
            disabled={isLoading}
            className="px-4 py-2 bg-blue-500 text-white rounded disabled:bg-blue-300"
          >
            {isLoading ? 'Applying...' : 'Apply'}
          </button>
        </div>
      </form>
      
      <div className="text-sm text-gray-500">
        Try promo code: <span className="font-mono bg-gray-100 px-1">IMPLANT30</span> (30% off)
      </div>
    </div>
  );
};

export default QuotePromoTest;
Integration Steps
Create a standalone HTML file that loads just this component to test in isolation:
<!-- public/promo-test.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Promo Code Test</title>
  <script src="[https://cdn.tailwindcss.com"></script>](https://cdn.tailwindcss.com"></script>)
</head>
<body class="bg-gray-100 p-4">
  <div id="root"></div>

  <script type="module">
    import React from '[https://esm.sh/react@18.2.0';](https://esm.sh/react@18.2.0';)
    import ReactDOM from '[https://esm.sh/react-dom@18.2.0';](https://esm.sh/react-dom@18.2.0';)
    import { Toaster, toast } from '[https://esm.sh/react-hot-toast@2.4.1';](https://esm.sh/react-hot-toast@2.4.1';)

    // Simple quote promo test component
    const QuotePromoTest = () => {
      const [quote, setQuote] = React.useState({
        treatments: [
          { id: 1, name: 'Dental Implant', price: 1500, quantity: 1 },
          { id: 2, name: 'Teeth Whitening', price: 600, quantity: 1 }
        ],
        subtotal: 2100,
        promoCode: null,
        promoDiscount: 0,
        total: 2100
      });
      
      const [promoCode, setPromoCode] = React.useState('');
      const [isLoading, setIsLoading] = React.useState(false);
      
      const applyPromoCode = async (code) => {
        try {
          setIsLoading(true);
          console.log("Starting with quote:", quote);
          
          // Simulate API request
          await new Promise(resolve => setTimeout(resolve, 500));
          
          // For testing: IMPLANT30 = 30% off, any other code = 10% off
          const discountValue = code === 'IMPLANT30' ? 30 : 10;
          
          // Calculate discount
          const calculatedDiscount = Math.round((quote.subtotal * discountValue / 100) * 100) / 100;
          console.log(`Calculating ${discountValue}% discount on ${quote.subtotal} = ${calculatedDiscount}`);
          
          // Calculate new total
          const newTotal = Math.max(0, quote.subtotal - calculatedDiscount);
          console.log(`New total: ${quote.subtotal} - ${calculatedDiscount} = ${newTotal}`);
          
          // Update quote with new values
          const updatedQuote = {
            ...quote,
            promoCode: code,
            promoDiscount: calculatedDiscount,
            total: newTotal
          };
          
          // Set the updated quote
          setQuote(updatedQuote);
          console.log("Updated quote:", updatedQuote);
          
          // Show success toast
          toast.success(`Promo code ${code} applied! Discount: $${calculatedDiscount.toFixed(2)}`);
          
          return true;
        } catch (error) {
          console.error("Error:", error);
          toast.error(`Failed to apply promo code: ${error.message}`);
          return false;
        } finally {
          setIsLoading(false);
        }
      };
      
      const handleSubmit = (e) => {
        e.preventDefault();
        if (!promoCode.trim()) {
          toast.error('Please enter a promo code');
          return;
        }
        applyPromoCode(promoCode);
      };
      
      return React.createElement('div', { className: 'p-4 max-w-md mx-auto bg-white rounded-lg shadow-md' }, [
        React.createElement('h2', { className: 'text-xl font-bold mb-4', key: 'title' }, 'Quote Promo Test'),
        
        React.createElement('div', { className: 'mb-4 p-3 bg-gray-50 rounded', key: 'summary' }, [
          React.createElement('div', { className: 'font-medium', key: 'summary-title' }, 'Quote Summary'),
          React.createElement('div', { className: 'grid grid-cols-2 gap-2 mt-2', key: 'summary-content' }, [
            React.createElement('div', { key: 'subtotal-label' }, 'Subtotal:'),
            React.createElement('div', { className: 'text-right', key: 'subtotal-value' }, `$${quote.subtotal.toFixed(2)}`),
            
            quote.promoDiscount > 0 && React.createElement(React.Fragment, { key: 'discount-section' }, [
              React.createElement('div', { key: 'discount-label' }, 'Promo Discount:'),
              React.createElement('div', { className: 'text-right text-green-600', key: 'discount-value' }, `-$${quote.promoDiscount.toFixed(2)}`)
            ]),
            
            React.createElement('div', { className: 'font-bold', key: 'total-label' }, 'Total:'),
            React.createElement('div', { className: 'text-right font-bold', key: 'total-value' }, `$${quote.total.toFixed(2)}`)
          ])
        ]),
        
        React.createElement('form', { onSubmit: handleSubmit, className: 'mb-4', key: 'form' }, 
          React.createElement('div', { className: 'flex space-x-2' }, [
            React.createElement('input', { 
              type: 'text',
              value: promoCode,
              onChange: (e) => setPromoCode(e.target.value),
              placeholder: 'Enter promo code',
              className: 'flex-1 px-3 py-2 border rounded',
              key: 'input'
            }),
            React.createElement('button', { 
              type: 'submit',
              disabled: isLoading,
              className: 'px-4 py-2 bg-blue-500 text-white rounded disabled:bg-blue-300',
              key: 'button'
            }, isLoading ? 'Applying...' : 'Apply')
          ])
        ),
        
        React.createElement('div', { className: 'text-sm text-gray-500', key: 'help' }, [
          'Try promo code: ',
          React.createElement('span', { className: 'font-mono bg-gray-100 px-1' }, 'IMPLANT30'),
          ' (30% off)'
        ])
      ]);
    };

    // App component with toaster
    const App = () => {
      return React.createElement(React.Fragment, null, [
        React.createElement(Toaster, { position: 'top-right', key: 'toaster' }),
        React.createElement(QuotePromoTest, { key: 'test' })
      ]);
    };

    // Render app
    ReactDOM.render(
      React.createElement(App),
      document.getElementById('root')
    );
  </script>
</body>
</html>
Add a route to serve this standalone file:
// In server/routes/static-routes.ts or equivalent
router.get('/promo-test', (req, res) => {
  res.sendFile(path.join(__dirname, '../../public/promo-test.html'));
});
Key Improvements
Simplified Testing: The standalone HTML file allows testing the promo code functionality without dependencies on the rest of the application
Controlled Environment: By isolating just the promo code logic, we avoid authentication issues and other complications
Clear Logging: Extensive logging helps identify where the calculation is failing
Functional Updates: Using proper React state updates to ensure calculations are based on current values
This approach focuses directly on fixing the core issue without getting distracted by authentication or navigation problems. Once the promo code functionality works in isolation, we can integrate it back into the main application.