Order	Focus	Deliverable	Timeline
1	URL Auto-Apply	Read URL params and auto-apply promo codes	1-2 days
2	Quote Persistence	Store promo details in quotes table	2-3 days
3	Admin Promo Manager	CRUD interface for managing promotions	3-4 days
4	Portal Integration	Display promo details across all portals	2-3 days
Instructions for Replit Agent
# Promo System Integration: Phase 1

## Background
We've successfully implemented a hybrid promotional system with:
- Manual coupon codes (WELCOME20, SUMMER50)
- Token-based special offers
- Support for both percentage and fixed-amount discounts

Now we need to integrate this system fully into the booking flow and admin interfaces.

## Task 1: URL Auto-Apply (Highest Priority)

Implement automatic application of promo codes from URL parameters:

1. In the quote builder component:
   - Add logic to check for `?code=` parameter on initial page load
   - If found, automatically apply the code to the current quote
   - Display a dismissible notification: "{CODE} – {discount} applied (expires {date})"

2. Create required hooks:
   - Extend `use-quote-builder.ts` to include a `applyPromoFromUrl()` function
   - Call this function on component mount with `useEffect`

3. API integration:
   - Use existing `POST /api/quotes/apply-code` endpoint
   - Handle success/error states appropriately
   - Show clear feedback to the user

## Task 2: Quote Persistence

Extend the quotes data model to store promotion information:

1. Database schema updates:
   - Add columns to `quotes` table:
     - `promo_id` (foreign key to promotions table)
     - `promo_code` (string, the actual code used)
     - `promo_type` (enum: 'percentage' | 'fixed')
     - `promo_value` (decimal, the amount or percentage)
     - `promo_applied_at` (timestamp)

2. API endpoints:
   - Update `POST /api/quotes/apply-code` to persist promotion details
   - Update `DELETE /api/quotes/remove-code` to clear promotion fields
   - Ensure `GET /api/quotes/:id` returns promotion information

3. Quote model updates:
   - Extend the Quote interface in `shared/schema.ts`
   - Update any related types and validation

## Testing Instructions

1. Test URL auto-apply with these scenarios:
   - Visit `/quote?code=WELCOME20` → Should auto-apply 20% discount
   - Visit `/quote?code=SUMMER50` → Should auto-apply €50 discount
   - Visit `/quote?code=INVALID` → Should show error message
   - Visit `/quote` without code → Should load normally without prompts

2. Test persistence:
   - Apply code through URL
   - Refresh page → Discount should still be applied
   - Complete quote → Check database that promo fields are populated

## Implementation Notes
- Follow existing code patterns and naming conventions
- Use React Query for data fetching where appropriate
- Add appropriate error handling for invalid or expired codes
- Ensure responsive design works on mobile devices
Follow-up Instructions After Task 1-2 Completion
# Promo System Integration: Phase 2

Great work on the URL auto-apply and quote persistence! Now let's implement the admin management interface.

## Task 3: Admin Promo Manager

Create a CRUD interface for managing promotional codes:

1. Admin Routes:
   - Add new route `/admin/promotions` 
   - Create page component `pages/admin/PromotionsPage.tsx`

2. UI Components:
   - Promotions list table showing:
     - Code
     - Type (percentage/fixed)
     - Value
     - Expiry date
     - Clinic association (if any)
     - Status (active/inactive)
     - Usage count
   - Create/Edit modal with form fields for all promotion properties
   - Action buttons for activate/deactivate

3. API Endpoints:
   - `GET /api/admin/promotions` - List all promotions with filtering options
   - `POST /api/admin/promotions` - Create new promotion
   - `PATCH /api/admin/promotions/:id` - Update promotion
   - `DELETE /api/admin/promotions/:id` - Delete promotion (or soft-delete)

4. Data Models:
   - Ensure Promotion model includes:
     - Clinic association (nullable)
     - Maximum uses (nullable)
     - Creation date
     - Created by (admin user ID)

## Task 4: Portal Integration

Display promotion information across all portals:

1. Patient Portal:
   - Add promo badge to Quote Summary component
   - Show savings amount prominently
   - Include expiry date if applicable

2. Clinic Portal:
   - Add promotion details to quote details view
   - Include in printable/PDF quote

3. Admin Portal:
   - Add promotion column to quotes list
   - Include promotion details in quote detail view

## Testing Instructions

1. Admin Promo Manager:
   - Create a new percentage-based promotion (20% off)
   - Create a new fixed-amount promotion (€50 off)
   - Create a clinic-specific promotion
   - Test filters and sorting in the promotions list
   - Deactivate a promotion and verify it can't be used

2. Portal Integration:
   - Apply a promotion to a quote
   - Verify it appears correctly in patient portal
   - Verify it appears correctly in clinic portal
   - Verify it appears correctly in admin portal

## Implementation Notes
- Use existing admin UI components and patterns
- Implement proper validation for all form fields
- Add appropriate permissions checks for admin routes
- Consider adding pagination for the promotions list
Technical Considerations
Data Consistency: Ensure promotion details are consistently formatted across all portals

Error Handling: Provide clear error messages for expired/invalid codes

Performance: Consider caching active promotions to reduce database load

Security: Add proper validation to prevent promotion abuse

Analytics: Implement tracking for promotion usage to measure effectiveness

Extensibility: Design the system to easily add new promotion types in the future