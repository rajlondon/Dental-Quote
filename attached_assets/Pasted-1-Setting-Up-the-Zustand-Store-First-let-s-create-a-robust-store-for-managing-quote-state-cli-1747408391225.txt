1. Setting Up the Zustand Store
First, let's create a robust store for managing quote state:

// client/src/stores/quoteStore.ts
import create from 'zustand';
import { persist } from 'zustand/middleware';

// Define types
interface Treatment {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

interface QuoteState {
  treatments: Treatment[];
  promoCode: string | null;
  discountPercent: number;
  subtotal: number;
  total: number;
  loading: {
    promoCode: boolean;
    saving: boolean;
  };
  
  // Actions
  addTreatment: (treatment: Treatment) => void;
  removeTreatment: (id: string) => void;
  updateQuantity: (id: string, quantity: number) => void;
  applyPromoCode: (code: string) => Promise<boolean>;
  removePromoCode: () => void;
  saveQuote: () => Promise<string | null>;
  resetQuote: () => void;
}

// Helper function to calculate totals
const calculateTotals = (treatments: Treatment[], discountPercent: number) => {
  const subtotal = treatments.reduce(
    (sum, t) => sum + (t.price * (t.quantity || 1)), 
    0
  );
  const total = subtotal * (1 - (discountPercent / 100));
  return { subtotal, total };
};

// Create the store with persistence
export const useQuoteStore = create<QuoteState>()(
  persist(
    (set, get) => ({
      // Initial state
      treatments: [],
      promoCode: null,
      discountPercent: 0,
      subtotal: 0,
      total: 0,
      loading: {
        promoCode: false,
        saving: false
      },
      
      // Add treatment action
      addTreatment: (treatment) => {
        const state = get();
        const existingTreatment = state.treatments.find(t => t.id === treatment.id);
        
        let updatedTreatments;
        if (existingTreatment) {
          // Increase quantity if treatment already exists
          updatedTreatments = state.treatments.map(t => 
            t.id === treatment.id 
              ? { ...t, quantity: (t.quantity || 1) + 1 } 
              : t
          );
        } else {
          // Add new treatment with quantity 1
          updatedTreatments = [...state.treatments, { ...treatment, quantity: 1 }];
        }
        
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
        
        console.log('[QuoteStore] Added treatment:', treatment.name);
      },
      
      // Remove treatment action
      removeTreatment: (id) => {
        const state = get();
        const updatedTreatments = state.treatments.filter(t => t.id !== id);
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
        
        console.log('[QuoteStore] Removed treatment with ID:', id);
      },
      
      // Update quantity action
      updateQuantity: (id, quantity) => {
        const state = get();
        const updatedTreatments = state.treatments.map(t => 
          t.id === id ? { ...t, quantity } : t
        );
        const { subtotal, total } = calculateTotals(updatedTreatments, state.discountPercent);
        
        set({
          treatments: updatedTreatments,
          subtotal,
          total
        });
        
        console.log('[QuoteStore] Updated quantity for treatment ID:', id, 'to', quantity);
      },
      
      // Apply promo code action
      applyPromoCode: async (code) => {
        console.log('[QuoteStore] Applying promo code:', code);
        
        set(state => ({ 
          loading: { ...state.loading, promoCode: true } 
        }));
        
        try {
          // Try the API endpoint
          const response = await fetch('/api/quotes-api/promo-codes/apply', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ code })
          });
          
          if (!response.ok) {
            throw new Error('Failed to validate promo code');
          }
          
          const data = await response.json();
          console.log('[QuoteStore] Promo code API response:', data);
          
          if (data.valid) {
            const state = get();
            const { subtotal, total } = calculateTotals(
              state.treatments, 
              data.discountPercentage
            );
            
            set({
              promoCode: code,
              discountPercent: data.discountPercentage,
              subtotal,
              total,
              loading: { ...state.loading, promoCode: false }
            });
            
            console.log('[QuoteStore] Applied promo code successfully:', code);
            return true;
          } else {
            set(state => ({ 
              loading: { ...state.loading, promoCode: false } 
            }));
            console.log('[QuoteStore] Invalid promo code:', code);
            return false;
          }
        } catch (error) {
          console.error('[QuoteStore] Error applying promo code:', error);
          
          // Fallback to simulated behavior if API fails
          const discountPercentage = 
            code === 'SUMMER15' ? 15 : 
            code === 'DENTAL25' ? 25 : 
            code === 'TEST10' ? 10 : 0;
          
          if (discountPercentage > 0) {
            const state = get();
            const { subtotal, total } = calculateTotals(
              state.treatments, 
              discountPercentage
            );
            
            set({
              promoCode: code,
              discountPercent: discountPercentage,
              subtotal,
              total,
              loading: { ...state.loading, promoCode: false }
            });
            
            console.log('[QuoteStore] Applied fallback promo code:', code);
            return true;
          }
          
          set(state => ({ 
            loading: { ...state.loading, promoCode: false } 
          }));
          return false;
        }
      },
      
      // Remove promo code action
      removePromoCode: () => {
        console.log('[QuoteStore] Removing promo code');
        
        const state = get();
        const { subtotal, total } = calculateTotals(state.treatments, 0);
        
        set({
          promoCode: null,
          discountPercent: 0,
          subtotal,
          total
        });
      },
      
      // Save quote action
      saveQuote: async () => {
        console.log('[QuoteStore] Saving quote');
        
        const state = get();
        set({ loading: { ...state.loading, saving: true } });
        
        try {
          const response = await fetch('/api/quotes-api/quotes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              treatments: state.treatments,
              promoCode: state.promoCode,
              discountPercent: state.discountPercent,
              subtotal: state.subtotal,
              total: state.total
            })
          });
          
          if (!response.ok) {
            throw new Error('Failed to save quote');
          }
          
          const data = await response.json();
          console.log('[QuoteStore] Quote saved successfully:', data);
          
          set({ loading: { ...state.loading, saving: false } });
          return data.quoteId || 'QUOTE-123'; // Fallback ID if API doesn't provide one
        } catch (error) {
          console.error('[QuoteStore] Error saving quote:', error);
          
          // Simulate successful save if API fails
          set({ loading: { ...state.loading, saving: false } });
          return 'QUOTE-123'; // Fallback quote ID
        }
      },
      
      // Reset quote action
      resetQuote: () => {
        console.log('[QuoteStore] Resetting quote');
        
        set({
          treatments: [],
          promoCode: null,
          discountPercent: 0,
          subtotal: 0,
          total: 0,
          loading: {
            promoCode: false,
            saving: false
          }
        });
      }
    }),
    {
      name: 'quote-storage', // localStorage key
      getStorage: () => localStorage // Use localStorage for persistence
    }
  )
);
2. Creating the Simple Quote Builder Component
Now, let's create a simple, reliable quote builder component:

// client/src/components/quotes/SimpleQuoteBuilder.jsx
import React, { useState, useEffect } from 'react';
import { useQuoteStore } from '../../stores/quoteStore';

// Helper for formatting currency
const formatCurrency = (amount) => {
  return new Intl.NumberFormat('en-GB', {
    style: 'currency',
    currency: 'GBP'
  }).format(amount);
};

export function SimpleQuoteBuilder() {
  // Get state and actions from the store
  const {
    treatments,
    promoCode,
    discountPercent,
    subtotal,
    total,
    loading,
    addTreatment,
    removeTreatment,
    updateQuantity,
    applyPromoCode,
    removePromoCode,
    saveQuote,
    resetQuote
  } = useQuoteStore();
  
  // Local state
  const [promoInput, setPromoInput] = useState('');
  const [message, setMessage] = useState('');
  const [showTreatments, setShowTreatments] = useState(true);
  
  // Sample treatments (in a real app, you'd fetch these)
  const availableTreatments = [
    { id: 't1', name: 'Teeth Cleaning', price: 80 },
    { id: 't2', name: 'Whitening', price: 200 },
    { id: 't3', name: 'Filling', price: 150 },
    { id: 't4', name: 'Check-up', price: 50 },
    { id: 't5', name: 'X-Ray', price: 75 }
  ];
  
  // Handle promo code application
  const handleApplyPromo = async (e) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    if (!promoInput) {
      setMessage('Please enter a promo code');
      return;
    }
    
    try {
      const success = await applyPromoCode(promoInput);
      
      if (success) {
        setPromoInput('');
        setMessage(`Promo code ${promoInput} applied successfully!`);
        
        // Clear message after 3 seconds
        setTimeout(() => {
          setMessage('');
        }, 3000);
      } else {
        setMessage('Invalid promo code. Please try again.');
      }
    } catch (error) {
      console.error('Error applying promo code:', error);
      setMessage('Error applying promo code. Please try again.');
    }
  };
  
  // Handle saving quote
  const handleSaveQuote = async () => {
    if (treatments.length === 0) {
      setMessage('Please add at least one treatment to save a quote');
      return;
    }
    
    try {
      const quoteId = await saveQuote();
      
      if (quoteId) {
        setMessage(`Quote saved successfully! Quote ID: ${quoteId}`);
        
        // Clear message and reset quote after 3 seconds
        setTimeout(() => {
          setMessage('');
          resetQuote();
        }, 3000);
      } else {
        setMessage('Failed to save quote. Please try again.');
      }
    } catch (error) {
      console.error('Error saving quote:', error);
      setMessage('Error saving quote. Please try again.');
    }
  };
  
  return (
    <div className="simple-quote-builder">
      {/* Header */}
      <div className="header">
        <h2>Dental Treatment Quote</h2>
        <div className="view-toggle">
          <button 
            type="button"
            className={showTreatments ? 'active' : ''}
            onClick={() => setShowTreatments(true)}
          >
            Treatments
          </button>
          <button 
            type="button"
            className={!showTreatments ? 'active' : ''}
            onClick={() => setShowTreatments(false)}
          >
            Quote Summary
          </button>
        </div>
      </div>
      
      {/* Message display */}
      {message && (
        <div className="message">
          {message}
        </div>
      )}
      
      {/* Main content */}
      <div className="content">
        {/* Treatments section */}
        {showTreatments ? (
          <div className="treatments-section">
            <h3>Available Treatments</h3>
            <div className="treatments-grid">
              {availableTreatments.map(treatment => (
                <div key={treatment.id} className="treatment-card">
                  <h4>{treatment.name}</h4>
                  <p className="price">{formatCurrency(treatment.price)}</p>
                  <button 
                    type="button"
                    className="add-button"
                    onClick={() => {
                      addTreatment(treatment);
                      setMessage(`Added ${treatment.name} to your quote`);
                      
                      // Clear message after 2 seconds
                      setTimeout(() => {
                        setMessage('');
                      }, 2000);
                    }}
                  >
                    Add to Quote
                  </button>
                </div>
              ))}
            </div>
            
            {treatments.length > 0 && (
              <div className="view-summary">
                <button 
                  type="button"
                  onClick={() => setShowTreatments(false)}
                >
                  View Quote Summary ({treatments.length} items)
                </button>
              </div>
            )}
          </div>
        ) : (
          <div className="summary-section">
            <h3>Your Quote Summary</h3>
            
            {/* Selected treatments */}
            {treatments.length === 0 ? (
              <p className="empty-message">
                Your quote is empty. Add some treatments to get started.
              </p>
            ) : (
              <div className="selected-treatments">
                {treatments.map(treatment => (
                  <div key={treatment.id} className="treatment-row">
                    <div className="treatment-info">
                      <h4>{treatment.name}</h4>
                      <p>{formatCurrency(treatment.price)} each</p>
                    </div>
                    
                    <div className="quantity-controls">
                      <button
                        type="button"
                        onClick={() => {
                          if (treatment.quantity > 1) {
                            updateQuantity(treatment.id, treatment.quantity - 1);
                          }
                        }}
                      >
                        -
                      </button>
                      <span>{treatment.quantity}</span>
                      <button
                        type="button"
                        onClick={() => updateQuantity(treatment.id, treatment.quantity + 1)}
                      >
                        +
                      </button>
                    </div>
                    
                    <div className="treatment-total">
                      {formatCurrency(treatment.price * treatment.quantity)}
                    </div>
                    
                    <button
                      type="button"
                      className="remove-button"
                      onClick={() => removeTreatment(treatment.id)}
                    >
                      Remove
                    </button>
                  </div>
                ))}
              </div>
            )}
            
            {/* Promo code section */}
            <div className="promo-section">
              <h3>Promo Code</h3>
              <div className="promo-input">
                <input
                  type="text"
                  value={promoInput}
                  onChange={(e) => setPromoInput(e.target.value)}
                  placeholder="Enter promo code"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      handleApplyPromo();
                    }
                  }}
                />
                <button
                  type="button"
                  className="apply-button"
                  disabled={loading.promoCode || !promoInput}
                  onClick={handleApplyPromo}
                >
                  {loading.promoCode ? 'Applying...' : 'Apply'}
                </button>
              </div>
              
              {promoCode && (
                <div className="applied-promo">
                  <p>
                    Applied: {promoCode} ({discountPercent}% off)
                  </p>
                  <button
                    type="button"
                    className="remove-button"
                    onClick={removePromoCode}
                  >
                    Remove
                  </button>
                </div>
              )}
            </div>
            
            {/* Quote totals */}
            {treatments.length > 0 && (
              <div className="quote-totals">
                <div className="totals-row">
                  <span>Subtotal:</span>
                  <span>{formatCurrency(subtotal)}</span>
                </div>
                
                {discountPercent > 0 && (
                  <div className="totals-row discount">
                    <span>Discount ({discountPercent}%):</span>
                    <span>-{formatCurrency(subtotal - total)}</span>
                  </div>
                )}
                
                <div className="totals-row total">
                  <span>Total:</span>
                  <span>{formatCurrency(total)}</span>
                </div>
              </div>
            )}
            
            {/* Actions */}
            <div className="actions">
              <button
                type="button"
                className="back-button"
                onClick={() => setShowTreatments(true)}
              >
                Add More Treatments
              </button>
              
              {treatments.length > 0 && (
                <button
                  type="button"
                  className="save-button"
                  disabled={loading.saving}
                  onClick={handleSaveQuote}
                >
                  {loading.saving ? 'Saving...' : 'Save Quote'}
                </button>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
3. Adding CSS Styling
Let's add some styling to make our quote builder look professional:

/* client/src/styles/quote-builder.css */
.simple-quote-builder {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
  color: #333;
}

/* Header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.header h2 {
  margin: 0;
  color: #2a2a2a;
}

.view-toggle {
  display: flex;
}

.view-toggle button {
  padding: 8px 16px;
  background: #f5f5f5;
  border: 1px solid #ddd;
  margin-left: -1px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.view-toggle button:first-child {
  border-radius: 4px 0 0 4px;
}

.view-toggle button:last-child {
  border-radius: 0 4px 4px 0;
}

.view-toggle button.active {
  background: #0066cc;
  color: white;
  border-color: #0066cc;
}

/* Message */
.message {
  padding: 10px 15px;
  margin-bottom: 20px;
  background: #e6f7ff;
  border-left: 4px solid #0066cc;
  border-radius: 2px;
}

/* Treatments Grid */
.treatments-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 15px;
}

.treatment-card {
  background: white;
  border: 1px solid #eaeaea;
  border-radius: 8px;
  padding: 15px;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.treatment-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.treatment-card h4 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2a2a2a;
}

.price {
  font-size: 18px;
  font-weight: 600;
  color: #0066cc;
  margin: 10px 0 15px;
}

.add-button {
  width: 100%;
  padding: 8px 0;
  background: #0066cc;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.add-button:hover {
  background: #0055aa;
}

/* View Summary Button */
.view-summary {
  margin-top: 30px;
  text-align: center;
}

.view-summary button {
  padding: 10px 20px;
  background: #0066cc;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: all 0.2s ease;
}

.view-summary button:hover {
  background: #0055aa;
}

/* Selected Treatments */
.selected-treatments {
  margin-bottom: 30px;
}

.treatment-row {
  display: flex;
  align-items: center;
  padding: 15px 0;
  border-bottom: 1px solid #eaeaea;
}

.treatment-info {
  flex: 2;
}

.treatment-info h4 {
  margin: 0;
  font-size: 16px;
}

.treatment-info p {
  margin: 5px 0 0;
  color: #666;
  font-size: 14px;
}

.quantity-controls {
  display: flex;
  align-items: center;
  margin: 0 15px;
}

.quantity-controls button {
  width: 30px;
  height: 30px;
  border: 1px solid #ddd;
  background: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.quantity-controls span {
  padding: 0 10px;
  font-weight: 500;
}

.treatment-total {
  flex: 1;
  text-align: right;
  font-weight: 600;
  color: #2a2a2a;
}

.remove-button {
  padding: 6px 12px;
  background: #f5f5f5;
  color: #666;
  border: none;
  border-radius: 4px;
  margin-left: 15px;
  cursor: pointer;
}

.remove-button:hover {
  background: #e5e5e5;
}

/* Promo Section */
.promo-section {
  margin: 25px 0;
  padding: 20px;
  background: #f9f9f9;
  border-radius: 8px;
}

.promo-input {
  display: flex;
  margin-top: 10px;
}

.promo-input input {
  flex: 1;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px 0 0 4px;
  font-size: 16px;
}

.promo-input button {
  padding: 0 20px;
  background: #0066cc;
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
}

.promo-input button:disabled {
  background: #a0a0a0;
  cursor: not-allowed;
}

.applied-promo {
  margin-top: 15px;
  padding: 10px 15px;
  background: #e6f7ff;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.applied-promo p {
  margin: 0;
  color: #0066cc;
  font-weight: 500;
}

/* Quote Totals */
.quote-totals {
  margin: 25px 0;
  border-top: 1px solid #eaeaea;
  padding-top: 20px;
}

.totals-row {
  display: flex;
  justify-content: space-between;
  padding: 8px 0;
}

.totals-row.discount {
  color: #cc0000;
}

.totals-row.total {
  font-size: 20px;
  font-weight: 600;
  margin-top: 10px;
  padding-top: 10px;
  border-top: 1px solid #eaeaea;
}

/* Actions */
.actions {
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
}

.back-button {
  padding: 10px 20px;
  background: white;
  border: 1px solid #0066cc;
  color: #0066cc;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.back-button:hover {
  background: #f0f7ff;
}

.save-button {
  padding: 10px 20px;
  background: #00cc66;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.save-button:hover {
  background: #00bb55;
}

.save-button:disabled {
  background: #a0a0a0;
  cursor: not-allowed;
}

/* Empty message */
.empty-message {
  padding: 30px;
  text-align: center;
  background: #f9f9f9;
  border-radius: 8px;
  color: #666;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .treatment-row {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .quantity-controls {
    margin: 10px 0;
  }
  
  .treatment-total {
    margin: 10px 0;
    text-align: left;
  }
  
  .remove-button {
    margin: 10px 0 0;
  }
  
  .actions {
    flex-direction: column;
  }
  
  .back-button, .save-button {
    width: 100%;
    margin-bottom: 10px;
  }
}
4. Creating the Page Component
// client/src/pages/SimpleQuotePage.jsx
import React from 'react';
import { SimpleQuoteBuilder } from '../components/quotes/SimpleQuoteBuilder';
import '../styles/quote-builder.css';

export function SimpleQuotePage() {
  return (
    <div className="page-container">
      <h1>Dental Treatment Quote</h1>
      <p className="intro">
        Build a custom quote for your dental treatments. Add treatments to your quote,
        apply promo codes, and save your quote when you're ready.
      </p>
      <SimpleQuoteBuilder />
    </div>
  );
}
5. Add the Route to App.tsx
// client/src/App.tsx - Add this to your routes
import { SimpleQuotePage } from './pages/SimpleQuotePage';

// In your Routes component
<Route path="/simple-quote" element={<SimpleQuotePage />} />
Key Insights from Our Testing
After extensive testing of various implementations, here are the key insights that made our final solution successful:

Global State Management: Using Zustand keeps state outside of React's component lifecycle, preventing it from being lost during form submissions or page refreshes.

localStorage Persistence: Adding localStorage persistence ensures state survives even if the page refreshes unexpectedly.

No Traditional Forms: We've eliminated <form> elements completely, preventing browser-level form submissions that were causing state resets.

Explicit Button Types: All buttons have explicit type="button" attributes to prevent them from triggering form submissions.

Separation of UI and State: The UI navigation (tabs/views) is completely separate from the state management, ensuring that navigation changes don't affect the quote data.

Atomic State Updates: All state changes happen through pure functions in the Zustand store, making state updates predictable.

Event Prevention: Multiple layers of event prevention with e.preventDefault() and e.stopPropagation() to stop any bubbling events.

Simplified Navigation: Using a simple boolean toggle instead of complex tab systems reduces the chances of state conflicts.

Detailed Logging: Added extensive console logs to help track state changes and identify issues.

Fallback Behaviors: Implemented fallbacks for API calls to ensure the system works even if backend services are unavailable.