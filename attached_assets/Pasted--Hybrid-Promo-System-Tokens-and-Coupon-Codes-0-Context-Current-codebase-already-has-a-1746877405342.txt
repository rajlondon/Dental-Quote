# Hybrid Promo System – Tokens **and** Coupon Codes

## 0. Context

* Current codebase already has a **promo engine** (slug/token flow, bundle logic) and **city‑aware package manager**.
* We want a **quick pivot** so marketing can also push plain coupon codes (e.g. `ALLIN6-DENTSPA`) while keeping the ribbon/URL promo flow.
* Goal: ship in < 1 day, retain full discount/bundle validation, stay multi‑city.

---

## 1. Data‑model delta (Prisma)

```prisma
model Promo {
  id           String   @id @default(uuid())
  slug         String   @unique
  code         String?  @unique        // ✅ NEW: nullable coupon code
  title        String
  promoType    PromoType
  discountType DiscountType
  discountValue Float
  cityCode     String?
  isActive     Boolean  @default(true)
  // … existing relations
}
```

*Migration* (SQL):

```sql
ALTER TABLE "Promo" ADD COLUMN "code" VARCHAR UNIQUE;
```

---

## 2. Unified Pricing flow (already exists)

```ts
export async function applyPromoToQuote(quote: Quote, promo: Promo) {
  // validates clinic & city, adds bundled items, recalculates subtotal/discount/total
}
```

*No change required.*

---

## 3. Endpoints

```ts
// 3.1  Token/ribbon (already live)
GET /promo/:slug/token   // returns promo + token, then calls applyPromoToQuote()

// 3.2  NEW  Coupon code flow
POST /quotes/apply-code
body: { quoteId: string, clinicId: string, code: string }
```

```ts
// server/routes/applyCode.ts
router.post("/quotes/apply-code", async (req, res) => {
  const { quoteId, clinicId, code } = req.body;
  const promo = await db.promo.findFirst({ where: { code, isActive: true } });
  if (!promo || !promo.promoClinics.some(p => p.clinicId === clinicId))
    return res.status(400).send("INVALID_CODE");
  const quote = await db.quote.findFirst({ where: { id: quoteId }});
  await applyPromoToQuote(quote, promo);
  res.json({ subtotal: quote.subtotal, discount: quote.discount, total: quote.total });
});
```

---

## 4. Front‑end hooks & UI snippets

### 4.1  `useApplyCode` mutation

```ts
export const useApplyCode = () =>
  useMutation(({ quoteId, clinicId, code }) =>
      api.post("/quotes/apply-code", { quoteId, clinicId, code }), {
    onSuccess: () => queryClient.invalidateQueries(["quote", quoteId])
  });
```

### 4.2  QuoteBuilder autocode effect

```tsx
const [params, setParams] = useSearchParams();
const autocode = params.autocode?.toUpperCase();
useEffect(() => {
  if (autocode) {
    applyCode.mutate({ quoteId, clinicId: selectedClinicId, code: autocode });
    params.delete("autocode");
    setParams(params);
  }
}, [autocode]);
```

### 4.3  ClinicCard code input

```tsx
<Input value={code} onChange={e=>setCode(e.target.value.toUpperCase())}/>
<Button onClick={()=>applyCode.mutate({quoteId, clinicId: clinic.id, code})}>Apply</Button>
```

### 4.4  Copy‑and‑Go button on offer card / email

```html
<button data-code="SPRING20" onclick="copyAndGo(event)">Copy code & start quote</button>
<script>
function copyAndGo(e){const c=e.currentTarget.dataset.code;navigator.clipboard.writeText(c).then(()=>{location.href='/quote-builder?autocode='+c})}
</script>
```

---

## 5. Analytics

```ts
mixpanel.track('CodeApplied', { code, quoteId, city });
mixpanel.track('PromoTokenUsed', { slug, quoteId, city });
```

---

## 6. Tests

* **unit** `pricing.spec.ts`: percent vs fixed, city mismatch rejection.
* **e2e** `applyCode.cy.ts`:

  1. Visit `/quote-builder?autocode=SPRING20` – expect discount line.
  2. Manually copy/paste code into ClinicCard.

---

## 7. Task list for Replit AI‑agent

1. **DB migration** – add `code` column to `Promo` (script above) & regenerate Prisma.
2. **Create `/quotes/apply-code` route** using snippet.
3. **Add `useApplyCode` hook** under `client/src/hooks`.
4. **QuoteBuilder** – implement autocode effect.
5. **ClinicCard** – add code input + “Apply” button.
6. **Offer carousel & e-mail template** – add Copy\&Go button (use snippet).
7. **Update analytics** events.
8. **Jest unit tests** for apply‑code discount logic.
9. **Cypress e2e** for autocode + manual apply.
10. **Feature flag** (`FEATURES.couponCodes = true`) so we can toggle later.

When tests are green & manual smoke‑test passes, merge to `develop` and redeploy.
