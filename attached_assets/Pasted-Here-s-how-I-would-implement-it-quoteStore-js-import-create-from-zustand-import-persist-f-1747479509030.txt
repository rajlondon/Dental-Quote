Here's how I would implement it:

// quoteStore.js
import create from 'zustand'
import { persist } from 'zustand/middleware'

export const useQuoteStore = create(
  persist(
    (set, get) => ({
      // State
      step: 'quiz', // 'quiz', 'promo', 'patient-info', 'summary'
      treatments: [],
      promoCode: null,
      promoDiscount: 0,
      isApplyingPromo: false,
      patientInfo: {},
      
      // Actions
      setStep: (step) => set({ step }),
      
      addTreatment: (treatment) => 
        set((state) => ({ 
          treatments: [...state.treatments, treatment] 
        })),
      
      applyPromoCode: async (code) => {
        // Set loading state first
        set({ isApplyingPromo: true });
        
        try {
          // API call or validation logic
          const response = await fetch(`/api/promo-codes/validate?code=${code}`);
          const data = await response.json();
          
          if (data.isValid) {
            // Update state with new promo code info
            set({ 
              promoCode: code, 
              promoDiscount: data.discountPercentage,
              isApplyingPromo: false 
            });
            return { success: true, message: 'Promo code applied!' };
          } else {
            set({ isApplyingPromo: false });
            return { success: false, message: 'Invalid promo code' };
          }
        } catch (error) {
          console.error('Error applying promo code:', error);
          set({ isApplyingPromo: false });
          return { 
            success: false, 
            message: 'Error applying promo code. Please try again.'
          };
        }
      },
      
      savePatientInfo: (info) => set({ patientInfo: info }),
      
      resetQuote: () => set({ 
        step: 'quiz',
        treatments: [], 
        promoCode: null, 
        promoDiscount: 0,
        patientInfo: {}
      }),
    }),
    {
      name: 'dental-quote-storage',
      getStorage: () => localStorage,
    }
  )
)
Implementing in Your Quote Flow
For your EnhancedQuotePage component:

import React from 'react';
import { StepByStepTreatmentBuilder } from '../components/StepByStepTreatmentBuilder';
import { useQuoteStore } from '../stores/quoteStore';

export const EnhancedQuotePage = () => {
  const { 
    step, 
    treatments, 
    promoCode, 
    promoDiscount,
    isApplyingPromo,
    setStep,
    addTreatment, 
    applyPromoCode,
    savePatientInfo
  } = useQuoteStore();

  const handleQuizComplete = (selectedTreatments) => {
    // Add treatments to store
    selectedTreatments.forEach(treatment => addTreatment(treatment));
    
    // Move to promo step
    setStep('promo');
  };

  const handleApplyPromo = async (code) => {
    const result = await applyPromoCode(code);
    
    if (result.success) {
      // Only move forward if successful
      setStep('patient-info');
    }
    
    return result;
  };

  const handlePatientInfoSubmit = (info) => {
    savePatientInfo(info);
    setStep('summary');
  };

  return (
    <div className="container mx-auto p-4">
      {step === 'quiz' && (
        <StepByStepTreatmentBuilder 
          onComplete={handleQuizComplete} 
        />
      )}
      
      {step === 'promo' && (
        <div className="card p-6 shadow-lg">
          <h2 className="text-2xl font-bold mb-4">Apply Promo Code</h2>
          
          <div className="mb-4">
            <label className="block mb-2">Promo Code</label>
            <input 
              type="text" 
              className="input input-bordered w-full" 
              placeholder="Enter promo code"
              id="promo-code-input"
            />
          </div>
          
          <div className="flex gap-4">
            <button 
              className="btn btn-primary"
              disabled={isApplyingPromo}
              onClick={() => {
                const code = document.getElementById('promo-code-input').value;
                handleApplyPromo(code);
              }}
            >
              {isApplyingPromo ? 'Applying...' : 'Apply Code'}
            </button>
            
            <button 
              className="btn btn-outline"
              onClick={() => setStep('patient-info')}
            >
              Continue Without Promo
            </button>
          </div>
        </div>
      )}
      
      {/* Add remaining steps for patient info and summary */}
    </div>
  );
};
Key Improvements
Dedicated Loading State: isApplyingPromo prevents race conditions
Atomic State Updates: All related state changes happen together
Step-based Navigation: Only move forward explicitly when ready
Error Handling: Properly handle failed promo attempts
Persistence: All state preserved through localStorage