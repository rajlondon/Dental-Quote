I need you to fix the quote builder integration issues systematically. Follow these specific steps in order:

1. FIX PATIENT PORTAL PAGE FIRST
   Create a simplified version of PatientPortalPage.tsx that won't cause loading errors:

```jsx
// client/src/pages/PatientPortalPage.tsx
import React, { useState } from 'react';
import { Layout } from '../components/layouts/Layout';

const QuotesSection = () => (
  <div className="quotes-section">
    <h2 className="text-2xl font-bold mb-4">Your Treatment Quotes</h2>
    <p className="mb-4">You can view your saved quotes here once you create them.</p>
    <a href="/quote" className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
      Create a New Quote
    </a>
  </div>
);

export default function PatientPortalPage() {
  const [activeTab, setActiveTab] = useState("profile");
  
  const renderTabContent = () => {
    switch(activeTab) {
      case 'quotes':
        return <QuotesSection />;
      case 'profile':
        return <div><h2 className="text-2xl font-bold mb-4">Profile Information</h2><p>Profile content here</p></div>;
      case 'appointments':
        return <div><h2 className="text-2xl font-bold mb-4">Your Appointments</h2><p>Appointments content here</p></div>;
      default:
        return <div><h2 className="text-2xl font-bold mb-4">Profile Information</h2><p>Profile content here</p></div>;
    }
  };
  
  return (
    <Layout>
      <div className="container mx-auto py-8">
        <h1 className="text-3xl font-bold mb-6">Patient Portal</h1>
        
        <div className="flex border-b mb-6">
          <button 
            className={`px-4 py-2 ${activeTab === 'profile' ? 'border-b-2 border-blue-500 font-medium' : ''}`}
            onClick={() => setActiveTab('profile')}
          >
            Profile
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'appointments' ? 'border-b-2 border-blue-500 font-medium' : ''}`}
            onClick={() => setActiveTab('appointments')}
          >
            Appointments
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'quotes' ? 'border-b-2 border-blue-500 font-medium' : ''}`}
            onClick={() => setActiveTab('quotes')}
          >
            Quotes
          </button>
        </div>
        
        <div className="tab-content">
          {renderTabContent()}
        </div>
      </div>
    </Layout>
  );
}
CREATE A STANDALONE QUOTE PAGE Create a new file for our standalone quote page:
// client/src/pages/StandaloneQuotePage.jsx
import React, { useState } from 'react';
import { Layout } from '../components/layouts/Layout';
import { useQuoteStore } from '../stores/quoteStore';

// Sample treatments for testing
const SAMPLE_TREATMENTS = [
  { id: "t1", name: "Dental Checkup", price: 50, category: "preventive" },
  { id: "t2", name: "Teeth Cleaning", price: 75, category: "preventive" },
  { id: "t3", name: "X-Ray", price: 120, category: "diagnostic" },
  { id: "t4", name: "Filling", price: 150, category: "restorative" },
  { id: "t5", name: "Root Canal", price: 800, category: "restorative" }
];

export default function StandaloneQuotePage() {
  const {
    treatments,
    addTreatment,
    removeTreatment,
    updateQuantity,
    subtotal,
    total,
    discountPercent,
    promoCode,
    applyPromoCode,
    clearPromoCode,
    saveQuote,
    error,
    success,
    loading
  } = useQuoteStore();

  const [promoInput, setPromoInput] = useState('');
  const [patientInfo, setPatientInfo] = useState({ name: '', email: '', phone: '' });
  const [step, setStep] = useState(1); // 1 = treatments, 2 = patient info, 3 = summary

  const handlePromoSubmit = (e) => {
    e.preventDefault();
    if (promoInput.trim()) {
      applyPromoCode(promoInput);
    }
  };

  const handleSaveQuote = () => {
    // In a real implementation, you would validate the form first
    saveQuote();
  };

  const handlePatientInfoChange = (e) => {
    const { name, value } = e.target;
    setPatientInfo(prev => ({ ...prev, [name]: value }));
  };

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4">
        <h1 className="text-3xl font-bold mb-6">Treatment Quote Builder</h1>
        
        {/* Step indicators */}
        <div className="flex mb-8">
          <div 
            className={`flex-1 text-center p-2 ${step >= 1 ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => step > 1 && setStep(1)}
          >
            1. Select Treatments
          </div>
          <div 
            className={`flex-1 text-center p-2 ${step >= 2 ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
            onClick={() => treatments.length > 0 && step > 2 && setStep(2)}
          >
            2. Patient Information
          </div>
          <div 
            className={`flex-1 text-center p-2 ${step >= 3 ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
          >
            3. Review Quote
          </div>
        </div>
        
        {/* Step 1: Treatment Selection */}
        {step === 1 && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Left column - Treatment selection */}
            <div>
              <h2 className="text-xl font-semibold mb-4">Available Treatments</h2>
              <div className="space-y-4">
                {SAMPLE_TREATMENTS.map(treatment => (
                  <div key={treatment.id} className="p-4 border rounded-lg flex justify-between items-center">
                    <div>
                      <h3 className="font-medium">{treatment.name}</h3>
                      <p className="text-gray-600">£{treatment.price}</p>
                    </div>
                    <button
                      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                      onClick={() => addTreatment(treatment)}
                      type="button"
                    >
                      Add
                    </button>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Right column - Current selections */}
            <div>
              <h2 className="text-xl font-semibold mb-4">Selected Treatments</h2>
              
              {treatments.length === 0 ? (
                <p className="text-gray-500 italic">No treatments selected yet.</p>
              ) : (
                <>
                  <div className="space-y-4 mb-6">
                    {treatments.map(treatment => (
                      <div key={treatment.id} className="p-4 border rounded-lg flex justify-between items-center">
                        <div>
                          <h3 className="font-medium">{treatment.name}</h3>
                          <p className="text-gray-600">£{treatment.price} each</p>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            className="px-2 py-1 bg-gray-200 rounded"
                            onClick={() => updateQuantity(treatment.id, Math.max(1, treatment.quantity - 1))}
                            type="button"
                          >
                            -
                          </button>
                          <span>{treatment.quantity}</span>
                          <button
                            className="px-2 py-1 bg-gray-200 rounded"
                            onClick={() => updateQuantity(treatment.id, treatment.quantity + 1)}
                            type="button"
                          >
                            +
                          </button>
                          <button
                            className="ml-2 px-2 py-1 bg-red-100 text-red-600 rounded hover:bg-red-200"
                            onClick={() => removeTreatment(treatment.id)}
                            type="button"
                          >
                            Remove
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {/* Quote summary */}
                  <div className="p-4 bg-gray-50 rounded-lg mb-4">
                    <div className="flex justify-between mb-2">
                      <span>Subtotal:</span>
                      <span>£{subtotal.toFixed(2)}</span>
                    </div>
                  </div>
                  
                  <button
                    className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                    onClick={() => setStep(2)}
                    disabled={treatments.length === 0}
                    type="button"
                  >
                    Continue to Patient Information
                  </button>
                </>
              )}
            </div>
          </div>
        )}
        
        {/* Step 2: Patient Information */}
        {step === 2 && (
          <div className="max-w-2xl mx-auto">
            <h2 className="text-xl font-semibold mb-4">Patient Information</h2>
            
            <div className="space-y-4 mb-6">
              <div>
                <label className="block mb-1">Full Name</label>
                <input
                  type="text"
                  name="name"
                  value={patientInfo.name}
                  onChange={handlePatientInfoChange}
                  className="w-full p-2 border rounded"
                  placeholder="Enter your full name"
                />
              </div>
              
              <div>
                <label className="block mb-1">Email Address</label>
                <input
                  type="email"
                  name="email"
                  value={patientInfo.email}
                  onChange={handlePatientInfoChange}
                  className="w-full p-2 border rounded"
                  placeholder="Enter your email address"
                />
              </div>
              
              <div>
                <label className="block mb-1">Phone Number</label>
                <input
                  type="tel"
                  name="phone"
                  value={patientInfo.phone}
                  onChange={handlePatientInfoChange}
                  className="w-full p-2 border rounded"
                  placeholder="Enter your phone number"
                />
              </div>
            </div>
            
            <div className="flex space-x-4">
              <button
                className="px-4 py-2 border rounded hover:bg-gray-100"
                onClick={() => setStep(1)}
                type="button"
              >
                Back to Treatments
              </button>
              
              <button
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                onClick={() => setStep(3)}
                disabled={!patientInfo.name || !patientInfo.email || !patientInfo.phone}
                type="button"
              >
                Continue to Review
              </button>
            </div>
          </div>
        )}
        
        {/* Step 3: Review Quote */}
        {step === 3 && (
          <div className="max-w-2xl mx-auto">
            <h2 className="text-xl font-semibold mb-4">Review Your Quote</h2>
            
            <div className="mb-6 p-4 border rounded">
              <h3 className="font-medium mb-2">Patient Information</h3>
              <p><strong>Name:</strong> {patientInfo.name}</p>
              <p><strong>Email:</strong> {patientInfo.email}</p>
              <p><strong>Phone:</strong> {patientInfo.phone}</p>
            </div>
            
            <div className="mb-6">
              <h3 className="font-medium mb-2">Selected Treatments</h3>
              <table className="w-full mb-4">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="p-2 text-left">Treatment</th>
                    <th className="p-2 text-right">Price</th>
                    <th className="p-2 text-right">Qty</th>
                    <th className="p-2 text-right">Total</th>
                  </tr>
                </thead>
                <tbody>
                  {treatments.map(treatment => (
                    <tr key={treatment.id} className="border-b">
                      <td className="p-2">{treatment.name}</td>
                      <td className="p-2 text-right">£{treatment.price.toFixed(2)}</td>
                      <td className="p-2 text-right">{treatment.quantity}</td>
                      <td className="p-2 text-right">£{(treatment.price * treatment.quantity).toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
            {/* Promo code section */}
            <div className="mb-6">
              <h3 className="font-medium mb-2">Promo Code</h3>
              {promoCode ? (
                <div className="flex items-center">
                  <span className="mr-2">
                    Code <strong>{promoCode}</strong> applied for {discountPercent}% off
                  </span>
                  <button
                    className="text-sm text-red-500 hover:text-red-700"
                    onClick={clearPromoCode}
                    type="button"
                  >
                    Remove
                  </button>
                </div>
              ) : (
                <form onSubmit={handlePromoSubmit} className="flex">
                  <input
                    type="text"
                    value={promoInput}
                    onChange={(e) => setPromoInput(e.target.value)}
                    placeholder="Enter promo code"
                    className="flex-1 px-4 py-2 border rounded-l"
                  />
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-500 text-white rounded-r hover:bg-green-600"
                    disabled={loading.promoCode}
                  >
                    {loading.promoCode ? 'Applying...' : 'Apply'}
                  </button>
                </form>
              )}
              
              {error.promoCode && (
                <p className="text-red-500 text-sm mt-1">{error.promoCode}</p>
              )}
            </div>
            
            {/* Quote summary */}
            <div className="p-4 bg-gray-50 rounded-lg mb-6">
              <div className="flex justify-between mb-2">
                <span>Subtotal:</span>
                <span>£{subtotal.toFixed(2)}</span>
              </div>
              
              {discountPercent > 0 && (
                <div className="flex justify-between mb-2 text-green-600">
                  <span>Discount ({discountPercent}%):</span>
                  <span>-£{(subtotal * (discountPercent / 100)).toFixed(2)}</span>
                </div>
              )}
              
              <div className="flex justify-between font-bold text-lg border-t pt-2 mt-2">
                <span>Total:</span>
                <span>£{total.toFixed(2)}</span>
              </div>
            </div>
            
            <div className="flex space-x-4">
              <button
                className="px-4 py-2 border rounded hover:bg-gray-100"
                onClick={() => setStep(2)}
                type="button"
              >
                Back to Patient Info
              </button>
              
              <button
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                onClick={handleSaveQuote}
                disabled={loading.saving}
                type="button"
              >
                {loading.saving ? 'Saving Quote...' : 'Save Quote'}
              </button>
            </div>
            
            {success.save && (
              <div className="mt-4 p-4 bg-green-100 text-green-800 rounded">
                {success.save}
              </div>
            )}
            
            {error.save && (
              <div className="mt-4 p-4 bg-red-100 text-red-800 rounded">
                {error.save}
              </div>
            )}
          </div>
        )}
      </div>
    </Layout>
  );
}
UPDATE APP.TSX TO ADD THE QUOTE ROUTE Update the App.tsx file to add our standalone quote page route:
// Look for the Routes section in App.tsx and add:
<Route path="/quote" element={<StandaloneQuotePage />} />
UPDATE NAVBAR.TSX TO LINK TO THE QUOTE PAGE Find the navigation links in Navbar.tsx and update the quote link:
// Find the navigation links in Navbar.tsx
// Look for any links to "/your-quote" or similar and update them to:
<Link to="/quote" className="...">Get a Quote</Link>
ADD QUOTE LINK TO HOME PAGE Add a call-to-action button on the home page:
// Find a good spot in Home.tsx to add:
<section className="py-12 bg-blue-50">
  <div className="container mx-auto text-center px-4">
    <h2 className="text-3xl font-bold mb-4">Ready to Plan Your Dental Treatment?</h2>
    <p className="text-lg mb-8 max-w-2xl mx-auto">
      Get an instant quote for your dental procedures with our easy-to-use quote builder.
    </p>
    <Link 
      to="/quote" 
      className="px-6 py-3 bg-blue-600 text-white rounded-lg text-lg font-semibold hover:bg-blue-700"
    >
      Build Your Quote Now
    </Link>
  </div>
</section>
FIX SERVER PORT ISSUE Make sure the server is listening on the correct port:
// In server.js, find the app.listen line and update it to:
app.listen(process.env.PORT || 5000, '0.0.0.0', () => {
  console.log(`Server running on port ${process.env.PORT || 5000}`);
});
RESTART THE APPLICATION After making these changes, restart the application and test to make sure everything is working properly.