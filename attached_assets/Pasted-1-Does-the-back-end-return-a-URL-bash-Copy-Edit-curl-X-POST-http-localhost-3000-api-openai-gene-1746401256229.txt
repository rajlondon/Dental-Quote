1  Does the back‑end return a URL?
bash
Copy
Edit
curl -X POST http://localhost:3000/api/openai/generate \
     -H "Content-Type: application/json" \
     -d '{"prompt":"premium dental offer"}'
Expect: a JSON object that contains url (or imageUrl).

If you get an error object → the OpenAI call itself failed (check key, quota, model string).

If you get a URL keep it; we’ll test it next.

2  Does the file exist on disk?
bash
Copy
Edit
ls public/cached-images | grep $(basename <copied‑url> | cut -d'?' -f1)
File listed & non‑zero size → good.

Not found / size 0 → the fs.writeFile promise probably isn’t awaited before you res.json(...).

ts
Copy
Edit
// ensure this finishes
await fs.promises.writeFile(filePath, imgBuffer);
res.json({ url: `/cached-images/${fileName}?v=${Date.now()}` });
3  Can Express actually serve it?
bash
Copy
Edit
curl -I http://localhost:3000/cached-images/<filename>.png
HTTP/1.1 200 → server is exposing the folder.

404 or other → add / move this earlier than your routes:

ts
Copy
Edit
app.use("/cached-images", express.static(path.join(__dirname, "../public/cached-images")));
4  Does the browser fetch the same URL?
In DevTools → Network → Img clear the log, trigger a fresh generation.

You must see the request for cached-images/<filename>.png?....

If you see it	and	Then
Status 200, but Preview tab is blank / size 0 B	Back‑end saved an empty file → revisit Step 2 fix.	
Status 404	Path mismatch → check Step 3.	
No request at all	Front‑end never receives or sets imgUrl. console.log(imgUrl) just before the <img> render.	

5  Quick rescue until it’s fixed
Add a dead‑simple fallback so the page never looks broken:

tsx
Copy
Edit
const safeSrc = imgUrl || "/img/placeholder-offer.png";
return <img src={safeSrc} alt="Offer" />;
That keeps UX clean while you zero‑in on the failing hop.

Common gotcha recap
Symptom	Root cause
PNG is zero bytes	Not awaiting writeFile; writing the stream wrong.
404 even though file exists	express.static pointing to wrong dir / mounted after other routes.
Works on localhost, fails on Replit sub‑domain	Replit’s reverse proxy strips / or adds a prefix—log req.originalUrl inside the static middleware.
Works until you redeploy	Cache dir recreated; make sure you mkdir -p on boot.

Please run Step 1; paste back the exact JSON (or error) you receive. That single output tells us whether to keep digging in OpenAI > file‑write > static‑serve > front‑end. We’ll nail the fix right after that.






