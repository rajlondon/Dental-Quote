// client/src/components/PromoCodeInput.tsx
import React, { useState } from 'react';
import { useQuote } from '../contexts/QuoteContext';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Alert, AlertDescription } from './ui/alert';
import { CheckCircle, XCircle } from 'lucide-react';

export function PromoCodeInput() {
  const [inputCode, setInputCode] = useState('');
  const [error, setError] = useState('');
  const { 
    promoCode, 
    applyPromoCode, 
    clearPromoCode, 
    isApplyingPromo,
    discountAmount 
  } = useQuote();
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!inputCode.trim()) {
      setError('Please enter a promo code');
      return;
    }
    
    try {
      setError('');
      await applyPromoCode(inputCode.trim());
    } catch (err) {
      setError(err.message || 'Failed to apply promo code');
    }
  };
  
  // If promo code is already applied, show active state
  if (promoCode) {
    return (
      <div className="rounded-md bg-green-50 p-4 mb-4 border border-green-200">
        <div className="flex items-center">
          <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
          <div className="flex-1">
            <p className="text-sm font-medium text-green-800">
              Promo code <span className="font-bold">{promoCode}</span> applied!
            </p>
            <p className="text-sm text-green-700 mt-1">
              You saved {new Intl.NumberFormat('en-GB', { 
                style: 'currency', 
                currency: 'GBP' 
              }).format(discountAmount)}
            </p>
          </div>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={clearPromoCode}
            className="ml-4"
          >
            Remove
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="space-y-4">
      <form onSubmit={handleSubmit} className="flex space-x-2">
        <Input
          type="text"
          value={inputCode}
          onChange={(e) => setInputCode(e.target.value)}
          placeholder="Enter promo code"
          className="flex-1"
          disabled={isApplyingPromo}
        />
        <Button 
          type="submit" 
          disabled={isApplyingPromo || !inputCode.trim()}
          className="whitespace-nowrap"
        >
          {isApplyingPromo ? 'Applying...' : 'Apply Code'}
        </Button>
      </form>
      
      {error && (
        <Alert variant="destructive">
          <XCircle className="h-4 w-4 mr-2" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
    </div>
  );
}
