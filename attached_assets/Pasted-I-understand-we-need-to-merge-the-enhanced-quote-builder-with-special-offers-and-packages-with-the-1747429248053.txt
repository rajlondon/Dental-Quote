I understand we need to merge the enhanced quote builder (with special offers and packages) with the original dental chart functionality. Here's a detailed plan to integrate both:

1. CREATE A COMBINED QUOTE BUILDER COMPONENT

First, let's create a new component that combines both functionalities:

```jsx
// client/src/components/quotes/ComprehensiveQuoteBuilder.tsx
import React, { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { Button } from '../ui/button';
import { Card, CardContent } from '../ui/card';
import { useQuoteStore } from '../../stores/quoteStore';
import { DentalChart } from '../dental/DentalChart'; // Import the dental chart component
import { TreatmentPackageSelector } from '../packages/TreatmentPackageSelector';
import { SpecialOffersSelector } from '../offers/SpecialOffersSelector';
import { PatientInfoForm } from './PatientInfoForm';
import { QuoteSummary } from './QuoteSummary';
import { QuotePrintView } from './QuotePrintView';
import { toast } from '../ui/use-toast';

// Import the hooks for special offers and packages
import { useTreatmentPackages } from '../../hooks/use-treatment-packages';
import { useSpecialOffers } from '../../hooks/use-special-offers';

export function ComprehensiveQuoteBuilder() {
  // Quote store state and actions
  const {
    treatments,
    addTreatment,
    removeTreatment,
    updateQuantity,
    subtotal,
    discount,
    total,
    discountPercent,
    promoCode,
    applyPromoCode,
    clearPromoCode,
    patientInfo,
    updatePatientInfo,
    currentStep,
    setCurrentStep,
    saveQuote,
    error,
    success,
    loading
  } = useQuoteStore();

  // State for treatment packages and special offers
  const { 
    packages, 
    selectedPackage, 
    selectPackage, 
    packageSavings 
  } = useTreatmentPackages();
  
  const { 
    offers, 
    selectedOffer, 
    selectOffer, 
    offerDiscount 
  } = useSpecialOffers();

  // State for print modal
  const [showPrintModal, setShowPrintModal] = useState(false);
  
  // State for promo code input
  const [promoInput, setPromoInput] = useState('');
  
  // State for active tab
  const [activeTab, setActiveTab] = useState('treatments');

  // Handle promo code submission
  const handlePromoSubmit = (e) => {
    e.preventDefault();
    if (promoInput.trim()) {
      applyPromoCode(promoInput);
      // Don't reset the form
    }
  };

  // Handle save quote
  const handleSaveQuote = () => {
    saveQuote({
      treatments,
      patientInfo,
      packageInfo: selectedPackage,
      offerInfo: selectedOffer,
      promoCode,
      subtotal,
      discount,
      total
    });
  };

  // Handle print quote
  const handlePrintQuote = () => {
    setShowPrintModal(true);
  };

  // Handle next step
  const handleNextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(currentStep + 1);
    }
  };

  // Handle previous step
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  // Get the current step content
  const getCurrentStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <Tabs defaultValue="treatments" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="treatments">Treatments</TabsTrigger>
              <TabsTrigger value="packages">Packages</TabsTrigger>
              <TabsTrigger value="specialoffers">Special Offers</TabsTrigger>
            </TabsList>
            
            <TabsContent value="treatments" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="text-lg font-medium mb-2">Select Treatments</h3>
                  <div className="space-y-2">
                    {/* List available treatments */}
                    {/* This is where we'll integrate the dental chart */}
                    <Card>
                      <CardContent className="pt-4">
                        <h4 className="font-medium mb-2">Dental Chart</h4>
                        <DentalChart onSelectTooth={(toothData) => {
                          // Handle tooth selection and add treatment
                          addTreatment({
                            id: `tooth-${toothData.toothNumber}`,
                            name: `Treatment for Tooth ${toothData.toothNumber}`,
                            price: 150, // Default price
                            category: 'dental',
                            quantity: 1,
                            toothData
                          });
                        }} />
                      </CardContent>
                    </Card>
                    
                    {/* Regular treatment list */}
                    <Card>
                      <CardContent className="pt-4">
                        <h4 className="font-medium mb-2">Common Treatments</h4>
                        {/* List of common treatments */}
                        {[
                          { id: 't1', name: 'Dental Checkup', price: 50, category: 'preventive' },
                          { id: 't2', name: 'Teeth Cleaning', price: 75, category: 'preventive' },
                          { id: 't3', name: 'X-Ray', price: 120, category: 'diagnostic' },
                          { id: 't4', name: 'Filling', price: 150, category: 'restorative' },
                          { id: 't5', name: 'Root Canal', price: 800, category: 'restorative' }
                        ].map(treatment => (
                          <div key={treatment.id} className="flex justify-between items-center p-2 border-b">
                            <div>
                              <p className="font-medium">{treatment.name}</p>
                              <p className="text-sm text-muted-foreground">£{treatment.price}</p>
                            </div>
                            <Button 
                              onClick={() => addTreatment(treatment)}
                              size="sm"
                            >
                              Add
                            </Button>
                          </div>
                        ))}
                      </CardContent>
                    </Card>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">Your Treatments</h3>
                  <Card>
                    <CardContent className="pt-4">
                      {treatments.length === 0 ? (
                        <p className="text-muted-foreground italic">No treatments selected</p>
                      ) : (
                        <div className="space-y-2">
                          {treatments.map(treatment => (
                            <div key={treatment.id} className="flex justify-between items-center p-2 border-b">
                              <div>
                                <p className="font-medium">{treatment.name}</p>
                                <p className="text-sm text-muted-foreground">£{treatment.price} each</p>
                              </div>
                              <div className="flex items-center space-x-2">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => updateQuantity(treatment.id, Math.max(1, treatment.quantity - 1))}
                                >
                                  -
                                </Button>
                                <span>{treatment.quantity}</span>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => updateQuantity(treatment.id, treatment.quantity + 1)}
                                >
                                  +
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => removeTreatment(treatment.id)}
                                  className="text-red-500"
                                >
                                  Remove
                                </Button>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  
                  {/* Quote Summary */}
                  <QuoteSummary 
                    treatments={treatments}
                    subtotal={subtotal}
                    discount={discount}
                    total={total}
                    promoCode={promoCode}
                    discountPercent={discountPercent}
                    packageSavings={packageSavings}
                    packageName={selectedPackage?.name}
                    offerName={selectedOffer?.name}
                    offerDiscount={offerDiscount}
                    className="mt-4"
                  />
                  
                  {/* Promo Code Form */}
                  <Card className="mt-4">
                    <CardContent className="pt-4">
                      <h4 className="font-medium mb-2">Promo Code</h4>
                      {promoCode ? (
                        <div className="flex items-center justify-between">
                          <p>
                            Applied: <strong>{promoCode}</strong> ({discountPercent}% off)
                          </p>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={clearPromoCode}
                            className="text-red-500"
                          >
                            Remove
                          </Button>
                        </div>
                      ) : (
                        <form onSubmit={handlePromoSubmit} className="flex space-x-2">
                          <input
                            type="text"
                            value={promoInput}
                            onChange={(e) => setPromoInput(e.target.value)}
                            placeholder="Enter promo code"
                            className="flex-1 px-3 py-2 border rounded-md"
                          />
                          <Button type="submit" disabled={loading.promoCode}>
                            {loading.promoCode ? 'Applying...' : 'Apply'}
                          </Button>
                        </form>
                      )}
                      {error.promoCode && (
                        <p className="text-red-500 text-sm mt-1">{error.promoCode}</p>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="packages" className="space-y-4">
              <TreatmentPackageSelector 
                packages={packages}
                selectedPackageId={selectedPackage?.id}
                onSelectPackage={selectPackage}
              />
              
              {/* Show selected package details */}
              {selectedPackage && (
                <Card className="mt-4">
                  <CardContent className="pt-4">
                    <h4 className="font-medium mb-2">Selected Package: {selectedPackage.name}</h4>
                    <p className="text-sm text-muted-foreground mb-2">{selectedPackage.description}</p>
                    <p className="font-medium">Savings: £{packageSavings}</p>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
            
            <TabsContent value="specialoffers" className="space-y-4">
              <SpecialOffersSelector 
                offers={offers}
                selectedOfferId={selectedOffer?.id}
                onSelectOffer={selectOffer}
              />
              
              {/* Show selected offer details */}
              {selectedOffer && (
                <Card className="mt-4">
                  <CardContent className="pt-4">
                    <h4 className="font-medium mb-2">Selected Offer: {selectedOffer.name}</h4>
                    <p className="text-sm text-muted-foreground mb-2">{selectedOffer.description}</p>
                    <p className="font-medium">Discount: {selectedOffer.discountPercent}% off</p>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
          </Tabs>
        );
      
      case 2:
        return (
          <div className="max-w-2xl mx-auto">
            <PatientInfoForm 
              patientInfo={patientInfo} 
              updatePatientInfo={updatePatientInfo} 
            />
          </div>
        );
      
      case 3:
        return (
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardContent className="pt-6">
                <h3 className="text-xl font-medium mb-4">Review Your Quote</h3>
                
                {/* Patient Info Summary */}
                <div className="mb-4">
                  <h4 className="font-medium mb-2">Patient Information</h4>
                  <p><strong>Name:</strong> {patientInfo.name}</p>
                  <p><strong>Email:</strong> {patientInfo.email}</p>
                  <p><strong>Phone:</strong> {patientInfo.phone}</p>
                </div>
                
                {/* Treatments Summary */}
                <div className="mb-4">
                  <h4 className="font-medium mb-2">Selected Treatments</h4>
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="bg-muted">
                        <th className="text-left p-2">Treatment</th>
                        <th className="text-right p-2">Price</th>
                        <th className="text-right p-2">Qty</th>
                        <th className="text-right p-2">Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      {treatments.map(treatment => (
                        <tr key={treatment.id} className="border-b">
                          <td className="p-2">{treatment.name}</td>
                          <td className="text-right p-2">£{treatment.price.toFixed(2)}</td>
                          <td className="text-right p-2">{treatment.quantity}</td>
                          <td className="text-right p-2">£{(treatment.price * treatment.quantity).toFixed(2)}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                {/* Package Info (if selected) */}
                {selectedPackage && (
                  <div className="mb-4">
                    <h4 className="font-medium mb-2">Treatment Package</h4>
                    <p><strong>{selectedPackage.name}</strong> - Savings: £{packageSavings.toFixed(2)}</p>
                    <p className="text-sm text-muted-foreground">{selectedPackage.description}</p>
                  </div>
                )}
                
                {/* Special Offer (if selected) */}
                {selectedOffer && (
                  <div className="mb-4">
                    <h4 className="font-medium mb-2">Special Offer</h4>
                    <p><strong>{selectedOffer.name}</strong> - {selectedOffer.discountPercent}% off</p>
                    <p className="text-sm text-muted-foreground">{selectedOffer.description}</p>
                  </div>
                )}
                
                {/* Promo Code (if applied) */}
                {promoCode && (
                  <div className="mb-4">
                    <h4 className="font-medium mb-2">Promo Code</h4>
                    <p><strong>{promoCode}</strong> - {discountPercent}% discount applied</p>
                  </div>
                )}
                
                {/* Quote Total */}
                <div className="bg-muted p-4 rounded-md">
                  <div className="flex justify-between mb-2">
                    <span>Subtotal:</span>
                    <span>£{subtotal.toFixed(2)}</span>
                  </div>
                  
                  {discount > 0 && (
                    <div className="flex justify-between mb-2 text-green-600">
                      <span>Discount:</span>
                      <span>-£{discount.toFixed(2)}</span>
                    </div>
                  )}
                  
                  <div className="flex justify-between font-bold text-lg border-t pt-2 mt-2">
                    <span>Total:</span>
                    <span>£{total.toFixed(2)}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        );
      
      case 4:
        return (
          <div className="max-w-2xl mx-auto text-center">
            <div className="bg-green-50 border border-green-200 rounded-md p-6 mb-6">
              <h3 className="text-xl font-medium text-green-700 mb-2">Quote Completed!</h3>
              <p className="mb-4">Your quote has been successfully saved. You can view it in your account dashboard.</p>
              
              <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
                <Button onClick={handlePrintQuote}>
                  Print Quote
                </Button>
                <Button variant="outline" onClick={() => window.location.href = '/quotes'}>
                  View All Quotes
                </Button>
                <Button variant="outline" onClick={() => {
                  // Reset the quote store and start a new quote
                  window.location.reload();
                }}>
                  Create New Quote
                </Button>
              </div>
            </div>
            
            {/* Success/Error Messages */}
            {success.save && (
              <div className="bg-green-50 border border-green-200 rounded-md p-4 mb-4 text-green-700">
                {success.save}
              </div>
            )}
            
            {error.save && (
              <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-4 text-red-700">
                {error.save}
              </div>
            )}
          </div>
        );
      
      default:
        return null;
    }
  };

  return (
    <div className="container mx-auto p-4">
      {/* Progress Indicator */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          {[1, 2, 3, 4].map(step => (
            <div 
              key={step}
              className={`flex flex-col items-center ${step <= currentStep ? 'text-primary' : 'text-muted-foreground'}`}
            >
              <div 
                className={`w-8 h-8 rounded-full flex items-center justify-center mb-2 ${
                  step < currentStep 
                    ? 'bg-primary text-white' 
                    : step === currentStep 
                    ? 'border-2 border-primary text-primary' 
                    : 'border-2 border-muted text-muted-foreground'
                }`}
              >
                {step < currentStep ? '✓' : step}
              </div>
              <span className="text-sm">
                {step === 1 ? 'Treatments' : 
                 step === 2 ? 'Patient Info' : 
                 step === 3 ? 'Review' : 'Complete'}
              </span>
            </div>
          ))}
          
          {/* Progress Bar */}
          <div className="absolute left-0 right-0 h-1 bg-muted">
            <div 
              className="h-1 bg-primary transition-all duration-300"
              style={{ width: `${(currentStep - 1) * 33.33}%` }}
            ></div>
          </div>
        </div>
      </div>
      
      {/* Current Step Content */}
      {getCurrentStepContent()}
      
      {/* Navigation Buttons */}
      <div className="flex justify-between mt-8">
        {currentStep > 1 && (
          <Button variant="outline" onClick={handlePrevStep}>
            Previous
          </Button>
        )}
        
        {currentStep < 3 && (
          <Button 
            onClick={handleNextStep}
            disabled={
              (currentStep === 1 && treatments.length === 0) ||
              (currentStep === 2 && (!patientInfo.name || !patientInfo.email || !patientInfo.phone))
            }
            className="ml-auto"
          >
            Next
          </Button>
        )}
        
        {currentStep === 3 && (
          <Button 
            onClick={handleSaveQuote}
            disabled={loading.saving}
            className="ml-auto"
          >
            {loading.saving ? 'Saving...' : 'Complete Quote'}
          </Button>
        )}
      </div>
      
      {/* Print Modal */}
      {showPrintModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">Print Quote</h2>
              <Button
                variant="ghost"
                onClick={() => setShowPrintModal(false)}
              >
                Close
              </Button>
            </div>
            
            <QuotePrintView
              patientInfo={patientInfo}
              treatments={treatments}
              subtotal={subtotal}
              discount={discount}
              total={total}
              promoCode={promoCode}
              discountPercent={discountPercent}
              packageInfo={selectedPackage}
              offerInfo={selectedOffer}
            />
            
            <div className="flex justify-end mt-4 space-x-2">
              <Button variant="outline" onClick={() => setShowPrintModal(false)}>
                Cancel
              </Button>
              <Button onClick={() => {
                window.print();
              }}>
                Print
              </Button>
              <Button onClick={() => {
                // Logic to email the quote
                toast({
                  title: "Quote Emailed",
                  description: "The quote has been sent to your email address.",
                });
                setShowPrintModal(false);
              }}>
                Email Quote
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ComprehensiveQuoteBuilder;
CREATE A DENTAL CHART COMPONENT
Now let's create a simplified version of the dental chart component that will integrate with our quote builder:

// client/src/components/dental/DentalChart.tsx
import React, { useState } from 'react';
import { Button } from '../ui/button';
import { Card, CardContent } from '../ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';

// Define the tooth data structure
interface ToothData {
  toothNumber: number;
  quadrant: number;
  position: number;
  treatment?: string;
  condition?: string;
}

// Define the DentalChart component props
interface DentalChartProps {
  onSelectTooth: (toothData: ToothData) => void;
}

export function DentalChart({ onSelectTooth }: DentalChartProps) {
  const [selectedTooth, setSelectedTooth] = useState<ToothData | null>(null);
  const [selectedTreatment, setSelectedTreatment] = useState<string>('');
  const [activeView, setActiveView] = useState<string>('adult');
  
  // Define the adult teeth layout
  const adultTeeth = [
    // Upper right quadrant (1)
    [18, 17, 16, 15, 14, 13, 12, 11],
    // Upper left quadrant (2)
    [21, 22, 23, 24, 25, 26, 27, 28],
    // Lower left quadrant (3)
    [31, 32, 33, 34, 35, 36, 37, 38],
    // Lower right quadrant (4)
    [48, 47, 46, 45, 44, 43, 42, 41],
  ];
  
  // Define the child teeth layout
  const childTeeth = [
    // Upper right quadrant (5)
    [55, 54, 53, 52, 51],
    // Upper left quadrant (6)
    [61, 62, 63, 64, 65],
    // Lower left quadrant (7)
    [71, 72, 73, 74, 75],
    // Lower right quadrant (8)
    [85, 84, 83, 82, 81],
  ];
  
  // Treatment options
  const treatments = [
    { id: 'filling', name: 'Filling', price: 120 },
    { id: 'extraction', name: 'Extraction', price: 150 },
    { id: 'root-canal', name: 'Root Canal', price: 750 },
    { id: 'crown', name: 'Crown', price: 850 },
    { id: 'bridge', name: 'Bridge', price: 1200 },
    { id: 'implant', name: 'Implant', price: 2500 },
    { id: 'veneer', name: 'Veneer', price: 600 },
    { id: 'whitening', name: 'Whitening', price: 350 },
  ];
  
  // Handle tooth selection
  const handleToothClick = (toothNumber: number, quadrant: number, position: number) => {
    const toothData = { toothNumber, quadrant, position };
    setSelectedTooth(toothData);
  };
  
  // Handle treatment selection
  const handleTreatmentSelect = (treatmentId: string) => {
    setSelectedTreatment(treatmentId);
  };
  
  // Handle adding treatment to quote
  const handleAddToQuote = () => {
    if (selectedTooth && selectedTreatment) {
      const treatment = treatments.find(t => t.id === selectedTreatment);
      if (treatment) {
        onSelectTooth({
          ...selectedTooth,
          treatment: treatment.name,
        });
        
        // Reset selection
        setSelectedTooth(null);
        setSelectedTreatment('');
      }
    }
  };
  
  // Render the dental chart
  const renderTeethGrid = (teethLayout: number[][]) => {
    return (
      <div className="dental-chart">
        {teethLayout.map((row, rowIndex) => (
          <div key={rowIndex} className={`flex justify-center my-2 ${rowIndex === 1 || rowIndex === 2 ? 'flex-row-reverse' : ''}`}>
            {row.map((toothNumber, position) => {
              const quadrant = rowIndex + 1;
              return (
                <div 
                  key={toothNumber}
                  className={`
                    w-10 h-10 m-1 flex items-center justify-center border rounded-md cursor-pointer
                    ${selectedTooth?.toothNumber === toothNumber ? 'bg-blue-100 border-blue-500' : 'hover:bg-gray-100'}
                  `}
                  onClick={() => handleToothClick(toothNumber, quadrant, position)}
                >
                  {toothNumber}
                </div>
              );
            })}
          </div>
        ))}
      </div>
    );
  };
  
  return (
    <div className="dental-chart-container">
      <Tabs defaultValue="adult" value={activeView} onValueChange={setActiveView}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="adult">Adult Teeth</TabsTrigger>
          <TabsTrigger value="child">Child Teeth</TabsTrigger>
        </TabsList>
        
        <TabsContent value="adult" className="mt-4">
          {renderTeethGrid(adultTeeth)}
        </TabsContent>
        
        <TabsContent value="child" className="mt-4">
          {renderTeethGrid(childTeeth)}
        </TabsContent>
      </Tabs>
      
      {selectedTooth && (
        <Card className="mt-4">
          <CardContent className="pt-4">
            <h4 className="font-medium mb-2">Tooth {selectedTooth.toothNumber} Selected</h4>
            <p className="text-sm text-muted-foreground mb-4">Select a treatment for this tooth:</p>
            
            <div className="grid grid-cols-2 gap-2 mb-4">
              {treatments.map(treatment => (
                <div 
                  key={treatment.id}
                  className={`
                    p-2 border rounded-md cursor-pointer
                    ${selectedTreatment === treatment.id ? 'bg-blue-100 border-blue-500' : 'hover:bg-gray-100'}
                  `}
                  onClick={() => handleTreatmentSelect(treatment.id)}
                >
                  <p className="font-medium">{treatment.name}</p>
                  <p className="text-sm text-muted-foreground">£{treatment.price}</p>
                </div>
              ))}
            </div>
            
            <div className="flex justify-end">
              <Button
                variant="outline"
                className="mr-2"
                onClick={() => {
                  setSelectedTooth(null);
                  setSelectedTreatment('');
                }}
              >
                Cancel
              </Button>
              <Button
                onClick={handleAddToQuote}
                disabled={!selectedTreatment}
              >
                Add to Quote
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default DentalChart;
CREATE A DEDICATED PAGE FOR THE COMPREHENSIVE QUOTE BUILDER
// client/src/pages/ComprehensiveQuotePage.tsx
import React from 'react';
import { Layout } from '../components/layouts/Layout';
import { ComprehensiveQuoteBuilder } from '../components/quotes/ComprehensiveQuoteBuilder';

export default function ComprehensiveQuotePage() {
  return (
    <Layout>
      <div className="container mx-auto py-8">
        <h1 className="text-3xl font-bold mb-6">Comprehensive Treatment Quote</h1>
        <p className="text-lg text-muted-foreground mb-8">
          Create a detailed treatment quote with our interactive dental chart, 
          special offers, and treatment packages.
        </p>
        
        <ComprehensiveQuoteBuilder />
      </div>
    </Layout>
  );
}
UPDATE THE APP.TSX ROUTES
Add the new comprehensive quote page to your routes:

// In App.tsx, add this route
<Route path="/comprehensive-quote" element={<ComprehensiveQuotePage />} />
UPDATE THE NAVBAR TO INCLUDE THE COMPREHENSIVE QUOTE OPTION
Update the Navbar.tsx file to include a link to the comprehensive quote builder:

// In the navItems array in Navbar.tsx, add:
{ label: 'Get a Quote', href: '/comprehensive-quote' },
ADD LINKS ON THE HOME PAGE
Update the Home page to include a link to the comprehensive quote builder:

// In Home.tsx, add this section:
<section className="py-12 bg-blue-50">
  <div className="container mx-auto text-center px-4">
    <h2 className="text-3xl font-bold mb-4">Create Your Dental Treatment Plan</h2>
    <p className="text-lg mb-8 max-w-2xl mx-auto">
      Use our comprehensive quote builder with interactive dental chart, special offers,
      and treatment packages to plan your perfect dental journey.
    </p>
    <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
      <Link 
        to="/comprehensive-quote" 
        className="px-6 py-3 bg-blue-600 text-white rounded-lg text-lg font-semibold hover:bg-blue-700"
      >
        Build Comprehensive Quote
      </Link>
      <Link 
        to="/quote" 
        className="px-6 py-3 bg-white border border-blue-600 text-blue-600 rounded-lg text-lg font-semibold hover:bg-blue-50"
      >
        Quick Quote
      </Link>
    </div>
  </div>
</section>
ENSURE THE QUOTE STORE SUPPORTS DENTAL CHART DATA
Update your quoteStore.ts file to handle dental chart data:

// In quoteStore.ts, update the Treatment interface:
interface Treatment {
  id: string;
  name: string;
  price: number;
  category: string;
  quantity: number;
  toothData?: {
    toothNumber: number;
    quadrant: number;
    position: number;
    treatment?: string;
    condition?: string;
  };
}
This comprehensive integration provides the best of both worlds:

The dental chart functionality from the original quote builder
The special offers, treatment packages, and enhanced features from the new quote builder
A clean, step-by-step workflow for users
Proper patient information collection and quote saving
Users can now choose between:

A quick quote builder (simple and fast)
A comprehensive quote builder (with dental chart and all advanced features)
Let me know if you'd like me to explain any part of this integration in more detail!


This plan provides a comprehensive approach to merge the dental chart functionality with the enhanced quote builder features. The key advantages of this approach are:

1. **Preserves existing functionality** - It keeps the dental chart feature that users already value
2. **Adds new capabilities** - It incorporates special offers, treatment packages, and email functionality
3. **Provides user choice** - It gives users options between quick quotes and comprehensive quotes
4. **Maintains integration** - It works with the existing navigation and site structure
5. **Improves user experience** - The step-by-step workflow makes the process clear and manageable