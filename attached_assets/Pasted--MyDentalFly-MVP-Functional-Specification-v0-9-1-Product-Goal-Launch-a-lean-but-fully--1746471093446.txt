# MyDentalFly – MVP Functional Specification (v0.9)

---
## 1  Product Goal
Launch a lean but fully usable dental‑travel booking platform that lets prospects:
1. Compare indicative treatment pricing across verified clinics.
2. Build a personalised quote via a guided 6‑step wizard (incl. dental chart).
3. Register/Login to a secure **Patient Portal** to message the chosen clinic and upload records.
4. (Admin) View leads & treatment plans in a back‑office dashboard.

> **Time‑box**:  ⌚ 2 weeks to public beta.

---
## 2  User Stories
| ID | As a … | I want to … | So that … |
|----|---------|-------------|-----------|
| U1 | Visitor | search by city + date | I can see clinics that match my travel window |
| U2 | Visitor | step through a quote wizard with layman explanations | I understand treatments & build confidence |
| U3 | Visitor | mark specific teeth on a chart | the quote reflects my exact needs |
| U4 | Visitor | receive a results list sorted by relevance | I can pick the best clinic quickly |
| U5 | Visitor | create an account & message my chosen clinic | we can finalise a treatment plan |
| U6 | Clinic | view incoming quotes with patient details | I can reply with an accurate proposal |
| U7 | Admin  | see all quotes, users & clinics in one panel | our team can manage the funnel |
| U8 | Visitor | click a **Special Offer** and have it respected end‑to‑end | I get the deal I selected |

---
## 3  Information Architecture & Routes
| Route | Component Tree (top 🠒 leaf) | Auth? |
|-------|-------------------------------|------|
| `/` (Home) | `HeroSearch` / `SpecialOffersCarousel` / `PopularClinics` / `Packages` | No |
| `/quote` | `QuoteWizard` (6 steps)<br>  – `GeneralForm`<br>  – `DentalChart`<br>  – `TreatmentPicker` | No |
| `/results` | `ClinicResults` → `ClinicCard` | No |
| `/portal` | `AuthGate` → `PatientDashboard` | Yes (Patient) |
| `/admin` | `AuthGate` → `AdminPanel` | Yes (Admin) |

---
## 4  Data Model (Postgres via Supabase)
### 4.1 Tables
```mermaid
erDiagram
    patients ||--o{ quotes : makes
    clinics  ||--o{ quotes : receives
    quotes   ||--o{ quote_items : has
    quotes   ||--o{ messages : has
    special_offers ||--o{ quotes : may_apply
```

| Table | Core Fields |
|-------|-------------|
| **patients** | `id` PK, `name`, `email`, `phone`, `password_hash`, `created_at` |
| **clinics** | `id` PK, `name`, `city`, `rating`, `price_band`, `features` (JSON), `is_promoted` |
| **special_offers** | `id` PK, `clinic_id` FK, `title`, `summary`, `badge_colour`, `start`, `end`, `payload` (JSON) |
| **quotes** | `id` PK, `patient_id` FK, `selected_clinic_id` FK NULL, `status` (draft/submitted/accepted), `created_at` |
| **quote_items** | `id` PK, `quote_id` FK, `treatment_code`, `quantity`, `unit_price_est` |
| **messages** | `id` PK, `quote_id` FK, `sender_role` (patient/clinic/admin), `body`, `created_at` |

---
## 5  Business Logic
### 5.1 Quote Wizard
* Saves progress locally (localStorage) + remotely if logged‑in.
* Price table for treatments fetched from `/api/prices?city={city}` (cached 1 day).

### 5.2 Results Ranking
1. If the visitor arrived from **Special Offer ID X**, surface `clinic_id` linked to that offer at index 0.
2. Remaining clinics ordered by composite score *(rating × (1 – price_percentile))*.

### 5.3 Special Offer Integration
| Step | Behaviour |
|------|-----------|
| 1️⃣ Click on `SpecialOfferCard` | Store `offer_id` in `sessionStorage.offer` and prefill `search.city = offer.city`. Navigate to `/quote`. |
| 2️⃣ Quote wizard | Normal flow. No UI change. |
| 3️⃣ Results page | Hook sorts clinic list per 5.2 and renders `ClinicCard.SpecialOfferBadge` (title + “Save 20%”) on that first card. |
| 4️⃣ Select clinic | In `POST /api/quotes`, include `offer_id`. Back‑end: create `quote_items` rows specified by `special_offers.payload`. |
| 5️⃣ Patient Portal | Treatment list shows the offer items flagged with a 🎁 icon. |
| 6️⃣ Clinic Dashboard | Quote has `special_offer_id` so staff can honour it in the final plan. |
| 7️⃣ Expiry | Nightly cron marks `special_offers` expired; front‑end hides expired offers. |

Edge‑Cases:
* Offer clicked **after** a partial quote already exists → prompt “Apply offer to current plan?”
* Offer requires min treatment quantity → validate in back‑end before saving quote.

---
## 6  Environment Variables (Replit ➞ Secrets Manager)
| Key | Description |
|-----|-------------|
| `SUPABASE_URL` / `SUPABASE_ANON_KEY` | DB + Auth gateway |
| `MAILJET_API_KEY` / `MAILJET_SECRET` | Transactional emails |
| `STRIPE_SECRET_KEY` | Future payments (Phase 2) |
| `JWT_SECRET` | API auth between front & back end |

_Nothing else gets added until Phase 2._

---
## 7  Non‑Functional Requirements
* **Performance**: LCP < 2 s on 3G for `/` & `/quote`.
* **Security**: Supabase Row‑Level‑Security active; no public bucket for records.
* **GDPR**: user can delete account & files from portal.
* **WCAG AA** colour & contrast.

---
## 8  Definition of Done
1. All user stories U1‑U8 demo‑able on staging.
2. `npm run test` passes ≥ 90% statements covered.
3. `docker build . && docker run …` serves prod build without crash.
4. Replit preview + custom domain respond **200** for routes listed in §3.
5. Smoke checklist signed off (see `/docs/99_release_checklist.md`).

---
## 9  Phase 2 Backlog (post‑launch)
* Multi‑currency & locale switching
* AI image generation for missing clinic photos
* CRUD UI for Special Offers & Packages in Admin panel
* Payment capture (£200 deposit) via Stripe
* CRM webhooks → HubSpot

---
© 2025 MyDentalFly

