# Admin Promo Manager Frontend Implementation

## 1. Admin Promotions Page

Create a new page component at `client/src/pages/admin/PromotionsPage.tsx`:

```tsx
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { AdminLayout } from '../../components/layouts/AdminLayout';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Table } from '../../components/ui/table';
import { toast } from '../../components/ui/use-toast';
import { CreatePromotionModal } from '../../components/admin/CreatePromotionModal';
import { EditPromotionModal } from '../../components/admin/EditPromotionModal';
import { formatDate, formatCurrency } from '../../utils/format';

export default function PromotionsPage() {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [editingPromotion, setEditingPromotion] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('active');
  
  const { data: promotions, isLoading, refetch } = useQuery({
    queryKey: ['admin', 'promotions', statusFilter],
    queryFn: async () => {
      const response = await fetch(`/api/admin/promotions?status=${statusFilter}`);
      if (!response.ok) throw new Error('Failed to fetch promotions');
      return response.json();
    }
  });
  
  const filteredPromotions = promotions?.filter(promo => 
    promo.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    promo.title.toLowerCase().includes(searchTerm.toLowerCase())
  ) || [];
  
  const handleCreateSuccess = () => {
    toast({
      title: 'Promotion created',
      description: 'The promotion has been created successfully',
      variant: 'success',
    });
    refetch();
    setIsCreateModalOpen(false);
  };
  
  const handleEditSuccess = () => {
    toast({
      title: 'Promotion updated',
      description: 'The promotion has been updated successfully',
      variant: 'success',
    });
    refetch();
    setEditingPromotion(null);
  };
  
  const handleStatusToggle = async (id, currentStatus) => {
    try {
      const response = await fetch(`/api/admin/promotions/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ is_active: !currentStatus })
      });
      
      if (!response.ok) throw new Error('Failed to update promotion status');
      
      toast({
        title: 'Status updated',
        description: `Promotion is now ${currentStatus ? 'inactive' : 'active'}`,
        variant: 'success',
      });
      
      refetch();
    } catch (error) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    }
  };
  
  return (
    <AdminLayout title="Promotion Management">
      <div className="flex justify-between items-center mb-6">
        <div className="flex gap-4 items-center">
          <Input
            placeholder="Search promotions..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-64"
          />
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-3 py-2 border rounded-md"
          >
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
            <option value="all">All</option>
          </select>
        </div>
        
        <Button onClick={() => setIsCreateModalOpen(true)}>
          Create Promotion
        </Button>
      </div>
      
      {isLoading ? (
        <div className="text-center py-8">Loading promotions...</div>
      ) : (
        <>
          <Table>
            <thead>
              <tr>
                <th>Code</th>
                <th>Title</th>
                <th>Type</th>
                <th>Value</th>
                <th>Expiry</th>
                <th>Status</th>
                <th>Clinic</th>
                <th>Uses</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredPromotions.map(promo => (
                <tr key={promo.id}>
                  <td className="font-mono">{promo.code}</td>
                  <td>{promo.title}</td>
                  <td>{promo.discount_type === 'PERCENT' ? 'Percentage' : 'Fixed'}</td>
                  <td>
                    {promo.discount_type === 'PERCENT' 
                      ? `${promo.discount_value}%` 
                      : formatCurrency(promo.discount_value)}
                  </td>
                  <td>{formatDate(promo.end_date)}</td>
                  <td>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      promo.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {promo.is_active ? 'Active' : 'Inactive'}
                    </span>
                  </td>
                  <td>{promo.clinic_id ? promo.clinic_name : 'All Clinics'}</td>
                  <td>{promo.current_uses || 0}/{promo.max_uses || 'âˆž'}</td>
                  <td className="flex gap-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => setEditingPromotion(promo)}
                    >
                      Edit
                    </Button>
                    <Button
                      variant={promo.is_active ? "destructive" : "success"}
                      size="sm"
                      onClick={() => handleStatusToggle(promo.id, promo.is_active)}
                    >
                      {promo.is_active ? 'Deactivate' : 'Activate'}
                    </Button>
                  </td>
                </tr>
              ))}
              
              {filteredPromotions.length === 0 && (
                <tr>
                  <td colSpan={9} className="text-center py-4">
                    No promotions found
                  </td>
                </tr>
              )}
            </tbody>
          </Table>
          
          <div className="mt-6 flex justify-between">
            <div>
              <strong>Total:</strong> {filteredPromotions.length} promotions
            </div>
            <Button variant="outline" onClick={() => {
              const csvContent = generateCsv(filteredPromotions);
              downloadCsv(csvContent, 'promotions-export.csv');
            }}>
              Export to CSV
            </Button>
          </div>
        </>
      )}
      
      {isCreateModalOpen && (
        <CreatePromotionModal
          onClose={() => setIsCreateModalOpen(false)}
          onSuccess={handleCreateSuccess}
        />
      )}
      
      {editingPromotion && (
        <EditPromotionModal
          promotion={editingPromotion}
          onClose={() => setEditingPromotion(null)}
          onSuccess={handleEditSuccess}
        />
      )}
    </AdminLayout>
  );
}

function generateCsv(promotions) {
  const headers = ['Code', 'Title', 'Type', 'Value', 'Start Date', 'End Date', 'Status', 'Clinic', 'Uses', 'Max Uses'];
  const rows = promotions.map(p => [
    p.code,
    p.title,
    p.discount_type === 'PERCENT' ? 'Percentage' : 'Fixed',
    p.discount_value,
    p.start_date,
    p.end_date,
    p.is_active ? 'Active' : 'Inactive',
    p.clinic_id ? p.clinic_name : 'All Clinics',
    p.current_uses || 0,
    p.max_uses || 'Unlimited'
  ]);
  
  return [headers, ...rows].map(row => row.join(',')).join('\n');
}

function downloadCsv(content, filename) {
  const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
2. Create Promotion Modal Component
Create client/src/components/admin/CreatePromotionModal.tsx:

import { useState } from 'react';
import { Dialog } from '../ui/dialog';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Textarea } from '../ui/textarea';
import { RadioGroup, RadioGroupItem } from '../ui/radio-group';
import { Switch } from '../ui/switch';
import { toast } from '../ui/use-toast';

export function CreatePromotionModal({ onClose, onSuccess }) {
  const [formData, setFormData] = useState({
    code: '',
    title: '',
    description: '',
    discount_type: 'PERCENT',
    discount_value: '',
    start_date: new Date().toISOString().split('T')[0],
    end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    max_uses: '',
    clinic_id: '',
    is_active: true
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [clinics, setClinics] = useState([]);
  
  // Fetch clinics on component mount
  useState(() => {
    async function fetchClinics() {
      try {
        const response = await fetch('/api/admin/clinics');
        if (response.ok) {
          const data = await response.json();
          setClinics(data);
        }
      } catch (error) {
        console.error('Failed to fetch clinics:', error);
      }
    }
    
    fetchClinics();
  }, []);
  
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/admin/promotions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to create promotion');
      }
      
      onSuccess();
    } catch (error) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <Dialog open onOpenChange={onClose}>
      <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-6">Create New Promotion</h2>
            
            <form onSubmit={handleSubmit}>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="code">Promotion Code</Label>
                    <Input
                      id="code"
                      name="code"
                      value={formData.code}
                      onChange={handleChange}
                      placeholder="e.g., SUMMER25"
                      required
                      className="uppercase"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Code should be all uppercase, no spaces
                    </p>
                  </div>
                  
                  <div>
                    <Label htmlFor="title">Title</Label>
                    <Input
                      id="title"
                      name="title"
                      value={formData.title}
                      onChange={handleChange}
                      placeholder="e.g., Summer Sale 25% Off"
                      required
                    />
                  </div>
                </div>
                
                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    name="description"
                    value={formData.description}
                    onChange={handleChange}
                    placeholder="Describe the promotion details..."
                    rows={3}
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Discount Type</Label>
                    <RadioGroup
                      value={formData.discount_type}
                      onValueChange={(value) => 
                        setFormData(prev => ({ ...prev, discount_type: value }))
                      }
                      className="flex space-x-4 mt-2"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="PERCENT" id="percent" />
                        <Label htmlFor="percent">Percentage</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="FIXED" id="fixed" />
                        <Label htmlFor="fixed">Fixed Amount</Label>
                      </div>
                    </RadioGroup>
                  </div>
                  
                  <div>
                    <Label htmlFor="discount_value">
                      {formData.discount_type === 'PERCENT' ? 'Discount Percentage' : 'Discount Amount'}
                    </Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        {formData.discount_type === 'PERCENT' ? '%' : '$'}
                      </div>
                      <Input
                        id="discount_value"
                        name="discount_value"
                        type="number"
                        value={formData.discount_value}
                        onChange={handleChange}
                        className="pl-8"
                        min="0"
                        max={formData.discount_type === 'PERCENT' ? "100" : undefined}
                        step={formData.discount_type === 'PERCENT' ? "1" : "0.01"}
                        required
                      />
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="start_date">Start Date</Label>
                    <Input
                      id="start_date"
                      name="start_date"
                      type="date"
                      value={formData.start_date}
                      onChange={handleChange}
                      required
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="end_date">End Date</Label>
                    <Input
                      id="end_date"
                      name="end_date"
                      type="date"
                      value={formData.end_date}
                      onChange={handleChange}
                      required
                      min={formData.start_date}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="max_uses">Maximum Uses (Optional)</Label>
                    <Input
                      id="max_uses"
                      name="max_uses"
                      type="number"
                      value={formData.max_uses}
                      onChange={handleChange}
                      min="0"
                      placeholder="Leave blank for unlimited"
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="clinic_id">Restrict to Clinic (Optional)</Label>
                    <select
                      id="clinic_id"
                      name="clinic_id"
                      value={formData.clinic_id}
                      onChange={handleChange}
                      className="w-full px-3 py-2 border rounded-md"
                    >
                      <option value="">All Clinics</option>
                      {clinics.map(clinic => (
                        <option key={clinic.id} value={clinic.id}>
                          {clinic.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Switch
                    id="is_active"
                    name="is_active"
                    checked={formData.is_active}
                    onCheckedChange={(checked) => 
                      setFormData(prev => ({ ...prev, is_active: checked }))
                    }
                  />
                  <Label htmlFor="is_active">Active</Label>
                </div>
              </div>
              
              <div className="mt-8 flex justify-end space-x-4">
                <Button type="button" variant="outline" onClick={onClose}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? 'Creating...' : 'Create Promotion'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </Dialog>
  );
}
3. Edit Promotion Modal Component
Create client/src/components/admin/EditPromotionModal.tsx (similar to CreatePromotionModal but pre-populated with promotion data and using PATCH endpoint).

4. Update Admin Navigation
Update the admin navigation component to include a link to the new Promotions page:

// In client/src/components/layouts/AdminSidebar.tsx or similar
// Add this to the navigation items array

{
  name: 'Promotions',
  href: '/admin/promotions',
  icon: TagIcon, // Import from your icon library
  current: pathname === '/admin/promotions'
}
5. Add the Route to the Router
Update your client-side router configuration to include the new page:

// In your router configuration file
import PromotionsPage from './pages/admin/PromotionsPage';

// Add this route
{
  path: '/admin/promotions',
  element: <PromotionsPage />
}
6. Add Analytics Tracking
In both modal components, add analytics tracking for promo creation and updates:

// After successful creation/update
analytics.track('promo_created', {
  code: formData.code,
  type: formData.discount_type,
  value: formData.discount_value
});

// or for updates
analytics.track('promo_updated', {
  code: formData.code,
  type: formData.discount_type,
  value: formData.discount_value
});
7. Create Utility Functions for Format/CSV
Create client/src/utils/format.ts if it doesn't exist:

export function formatDate(dateString: string): string {
  if (!dateString) return 'N/A';
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  }).format(date);
}

export function formatCurrency(value: number): string {
  if (value === undefined || value === null) return 'N/A';
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2
  }).format(value);
}

## Testing the Admin Promo Manager

Once implemented, you should test the following scenarios:

1. **Creating a New Promotion**:
   - Create a percentage-based discount
   - Create a fixed amount discount
   - Create a clinic-specific promotion
   - Create a promotion with usage limits

2. **Editing a Promotion**:
   - Change discount values
   - Update dates
   - Toggle active status

3. **Filtering and Searching**:
   - Filter by active/inactive status
   - Search by code or title
   - Export filtered results to CSV

4. **End-to-End Testing**:
   - Create a promotion in the admin interface
   - Test it via URL parameter in the quote builder
   - Verify it applies correctly and persists in the database

## Documentation Updates

Once the feature is fully implemented, we should update the README with a section on the Promo Manager:

```markdown
## Promo Manager

The Admin Promo Manager allows administrators to create and manage promotional codes for the dental quote system. Key features include:

### Creating Promotions
- Percentage or fixed amount discounts
- Date range restrictions
- Usage limits
- Clinic-specific promotions

### Managing Promotions
- Activate/deactivate promotions
- Edit existing promotions
- View usage statistics
- Export promotion data to CSV

### Using Promotions
- Promotions can be applied via URL parameters (e.g., ?code=SUMMER25)
- Promotions are displayed in the quote builder
- Applied promotions persist throughout the quote flow